
KatanaLRS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f8  00800100  0000227a  0000230e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000227a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  008002f8  008002f8  00002506  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000028b  00000000  00000000  00002526  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001580  00000000  00000000  000027b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003eb  00000000  00000000  00003d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001529  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00005648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fd  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000af6  00000000  00000000  00005dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000068cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_5>
      18:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_13>
      38:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e7       	ldi	r30, 0x7A	; 122
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 3f       	cpi	r26, 0xF8	; 248
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a8 ef       	ldi	r26, 0xF8	; 248
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 39       	cpi	r26, 0x9E	; 158
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6f 0b 	call	0x16de	; 0x16de <main>
      9e:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <startI2C>:
void stopI2C(void);
uint8_t writeI2C(uint8_t);
uint8_t readI2C(uint8_t);


uint8_t startI2C(uint8_t address, uint8_t intent){ // i.e. ITG3200ADDR, WRITE
      a6:	28 2f       	mov	r18, r24
	uint16_t time = TCNT1;
      a8:	e0 91 84 00 	lds	r30, 0x0084
      ac:	f0 91 85 00 	lds	r31, 0x0085
	//while( !(TWCR &(1<<TWINT)));			// Avoid Crashing
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Send Start
      b0:	84 ea       	ldi	r24, 0xA4	; 164
      b2:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
      b6:	af 01       	movw	r20, r30
      b8:	4e 5c       	subi	r20, 0xCE	; 206
      ba:	5f 4f       	sbci	r21, 0xFF	; 255
      bc:	07 c0       	rjmp	.+14     	; 0xcc <startI2C+0x26>
      be:	80 91 84 00 	lds	r24, 0x0084
      c2:	90 91 85 00 	lds	r25, 0x0085
      c6:	84 17       	cp	r24, r20
      c8:	95 07       	cpc	r25, r21
      ca:	21 f0       	breq	.+8      	; 0xd4 <startI2C+0x2e>

uint8_t startI2C(uint8_t address, uint8_t intent){ // i.e. ITG3200ADDR, WRITE
	uint16_t time = TCNT1;
	//while( !(TWCR &(1<<TWINT)));			// Avoid Crashing
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Send Start
	while( !(TWCR &(1<<TWINT))){
      cc:	80 91 bc 00 	lds	r24, 0x00BC
      d0:	87 ff       	sbrs	r24, 7
      d2:	f5 cf       	rjmp	.-22     	; 0xbe <startI2C+0x18>
		if(TCNT1== (time+50)) break;
	} //printf("ST1: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_START) printf("BadStart\n");
#endif
	TWDR = ((address<<1) | (intent & 0x01));			// Hail Slave Device
      d4:	61 70       	andi	r22, 0x01	; 1
      d6:	22 0f       	add	r18, r18
      d8:	26 2b       	or	r18, r22
      da:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT)|(1<<TWEN);			// Engage
      de:	84 e8       	ldi	r24, 0x84	; 132
      e0:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
      e4:	9f 01       	movw	r18, r30
      e6:	2e 5c       	subi	r18, 0xCE	; 206
      e8:	3f 4f       	sbci	r19, 0xFF	; 255
      ea:	07 c0       	rjmp	.+14     	; 0xfa <startI2C+0x54>
      ec:	80 91 84 00 	lds	r24, 0x0084
      f0:	90 91 85 00 	lds	r25, 0x0085
      f4:	82 17       	cp	r24, r18
      f6:	93 07       	cpc	r25, r19
      f8:	21 f0       	breq	.+8      	; 0x102 <startI2C+0x5c>
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_START) printf("BadStart\n");
#endif
	TWDR = ((address<<1) | (intent & 0x01));			// Hail Slave Device
	TWCR = (1<<TWINT)|(1<<TWEN);			// Engage
	while( !(TWCR &(1<<TWINT))){
      fa:	80 91 bc 00 	lds	r24, 0x00BC
      fe:	87 ff       	sbrs	r24, 7
     100:	f5 cf       	rjmp	.-22     	; 0xec <startI2C+0x46>
		if(TCNT1== (time+50)) break;
	} //; //printf("ST2: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS == TW_NO_INFO || TW_STATUS == TW_BUS_ERROR) printf("BadHold\n");
#endif
	return TW_STATUS;
     102:	80 91 b9 00 	lds	r24, 0x00B9
}
     106:	88 7f       	andi	r24, 0xF8	; 248
     108:	08 95       	ret

0000010a <stopI2C>:

void stopI2C(void){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Send Stop
     10a:	84 e9       	ldi	r24, 0x94	; 148
     10c:	80 93 bc 00 	sts	0x00BC, r24
	while(TWCR &(1<<TWSTO)); //printf("SP: %X\n",TWSR);
     110:	80 91 bc 00 	lds	r24, 0x00BC
     114:	84 fd       	sbrc	r24, 4
     116:	fc cf       	rjmp	.-8      	; 0x110 <stopI2C+0x6>
}
     118:	08 95       	ret

0000011a <writeI2C>:

uint8_t writeI2C(uint8_t data){
	uint16_t time = TCNT1;
     11a:	20 91 84 00 	lds	r18, 0x0084
     11e:	30 91 85 00 	lds	r19, 0x0085
	TWDR = data;							// Data
     122:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);			// Enable
     126:	84 e8       	ldi	r24, 0x84	; 132
     128:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
     12c:	2e 5c       	subi	r18, 0xCE	; 206
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	07 c0       	rjmp	.+14     	; 0x140 <writeI2C+0x26>
     132:	80 91 84 00 	lds	r24, 0x0084
     136:	90 91 85 00 	lds	r25, 0x0085
     13a:	82 17       	cp	r24, r18
     13c:	93 07       	cpc	r25, r19
     13e:	21 f0       	breq	.+8      	; 0x148 <writeI2C+0x2e>

uint8_t writeI2C(uint8_t data){
	uint16_t time = TCNT1;
	TWDR = data;							// Data
	TWCR = (1<<TWINT)|(1<<TWEN);			// Enable
	while( !(TWCR &(1<<TWINT))){
     140:	80 91 bc 00 	lds	r24, 0x00BC
     144:	87 ff       	sbrs	r24, 7
     146:	f5 cf       	rjmp	.-22     	; 0x132 <writeI2C+0x18>
		if(TCNT1== (time+50)) break;
	} //; //printf("WT: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_MT_DATA_ACK) printf("BadFrame\n");
#endif
	return TW_STATUS;
     148:	80 91 b9 00 	lds	r24, 0x00B9
}
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	08 95       	ret

00000150 <readI2C>:

uint8_t readI2C(uint8_t ackType){
	uint16_t time = TCNT1;
     150:	20 91 84 00 	lds	r18, 0x0084
     154:	30 91 85 00 	lds	r19, 0x0085
	//printf("TWCR: %X", (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA));
	TWCR = (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA);
     158:	82 95       	swap	r24
     15a:	88 0f       	add	r24, r24
     15c:	88 0f       	add	r24, r24
     15e:	80 7c       	andi	r24, 0xC0	; 192
     160:	84 68       	ori	r24, 0x84	; 132
     162:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
     166:	2e 5c       	subi	r18, 0xCE	; 206
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	07 c0       	rjmp	.+14     	; 0x17a <readI2C+0x2a>
     16c:	80 91 84 00 	lds	r24, 0x0084
     170:	90 91 85 00 	lds	r25, 0x0085
     174:	82 17       	cp	r24, r18
     176:	93 07       	cpc	r25, r19
     178:	21 f0       	breq	.+8      	; 0x182 <readI2C+0x32>

uint8_t readI2C(uint8_t ackType){
	uint16_t time = TCNT1;
	//printf("TWCR: %X", (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA));
	TWCR = (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA);
	while( !(TWCR &(1<<TWINT))){
     17a:	80 91 bc 00 	lds	r24, 0x00BC
     17e:	87 ff       	sbrs	r24, 7
     180:	f5 cf       	rjmp	.-22     	; 0x16c <readI2C+0x1c>
		if(TCNT1== (time+50)) break;
	} //; //printf("RV: %X\n",TWSR);
	return TWDR;
     182:	80 91 bb 00 	lds	r24, 0x00BB
}
     186:	08 95       	ret

00000188 <transferSPI>:


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     188:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     18a:	0d b4       	in	r0, 0x2d	; 45
     18c:	07 fe       	sbrs	r0, 7
     18e:	fd cf       	rjmp	.-6      	; 0x18a <transferSPI+0x2>
	return SPDR;
     190:	8e b5       	in	r24, 0x2e	; 46
}
     192:	08 95       	ret

00000194 <__vector_1>:
	uint16_t sysVin;
	uint16_t atMega;
} volt;

// Interrupt Vectors (Listed in Priority Order)
ISR(INT0_vect){
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	11 24       	eor	r1, r1
     19e:	8f 93       	push	r24
	sys.intSrc.rfm = 1;
     1a0:	80 91 90 03 	lds	r24, 0x0390
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	80 93 90 03 	sts	0x0390, r24
	EIMSK = 0;
     1aa:	1d ba       	out	0x1d, r1	; 29
}
     1ac:	8f 91       	pop	r24
     1ae:	0f 90       	pop	r0
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	0f 90       	pop	r0
     1b4:	1f 90       	pop	r1
     1b6:	18 95       	reti

000001b8 <__vector_5>:

ISR(PCINT2_vect){
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	8f 93       	push	r24
	sys.intSrc.uart = 1;
     1c4:	80 91 90 03 	lds	r24, 0x0390
     1c8:	84 60       	ori	r24, 0x04	; 4
     1ca:	80 93 90 03 	sts	0x0390, r24
	PCICR = 0;
     1ce:	10 92 68 00 	sts	0x0068, r1
	PCMSK2 = 0;
     1d2:	10 92 6d 00 	sts	0x006D, r1
}
     1d6:	8f 91       	pop	r24
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <__vector_6>:

ISR(WDT_vect){
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	8f 93       	push	r24
	sys.intSrc.wdt = 1;
     1ee:	80 91 90 03 	lds	r24, 0x0390
     1f2:	82 60       	ori	r24, 0x02	; 2
     1f4:	80 93 90 03 	sts	0x0390, r24
}
     1f8:	8f 91       	pop	r24
     1fa:	0f 90       	pop	r0
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	0f 90       	pop	r0
     200:	1f 90       	pop	r1
     202:	18 95       	reti

00000204 <__vector_13>:

ISR(TIMER1_OVF_vect ){ // May want to redo as if/else structure, more efficient?
     204:	1f 92       	push	r1
     206:	0f 92       	push	r0
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	2f 93       	push	r18
     210:	3f 93       	push	r19
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	ef 93       	push	r30
     218:	ff 93       	push	r31
	switch(ch){
     21a:	80 91 7d 03 	lds	r24, 0x037D
     21e:	84 30       	cpi	r24, 0x04	; 4
     220:	c9 f1       	breq	.+114    	; 0x294 <__vector_13+0x90>
     222:	85 30       	cpi	r24, 0x05	; 5
     224:	50 f4       	brcc	.+20     	; 0x23a <__vector_13+0x36>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	61 f1       	breq	.+88     	; 0x282 <__vector_13+0x7e>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	80 f0       	brcs	.+32     	; 0x24e <__vector_13+0x4a>
     22e:	82 30       	cpi	r24, 0x02	; 2
     230:	59 f1       	breq	.+86     	; 0x288 <__vector_13+0x84>
     232:	83 30       	cpi	r24, 0x03	; 3
     234:	09 f0       	breq	.+2      	; 0x238 <__vector_13+0x34>
     236:	81 c0       	rjmp	.+258    	; 0x33a <__vector_13+0x136>
     238:	2a c0       	rjmp	.+84     	; 0x28e <__vector_13+0x8a>
     23a:	86 30       	cpi	r24, 0x06	; 6
     23c:	89 f1       	breq	.+98     	; 0x2a0 <__vector_13+0x9c>
     23e:	86 30       	cpi	r24, 0x06	; 6
     240:	60 f1       	brcs	.+88     	; 0x29a <__vector_13+0x96>
     242:	87 30       	cpi	r24, 0x07	; 7
     244:	81 f1       	breq	.+96     	; 0x2a6 <__vector_13+0xa2>
     246:	88 30       	cpi	r24, 0x08	; 8
     248:	09 f0       	breq	.+2      	; 0x24c <__vector_13+0x48>
     24a:	77 c0       	rjmp	.+238    	; 0x33a <__vector_13+0x136>
     24c:	54 c0       	rjmp	.+168    	; 0x2f6 <__vector_13+0xf2>
		case 0:
			PWM_1 = HIGH;
     24e:	40 9a       	sbi	0x08, 0	; 8
			ICR1 = pwmValues[ch]<<1;
     250:	e0 91 7d 03 	lds	r30, 0x037D
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	e9 51       	subi	r30, 0x19	; 25
     25c:	fd 4f       	sbci	r31, 0xFD	; 253
     25e:	80 81       	ld	r24, Z
     260:	91 81       	ldd	r25, Z+1	; 0x01
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	90 93 87 00 	sts	0x0087, r25
     26a:	80 93 86 00 	sts	0x0086, r24
			pwmFrameSum = pwmValues[ch]; // Note the subtle difference, =, not +=
     26e:	e0 91 7d 03 	lds	r30, 0x037D
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e9 51       	subi	r30, 0x19	; 25
     27a:	fd 4f       	sbci	r31, 0xFD	; 253
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	32 c0       	rjmp	.+100    	; 0x2e6 <__vector_13+0xe2>
			ch+=1;
			break;
		case 1:
			PWM_1 = LOW;
     282:	40 98       	cbi	0x08, 0	; 8
			PWM_2 = HIGH;
     284:	41 9a       	sbi	0x08, 1	; 8
     286:	11 c0       	rjmp	.+34     	; 0x2aa <__vector_13+0xa6>
			ICR1 = pwmValues[ch]<<1;
			pwmFrameSum += pwmValues[ch];
			ch+=1;
			break;
		case 2:
			PWM_2 = LOW;
     288:	41 98       	cbi	0x08, 1	; 8
			PWM_3 = HIGH;
     28a:	42 9a       	sbi	0x08, 2	; 8
     28c:	0e c0       	rjmp	.+28     	; 0x2aa <__vector_13+0xa6>
			ICR1 = pwmValues[ch]<<1;
			pwmFrameSum += pwmValues[ch];
			ch+=1;
			break;
		case 3:
			PWM_3 = LOW;
     28e:	42 98       	cbi	0x08, 2	; 8
			PWM_4 = HIGH;
     290:	43 9a       	sbi	0x08, 3	; 8
     292:	0b c0       	rjmp	.+22     	; 0x2aa <__vector_13+0xa6>
			ICR1 = pwmValues[ch]<<1;
			pwmFrameSum += pwmValues[ch];
			ch+=1;
			break;
		case 4:
			PWM_4 = LOW;
     294:	43 98       	cbi	0x08, 3	; 8
			PWM_5 = HIGH;
     296:	5c 9a       	sbi	0x0b, 4	; 11
     298:	08 c0       	rjmp	.+16     	; 0x2aa <__vector_13+0xa6>
			ICR1 = pwmValues[ch]<<1;
			pwmFrameSum += pwmValues[ch];
			ch+=1;
			break;
		case 5:
			PWM_5 = LOW;
     29a:	5c 98       	cbi	0x0b, 4	; 11
			PWM_6 = HIGH;
     29c:	5d 9a       	sbi	0x0b, 5	; 11
     29e:	05 c0       	rjmp	.+10     	; 0x2aa <__vector_13+0xa6>
			ICR1 = pwmValues[ch]<<1;
			pwmFrameSum += pwmValues[ch];
			ch+=1;
			break;
		case 6:
			PWM_6 = LOW;
     2a0:	5d 98       	cbi	0x0b, 5	; 11
			PWM_7 = HIGH;
     2a2:	5e 9a       	sbi	0x0b, 6	; 11
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_13+0xa6>
			ICR1 = pwmValues[ch]<<1;
			pwmFrameSum += pwmValues[ch];
			ch+=1;
			break;
		case 7:
			PWM_7 = LOW;
     2a6:	5e 98       	cbi	0x0b, 6	; 11
			PWM_8 = HIGH;
     2a8:	5f 9a       	sbi	0x0b, 7	; 11
			ICR1 = pwmValues[ch]<<1;
     2aa:	e0 91 7d 03 	lds	r30, 0x037D
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	e9 51       	subi	r30, 0x19	; 25
     2b6:	fd 4f       	sbci	r31, 0xFD	; 253
     2b8:	80 81       	ld	r24, Z
     2ba:	91 81       	ldd	r25, Z+1	; 0x01
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	90 93 87 00 	sts	0x0087, r25
     2c4:	80 93 86 00 	sts	0x0086, r24
			pwmFrameSum += pwmValues[ch];
     2c8:	20 91 7e 03 	lds	r18, 0x037E
     2cc:	30 91 7f 03 	lds	r19, 0x037F
     2d0:	e0 91 7d 03 	lds	r30, 0x037D
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	e9 51       	subi	r30, 0x19	; 25
     2dc:	fd 4f       	sbci	r31, 0xFD	; 253
     2de:	80 81       	ld	r24, Z
     2e0:	91 81       	ldd	r25, Z+1	; 0x01
     2e2:	82 0f       	add	r24, r18
     2e4:	93 1f       	adc	r25, r19
     2e6:	90 93 7f 03 	sts	0x037F, r25
     2ea:	80 93 7e 03 	sts	0x037E, r24
			ch+=1;
     2ee:	80 91 7d 03 	lds	r24, 0x037D
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	23 c0       	rjmp	.+70     	; 0x33c <__vector_13+0x138>
			// printf("Sum: %u\n",pwmFrameSum); Getting 14000
			break;
		case 8:
			PORTC &= ~(0x0F);
     2f6:	88 b1       	in	r24, 0x08	; 8
     2f8:	80 7f       	andi	r24, 0xF0	; 240
     2fa:	88 b9       	out	0x08, r24	; 8
			PORTD &= ~(0xF0);
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	8b b9       	out	0x0b, r24	; 11
			ICR1 = (20000 - pwmFrameSum)<<1;
     302:	20 91 7e 03 	lds	r18, 0x037E
     306:	30 91 7f 03 	lds	r19, 0x037F
     30a:	80 e2       	ldi	r24, 0x20	; 32
     30c:	9e e4       	ldi	r25, 0x4E	; 78
     30e:	82 1b       	sub	r24, r18
     310:	93 0b       	sbc	r25, r19
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	90 93 87 00 	sts	0x0087, r25
     31a:	80 93 86 00 	sts	0x0086, r24
			ch = 0;
     31e:	10 92 7d 03 	sts	0x037D, r1
			OCR1A = 800;
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	90 93 89 00 	sts	0x0089, r25
     32a:	80 93 88 00 	sts	0x0088, r24
			TCCR1A |= _BV(COM1A1);
     32e:	80 91 80 00 	lds	r24, 0x0080
     332:	80 68       	ori	r24, 0x80	; 128
     334:	80 93 80 00 	sts	0x0080, r24
     338:	03 c0       	rjmp	.+6      	; 0x340 <__vector_13+0x13c>
			break;
		default:
			ch = 8;
     33a:	88 e0       	ldi	r24, 0x08	; 8
     33c:	80 93 7d 03 	sts	0x037D, r24
	}
}
     340:	ff 91       	pop	r31
     342:	ef 91       	pop	r30
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	3f 91       	pop	r19
     34a:	2f 91       	pop	r18
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <__vector_14>:

ISR(TIMER0_COMPA_vect){
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	2f 93       	push	r18
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
	sys.intSrc.timer0 = 1;
     366:	80 91 90 03 	lds	r24, 0x0390
     36a:	88 60       	ori	r24, 0x08	; 8
     36c:	80 93 90 03 	sts	0x0390, r24
	timer10ms = (timer10ms >= 60000)? 0 : timer10ms+1; // 600 sec, 10 min
     370:	80 91 f8 02 	lds	r24, 0x02F8
     374:	90 91 f9 02 	lds	r25, 0x02F9
     378:	80 56       	subi	r24, 0x60	; 96
     37a:	9a 4e       	sbci	r25, 0xEA	; 234
     37c:	18 f0       	brcs	.+6      	; 0x384 <__vector_14+0x2e>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	05 c0       	rjmp	.+10     	; 0x38e <__vector_14+0x38>
     384:	80 91 f8 02 	lds	r24, 0x02F8
     388:	90 91 f9 02 	lds	r25, 0x02F9
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	90 93 f9 02 	sts	0x02F9, r25
     392:	80 93 f8 02 	sts	0x02F8, r24
}
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	2f 91       	pop	r18
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_21>:
		default:
			break;
	}	
}

ISR(ADC_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	8f 93       	push	r24
	sleep_disable();
     3b2:	83 b7       	in	r24, 0x33	; 51
     3b4:	8e 7f       	andi	r24, 0xFE	; 254
     3b6:	83 bf       	out	0x33, r24	; 51
}
     3b8:	8f 91       	pop	r24
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <rcOutputs>:
	
	LED_OR = LOW;
}

void rcOutputs(uint8_t mode){
	TIMSK1 = (mode == ENABLED)? _BV(TOIE1) : 0;
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <rcOutputs+0x8>
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	90 93 6f 00 	sts	0x006F, r25
	TCCR1A = (mode == ENABLED)? TCCR1A | _BV(COM1A1) : TCCR1A & (~_BV(COM1A1));
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	21 f4       	brne	.+8      	; 0x3dc <rcOutputs+0x18>
     3d4:	80 91 80 00 	lds	r24, 0x0080
     3d8:	80 68       	ori	r24, 0x80	; 128
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <rcOutputs+0x1e>
     3dc:	80 91 80 00 	lds	r24, 0x0080
     3e0:	8f 77       	andi	r24, 0x7F	; 127
     3e2:	80 93 80 00 	sts	0x0080, r24
		DDRD &= ~(0xF0);
		// PORTC &= ~(0x0F);
		// PORTD &= ~(0xF0);
	}
	*/
}
     3e6:	08 95       	ret

000003e8 <uartIntConfig>:

void uartIntConfig(uint8_t mode){
     3e8:	98 2f       	mov	r25, r24
	if(mode == ENABLED){
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	31 f4       	brne	.+12     	; 0x3fa <uartIntConfig+0x12>
		PCICR = (1<<PCIE2);
     3ee:	84 e0       	ldi	r24, 0x04	; 4
     3f0:	80 93 68 00 	sts	0x0068, r24
		PCMSK2 = (1<<PCINT16);
     3f4:	90 93 6d 00 	sts	0x006D, r25
     3f8:	08 95       	ret
	} else{
		PCICR = 0; //(1<<PCIE2);
     3fa:	10 92 68 00 	sts	0x0068, r1
		PCMSK2 = 0; //(1<<PCINT16);
     3fe:	10 92 6d 00 	sts	0x006D, r1
     402:	08 95       	ret

00000404 <wdtIntConfig>:
	}
}

void wdtIntConfig(uint8_t mode, uint8_t interval){
	uint8_t value = (uint8_t)( _BV(WDIE) | _BV(WDE) | (interval & 0x08? (1<<WDP3): 0x00) | (interval & 0x07) );
     404:	63 fd       	sbrc	r22, 3
     406:	02 c0       	rjmp	.+4      	; 0x40c <wdtIntConfig+0x8>
     408:	98 e4       	ldi	r25, 0x48	; 72
     40a:	01 c0       	rjmp	.+2      	; 0x40e <wdtIntConfig+0xa>
     40c:	98 e6       	ldi	r25, 0x68	; 104
	if(mode){
     40e:	88 23       	and	r24, r24
     410:	51 f0       	breq	.+20     	; 0x426 <wdtIntConfig+0x22>
		WDTCSR |= (1<<WDCE)|(1<<WDE);
     412:	80 91 60 00 	lds	r24, 0x0060
     416:	88 61       	ori	r24, 0x18	; 24
     418:	80 93 60 00 	sts	0x0060, r24
		PCMSK2 = 0; //(1<<PCINT16);
	}
}

void wdtIntConfig(uint8_t mode, uint8_t interval){
	uint8_t value = (uint8_t)( _BV(WDIE) | _BV(WDE) | (interval & 0x08? (1<<WDP3): 0x00) | (interval & 0x07) );
     41c:	67 70       	andi	r22, 0x07	; 7
     41e:	96 2b       	or	r25, r22
	if(mode){
		WDTCSR |= (1<<WDCE)|(1<<WDE);
		WDTCSR = value;
     420:	90 93 60 00 	sts	0x0060, r25
     424:	08 95       	ret
	} else{
		WDTCSR |= (1<<WDCE)|(1<<WDE);
     426:	80 91 60 00 	lds	r24, 0x0060
     42a:	88 61       	ori	r24, 0x18	; 24
     42c:	80 93 60 00 	sts	0x0060, r24
		WDTCSR = 0;
     430:	10 92 60 00 	sts	0x0060, r1
     434:	08 95       	ret

00000436 <atMegaInit>:
	
	return systemReturnState;
}

uint8_t atMegaInit(void){
	uint8_t startupStatus = MCUSR; //wdt_init(); //
     436:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
     438:	14 be       	out	0x34, r1	; 52
	WDTCSR |= _BV(WDCE) | _BV(WDE); // Three Options Below:
     43a:	e0 e6       	ldi	r30, 0x60	; 96
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	90 81       	ld	r25, Z
     440:	98 61       	ori	r25, 0x18	; 24
     442:	90 83       	st	Z, r25
	// Was this WDTCSR = _BV(WDIE) | _BV(WDP2) | _BV(WDP1) | _BV(WDE); // Hardwire the WDT for 1 Sec
	//WDTCSR = _BV(WDE) | _BV(WDP3) | _BV(WDP0);
	//WDTCSR = 0;
	WDTCSR = _BV(WDIE) | _BV(WDE) | _BV(WDP3) | _BV(WDP0);
     444:	99 e6       	ldi	r25, 0x69	; 105
     446:	90 83       	st	Z, r25
	wdt_reset();
     448:	a8 95       	wdr
	
	// System
	//MCUCR |= (1<<PUD);		// Pull-up Disable
	MCUCR = 0;
     44a:	15 be       	out	0x35, r1	; 53
	PRR = 0;
     44c:	10 92 64 00 	sts	0x0064, r1

	// Timers
	TCCR0A = _BV(WGM01);
     450:	22 e0       	ldi	r18, 0x02	; 2
     452:	24 bd       	out	0x24, r18	; 36
	TCCR0B = (1<<CS02)|(1<<CS00); // clk/1024
     454:	95 e0       	ldi	r25, 0x05	; 5
     456:	95 bd       	out	0x25, r25	; 37
	OCR0A = 156; // 10 ms // Or is it 155?
     458:	9c e9       	ldi	r25, 0x9C	; 156
     45a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);
     45c:	20 93 6e 00 	sts	0x006E, r18
	
	
	TCCR1A = _BV(WGM11); //_BV(COM1A1)|
     460:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = _BV(WGM13)|_BV(WGM12)|(1<<CS11);
     464:	9a e1       	ldi	r25, 0x1A	; 26
     466:	90 93 81 00 	sts	0x0081, r25
	ICR1 = 50000; // 25 ms
     46a:	20 e5       	ldi	r18, 0x50	; 80
     46c:	33 ec       	ldi	r19, 0xC3	; 195
     46e:	30 93 87 00 	sts	0x0087, r19
     472:	20 93 86 00 	sts	0x0086, r18
	OCR1A = 800; // 400 uS
     476:	20 e2       	ldi	r18, 0x20	; 32
     478:	33 e0       	ldi	r19, 0x03	; 3
     47a:	30 93 89 00 	sts	0x0089, r19
     47e:	20 93 88 00 	sts	0x0088, r18
	
	
	// IO Ports
	// 0: Input (Hi-Z) 1: Output
	//        76543210		7		6		5		4		3		2		1		0
	PORTB |=0b00000100;	//	XTAL2	XTAL1	SCK		MISO	MOSI	CS_RFM	LED_BL	LED_OR
     482:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |=0b00001111;	//	--		Reset	SCL		SDA		P4		P3		P2		P1
     484:	98 b1       	in	r25, 0x08	; 8
     486:	9f 60       	ori	r25, 0x0F	; 15
     488:	98 b9       	out	0x08, r25	; 8
	PORTD |=0b11110010;	//	P8		P7		P6		P5		RFM_PBL	RF_INT	TXD		RXD
     48a:	9b b1       	in	r25, 0x0b	; 11
     48c:	92 6f       	ori	r25, 0xF2	; 242
     48e:	9b b9       	out	0x0b, r25	; 11
	DDRB |= 0b00101111;	
     490:	94 b1       	in	r25, 0x04	; 4
     492:	9f 62       	ori	r25, 0x2F	; 47
     494:	94 b9       	out	0x04, r25	; 4
    DDRC |= 0b00001111;	
     496:	97 b1       	in	r25, 0x07	; 7
     498:	9f 60       	ori	r25, 0x0F	; 15
     49a:	97 b9       	out	0x07, r25	; 7
    DDRD |= 0b11110010;	
     49c:	9a b1       	in	r25, 0x0a	; 10
     49e:	92 6f       	ori	r25, 0xF2	; 242
     4a0:	9a b9       	out	0x0a, r25	; 10

	
	// Serial Port
	UBRR0H = UART_UBRR >> 8;
     4a2:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UART_UBRR;
     4a6:	98 e0       	ldi	r25, 0x08	; 8
     4a8:	90 93 c4 00 	sts	0x00C4, r25
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     4ac:	98 e9       	ldi	r25, 0x98	; 152
     4ae:	90 93 c1 00 	sts	0x00C1, r25
    stdout = &uart_io; //= stdin 
     4b2:	29 ed       	ldi	r18, 0xD9	; 217
     4b4:	32 e0       	ldi	r19, 0x02	; 2
     4b6:	30 93 9b 03 	sts	0x039B, r19
     4ba:	20 93 9a 03 	sts	0x039A, r18
	
	//SPI
	SPCR	= (1<<SPE)|(1<<MSTR)|(1<<SPR0); // |(1<<CPOL)|(1<<CPHA)
     4be:	91 e5       	ldi	r25, 0x51	; 81
     4c0:	9c bd       	out	0x2c, r25	; 44
	
	//I2C
	TWCR = (1<<TWEN) | (1<<TWEA);
     4c2:	94 e4       	ldi	r25, 0x44	; 68
     4c4:	90 93 bc 00 	sts	0x00BC, r25
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0));
     4c8:	e9 eb       	ldi	r30, 0xB9	; 185
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	90 81       	ld	r25, Z
     4ce:	9c 7f       	andi	r25, 0xFC	; 252
     4d0:	90 83       	st	Z, r25
	TWBR = ((F_CPU / I2C_FREQ) - 16) / 2;
     4d2:	9c e0       	ldi	r25, 0x0C	; 12
     4d4:	90 93 b8 00 	sts	0x00B8, r25
	
	// ADC
	ADMUX 	= 0; //(1<<REFS0);	// AVcc Connected
     4d8:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
     4dc:	9f e8       	ldi	r25, 0x8F	; 143
     4de:	90 93 7a 00 	sts	0x007A, r25
	DIDR0 	= (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     4e2:	9f e3       	ldi	r25, 0x3F	; 63
     4e4:	90 93 7e 00 	sts	0x007E, r25

	//PCICR = 0; //(1<<PCIE2);
	//PCMSK2 = 0; //(1<<PCINT16);
	
	EICRA = 0;
     4e8:	10 92 69 00 	sts	0x0069, r1
	EIMSK = 0; //(1<<INT1)|(1<<INT0);
     4ec:	1d ba       	out	0x1d, r1	; 29
	
	sei();
     4ee:	78 94       	sei
	
	return startupStatus;
}
     4f0:	08 95       	ret

000004f2 <systemSleep>:
	//printf("_T\t%u",TCNT1);


}

uint8_t systemSleep(uint8_t interval){
     4f2:	28 2f       	mov	r18, r24
	//	Interval	0	1	2	3	4	5	6	7	8	9
	//	Time in ms	16	32	64	128	256	512	1k	2k	4k	8k
	
	//LED = LOW;
	
	cli();
     4f4:	f8 94       	cli
	
	TWCR = 0;
     4f6:	10 92 bc 00 	sts	0x00BC, r1
	TWSR = 0;
     4fa:	10 92 b9 00 	sts	0x00B9, r1
	SPCR = 0;
     4fe:	1c bc       	out	0x2c, r1	; 44
	ADMUX = 0;
     500:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     504:	10 92 7a 00 	sts	0x007A, r1
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     508:	8f e3       	ldi	r24, 0x3F	; 63
     50a:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 = (1<<AIN1D)|(1<<AIN0D);
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	80 93 7f 00 	sts	0x007F, r24
	UCSR0B =0;
     514:	10 92 c1 00 	sts	0x00C1, r1
	TCCR1B = 0;
     518:	10 92 81 00 	sts	0x0081, r1
	DDRB = DDRC = DDRD = 0;
     51c:	1a b8       	out	0x0a, r1	; 10
     51e:	8a b1       	in	r24, 0x0a	; 10
     520:	87 b9       	out	0x07, r24	; 7
     522:	87 b1       	in	r24, 0x07	; 7
     524:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTC = PORTD = 0; // May want to comment this out to clean up waveforms
     526:	1b b8       	out	0x0b, r1	; 11
     528:	8b b1       	in	r24, 0x0b	; 11
     52a:	88 b9       	out	0x08, r24	; 8
     52c:	88 b1       	in	r24, 0x08	; 8
     52e:	85 b9       	out	0x05, r24	; 5
	
	//MPU_VLOGIC = LOW;
	power_all_disable();
     530:	80 91 64 00 	lds	r24, 0x0064
     534:	8f 6e       	ori	r24, 0xEF	; 239
     536:	80 93 64 00 	sts	0x0064, r24
	
	//wdt_reset();
	// uint8_t value = (uint8_t)( ((configFlags.wdtSlpEn)<<WDIE) | (interval & 0x08? (1<<WDP3): 0x00) | (interval & 0x07) );
	uint8_t value = (uint8_t)( (WDTCSR &(_BV(WDIE) | _BV(WDE))) | (interval & 0x08? (1<<WDP3): 0x00) | (interval & 0x07) );
     53a:	80 91 60 00 	lds	r24, 0x0060
     53e:	23 fd       	sbrc	r18, 3
     540:	02 c0       	rjmp	.+4      	; 0x546 <systemSleep+0x54>
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	01 c0       	rjmp	.+2      	; 0x548 <systemSleep+0x56>
     546:	90 e2       	ldi	r25, 0x20	; 32
     548:	27 70       	andi	r18, 0x07	; 7
     54a:	88 74       	andi	r24, 0x48	; 72
     54c:	82 2b       	or	r24, r18
     54e:	98 2b       	or	r25, r24
	MCUSR = 0;
     550:	14 be       	out	0x34, r1	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     552:	80 91 60 00 	lds	r24, 0x0060
     556:	88 61       	ori	r24, 0x18	; 24
     558:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = value; //_BV(WDIE) | _BV(WDE) | _BV(WDP3) | _BV(WDP0);
     55c:	90 93 60 00 	sts	0x0060, r25
	
	
	// if(sys.state == DOWN)			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	// else if(sys.state == SLEEP) 	set_sleep_mode(SLEEP_MODE_STANDBY);
	// else										set_sleep_mode(SLEEP_MODE_IDLE);
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     560:	83 b7       	in	r24, 0x33	; 51
     562:	81 7f       	andi	r24, 0xF1	; 241
     564:	84 60       	ori	r24, 0x04	; 4
     566:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     568:	83 b7       	in	r24, 0x33	; 51
     56a:	81 60       	ori	r24, 0x01	; 1
     56c:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     56e:	85 b7       	in	r24, 0x35	; 53
     570:	80 66       	ori	r24, 0x60	; 96
     572:	85 bf       	out	0x35, r24	; 53
     574:	8f 7d       	andi	r24, 0xDF	; 223
     576:	85 bf       	out	0x35, r24	; 53
	sei();
     578:	78 94       	sei
	sleep_cpu();
     57a:	88 95       	sleep
	
	sleep_disable();
     57c:	83 b7       	in	r24, 0x33	; 51
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	83 bf       	out	0x33, r24	; 51
	uint8_t systemReturnState = atMegaInit();
     582:	0e 94 1b 02 	call	0x436	; 0x436 <atMegaInit>
	
	//LED = HIGH;
	
	return systemReturnState;
}
     586:	08 95       	ret

00000588 <radioWriteReg>:

	#endif
}

void radioWriteReg(uint8_t regAddress, uint8_t regValue){
	CS_RFM = LOW;
     588:	2a 98       	cbi	0x05, 2	; 5
		transferSPI((RFM_WRITE<<7) | regAddress);
     58a:	80 68       	ori	r24, 0x80	; 128


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     58c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     58e:	0d b4       	in	r0, 0x2d	; 45
     590:	07 fe       	sbrs	r0, 7
     592:	fd cf       	rjmp	.-6      	; 0x58e <radioWriteReg+0x6>
	return SPDR;
     594:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     596:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
     598:	0d b4       	in	r0, 0x2d	; 45
     59a:	07 fe       	sbrs	r0, 7
     59c:	fd cf       	rjmp	.-6      	; 0x598 <radioWriteReg+0x10>
	return SPDR;
     59e:	8e b5       	in	r24, 0x2e	; 46
		transferSPI(regValue);
	CS_RFM = HIGH;
     5a0:	2a 9a       	sbi	0x05, 2	; 5
}
     5a2:	08 95       	ret

000005a4 <radioMode>:
	
	return startupStatus;
}

void radioMode(uint8_t mode){
	radioWriteReg(GPIO_0_CFG, GPIO_TXST);
     5a4:	8b e0       	ldi	r24, 0x0B	; 11
     5a6:	62 e1       	ldi	r22, 0x12	; 18
     5a8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(GPIO_1_CFG, GPIO_RXST);
     5ac:	8c e0       	ldi	r24, 0x0C	; 12
     5ae:	65 e1       	ldi	r22, 0x15	; 21
     5b0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(GPIO_2_CFG, GPIO_PMBLDET);
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	69 e1       	ldi	r22, 0x19	; 25
     5b8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	//																								Add		R/W	Function/Desc		[7]			[6]			[5]			[4]			[3]			[2]			[1]			[0]		Reset Value
	radioWriteReg(0x06, 0x00);		// Disable all interrupts										06		R/W	Interrupt Enable 2	enswdet		enpreaval	enpreainval	enrssi		enwut		enlbd		enchiprdy	enpor	03h
     5bc:	86 e0       	ldi	r24, 0x06	; 6
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x07, 0x01);		// Set READY mode
     5c4:	87 e0       	ldi	r24, 0x07	; 7
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x09, 0x7F);		// Cap = 12.5pF
     5cc:	89 e0       	ldi	r24, 0x09	; 9
     5ce:	6f e7       	ldi	r22, 0x7F	; 127
     5d0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x0A, 0x05);		// Clk output is 2MHz
     5d4:	8a e0       	ldi	r24, 0x0A	; 10
     5d6:	65 e0       	ldi	r22, 0x05	; 5
     5d8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x0F, 0x70);		// NO ADC used
     5dc:	8f e0       	ldi	r24, 0x0F	; 15
     5de:	60 e7       	ldi	r22, 0x70	; 112
     5e0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x10, 0x00);		// no ADC used
     5e4:	80 e1       	ldi	r24, 0x10	; 16
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x12, 0x00);		// No temp sensor used
     5ec:	82 e1       	ldi	r24, 0x12	; 18
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x13, 0x00);		// no temp sensor used
     5f4:	83 e1       	ldi	r24, 0x13	; 19
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x70, 0x20);		// No manchester code, no data whiting, data rate < 30Kbps
     5fc:	80 e7       	ldi	r24, 0x70	; 112
     5fe:	60 e2       	ldi	r22, 0x20	; 32
     600:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x1C, 0x1D);		// IF filter bandwidth
     604:	8c e1       	ldi	r24, 0x1C	; 28
     606:	6d e1       	ldi	r22, 0x1D	; 29
     608:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x1D, 0x40);		// AFC Loop
     60c:	8d e1       	ldi	r24, 0x1D	; 29
     60e:	60 e4       	ldi	r22, 0x40	; 64
     610:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	// radioWriteReg(0x1E, 0x0A);	// AFC timing

	radioWriteReg(0x20, 0xA1);		// clock recovery
     614:	80 e2       	ldi	r24, 0x20	; 32
     616:	61 ea       	ldi	r22, 0xA1	; 161
     618:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x21, 0x20);		// clock recovery
     61c:	81 e2       	ldi	r24, 0x21	; 33
     61e:	60 e2       	ldi	r22, 0x20	; 32
     620:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x22, 0x4E);		// clock recovery
     624:	82 e2       	ldi	r24, 0x22	; 34
     626:	6e e4       	ldi	r22, 0x4E	; 78
     628:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x23, 0xA5);		// clock recovery
     62c:	83 e2       	ldi	r24, 0x23	; 35
     62e:	65 ea       	ldi	r22, 0xA5	; 165
     630:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x24, 0x00);		// clock recovery timing
     634:	84 e2       	ldi	r24, 0x24	; 36
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x25, 0x0A);		// clock recovery timing
     63c:	85 e2       	ldi	r24, 0x25	; 37
     63e:	6a e0       	ldi	r22, 0x0A	; 10
     640:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	// radioWriteReg(0x2A, 0x18);	// AFC Limiter
	radioWriteReg(0x2C, 0x00);		// OOK Counter
     644:	8c e2       	ldi	r24, 0x2C	; 44
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x2D, 0x00);		// OOK Counter
     64c:	8d e2       	ldi	r24, 0x2D	; 45
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x2E, 0x00);		// Slicer Peak Hold
     654:	8e e2       	ldi	r24, 0x2E	; 46
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x6E, 0x27);		// 0x27 for 4800, 0x4E for 9600
     65c:	8e e6       	ldi	r24, 0x6E	; 110
     65e:	67 e2       	ldi	r22, 0x27	; 39
     660:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x6F, 0x52);		// 0x52 for 4800, 0xA5 for 9600
     664:	8f e6       	ldi	r24, 0x6F	; 111
     666:	62 e5       	ldi	r22, 0x52	; 82
     668:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x30, 0x00);		// Data access control <steve> 0x8C
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x32, 0xFF);		// Header control
     674:	82 e3       	ldi	r24, 0x32	; 50
     676:	6f ef       	ldi	r22, 0xFF	; 255
     678:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x33, 0x42);		// Header 3, 2, 1, 0 used for head length, fixed packet length, synchronize word length 3, 2,
     67c:	83 e3       	ldi	r24, 0x33	; 51
     67e:	62 e4       	ldi	r22, 0x42	; 66
     680:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x34, 64);		// 64 nibble = 32 byte preamble
     684:	84 e3       	ldi	r24, 0x34	; 52
     686:	60 e4       	ldi	r22, 0x40	; 64
     688:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x35, 0x20);		// 0x35 need to detect 20bit preamble
     68c:	85 e3       	ldi	r24, 0x35	; 53
     68e:	60 e2       	ldi	r22, 0x20	; 32
     690:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x36, 0x2D);		// synchronize word
     694:	86 e3       	ldi	r24, 0x36	; 54
     696:	6d e2       	ldi	r22, 0x2D	; 45
     698:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x37, 0xD4);
     69c:	87 e3       	ldi	r24, 0x37	; 55
     69e:	64 ed       	ldi	r22, 0xD4	; 212
     6a0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x38, 0x00);
     6a4:	88 e3       	ldi	r24, 0x38	; 56
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x39, 0x00);
     6ac:	89 e3       	ldi	r24, 0x39	; 57
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x3A, '*');		// set tx header 3
     6b4:	8a e3       	ldi	r24, 0x3A	; 58
     6b6:	6a e2       	ldi	r22, 0x2A	; 42
     6b8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x3B, 'E');		// set tx header 2
     6bc:	8b e3       	ldi	r24, 0x3B	; 59
     6be:	65 e4       	ldi	r22, 0x45	; 69
     6c0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x3C, 'W');		// set tx header 1
     6c4:	8c e3       	ldi	r24, 0x3C	; 60
     6c6:	67 e5       	ldi	r22, 0x57	; 87
     6c8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x3D, 'S');		// set tx header 0
     6cc:	8d e3       	ldi	r24, 0x3D	; 61
     6ce:	63 e5       	ldi	r22, 0x53	; 83
     6d0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	// radioWriteReg(0x3E, 17);		// set packet length to 17 bytes (max size: 255 bytes)
	radioWriteReg(0x3E, 50);	// set packet length to PKTSIZE bytes (max size: 255 bytes)
     6d4:	8e e3       	ldi	r24, 0x3E	; 62
     6d6:	62 e3       	ldi	r22, 0x32	; 50
     6d8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x3F, '*');		// set rx header
     6dc:	8f e3       	ldi	r24, 0x3F	; 63
     6de:	6a e2       	ldi	r22, 0x2A	; 42
     6e0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x40, 'E');
     6e4:	80 e4       	ldi	r24, 0x40	; 64
     6e6:	65 e4       	ldi	r22, 0x45	; 69
     6e8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x41, 'W');
     6ec:	81 e4       	ldi	r24, 0x41	; 65
     6ee:	67 e5       	ldi	r22, 0x57	; 87
     6f0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x42, 'S');
     6f4:	82 e4       	ldi	r24, 0x42	; 66
     6f6:	63 e5       	ldi	r22, 0x53	; 83
     6f8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x43, 0xFF);		// check all bits
     6fc:	83 e4       	ldi	r24, 0x43	; 67
     6fe:	6f ef       	ldi	r22, 0xFF	; 255
     700:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x44, 0xFF);		// Check all bits
     704:	84 e4       	ldi	r24, 0x44	; 68
     706:	6f ef       	ldi	r22, 0xFF	; 255
     708:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x45, 0xFF);		// check all bits
     70c:	85 e4       	ldi	r24, 0x45	; 69
     70e:	6f ef       	ldi	r22, 0xFF	; 255
     710:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x46, 0xFF);		// Check all bits
     714:	86 e4       	ldi	r24, 0x46	; 70
     716:	6f ef       	ldi	r22, 0xFF	; 255
     718:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	// radioWriteReg(0x56, 0x02);		// <steve> Something to do with I/Q Swapping

	radioWriteReg(0x6D, 0x00);		// Tx power to max
     71c:	8d e6       	ldi	r24, 0x6D	; 109
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x79, 0x00);		// no frequency hopping
     724:	89 e7       	ldi	r24, 0x79	; 121
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x7A, 0x00);		// no frequency hopping
     72c:	8a e7       	ldi	r24, 0x7A	; 122
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x71, 0x12);		// FSK Async Mode, 
     734:	81 e7       	ldi	r24, 0x71	; 113
     736:	62 e1       	ldi	r22, 0x12	; 18
     738:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x72, 8);			// Frequency deviation setting to 5 kHz, total 10 kHz deviation, 5000/625
     73c:	82 e7       	ldi	r24, 0x72	; 114
     73e:	68 e0       	ldi	r22, 0x08	; 8
     740:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x73, 32);		// Frequency offset in 156.25 Hz Increments, Crawls between 4840 and 5040 Hz, 5740 May be a better
     744:	83 e7       	ldi	r24, 0x73	; 115
     746:	60 e2       	ldi	r22, 0x20	; 32
     748:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x74, 0x00);		// Frequency offset
     74c:	84 e7       	ldi	r24, 0x74	; 116
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>

	radioWriteReg(0x75, 0x53);		// frequency set to 434MHz
     754:	85 e7       	ldi	r24, 0x75	; 117
     756:	63 e5       	ldi	r22, 0x53	; 83
     758:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x76, 0x64);		// frequency set to 434MHz
     75c:	86 e7       	ldi	r24, 0x76	; 118
     75e:	64 e6       	ldi	r22, 0x64	; 100
     760:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x77, 0x00);		// frequency set to 434Mhz
     764:	87 e7       	ldi	r24, 0x77	; 119
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	// radioWriteReg(0x59, 0x40);
	// radioWriteReg(0x58, 0x80);		// cpcuu[7:0], whatever this is

	// radioWriteReg(0x6A, 0x0B);
	// radioWriteReg(0x68, 0x04);
	radioWriteReg(0x1F, 0x03);		// Clock Recovery Value
     76c:	8f e1       	ldi	r24, 0x1F	; 31
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	
	
	#if defined(RFM22B)

	#endif
}
     774:	08 95       	ret

00000776 <rfmIntConfig>:
		WDTCSR |= (1<<WDCE)|(1<<WDE);
		WDTCSR = 0;
	}
}

void rfmIntConfig(uint8_t mode, uint8_t noiseFloor){
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	08 2f       	mov	r16, r24
     77c:	16 2f       	mov	r17, r22
	if(mode == ENABLED){
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	89 f4       	brne	.+34     	; 0x7a4 <rfmIntConfig+0x2e>
		radioWriteReg(0x05, (1<<1)); // Enable Valid Packet Received Interrupt
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
		radioWriteReg(0x06, (1<<4)); // Enable RSSI Interrupt
     78a:	86 e0       	ldi	r24, 0x06	; 6
     78c:	60 e1       	ldi	r22, 0x10	; 16
     78e:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
		radioWriteReg(0x27, (noiseFloor+60)); // Configure RSSI for +30dBm Level Threshold
     792:	14 5c       	subi	r17, 0xC4	; 196
     794:	87 e2       	ldi	r24, 0x27	; 39
     796:	61 2f       	mov	r22, r17
     798:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
		EICRA = 0;
     79c:	10 92 69 00 	sts	0x0069, r1
		EIMSK = (1<<INT0); //|(1<<INT0);
     7a0:	0d bb       	out	0x1d, r16	; 29
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <rfmIntConfig+0x40>
	} else{
		radioWriteReg(0x05, 0);
     7a4:	85 e0       	ldi	r24, 0x05	; 5
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
		radioWriteReg(0x06, 0);
     7ac:	86 e0       	ldi	r24, 0x06	; 6
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
		EIMSK = 0;
     7b4:	1d ba       	out	0x1d, r1	; 29
	}
}
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <radioReadReg>:
		transferSPI(regValue);
	CS_RFM = HIGH;
}

uint8_t radioReadReg(uint8_t regAddress){
	CS_RFM = LOW;
     7bc:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     7be:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     7c0:	0d b4       	in	r0, 0x2d	; 45
     7c2:	07 fe       	sbrs	r0, 7
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <radioReadReg+0x4>
	return SPDR;
     7c6:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     7c8:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     7ca:	0d b4       	in	r0, 0x2d	; 45
     7cc:	07 fe       	sbrs	r0, 7
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <radioReadReg+0xe>
	return SPDR;
     7d0:	8e b5       	in	r24, 0x2e	; 46
		transferSPI(regAddress);
		uint8_t value = transferSPI(0x00);
	CS_RFM = HIGH;
     7d2:	2a 9a       	sbi	0x05, 2	; 5
	return value;
}
     7d4:	08 95       	ret

000007d6 <radioReadRSSI>:

uint8_t radioReadRSSI(void){
	if((radioReadReg(OPCONTROL1_REG)&(1<<RFM_rxon)) != (1<<RFM_rxon)){
     7d6:	87 e0       	ldi	r24, 0x07	; 7
     7d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
     7dc:	82 fd       	sbrc	r24, 2
     7de:	0c c0       	rjmp	.+24     	; 0x7f8 <radioReadRSSI+0x22>
		// printf("%X\n",radioReadReg(OPCONTROL1_REG));
		radioWriteReg(OPCONTROL1_REG, (1<<RFM_rxon));
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	64 e0       	ldi	r22, 0x04	; 4
     7e4:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e8:	80 ee       	ldi	r24, 0xE0	; 224
     7ea:	9e e2       	ldi	r25, 0x2E	; 46
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <radioReadRSSI+0x16>
				// break;
			// }
			// _delay_ms(1);
		// }
		
		radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
     7f0:	87 e0       	ldi	r24, 0x07	; 7
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	}
	
	return radioReadReg(0x26);
     7f8:	86 e2       	ldi	r24, 0x26	; 38
     7fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
}
     7fe:	08 95       	ret

00000800 <rfmReadFIFO>:

void rfmReadFIFO(uint8_t *array){
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	8c 01       	movw	r16, r24
     80a:	c0 e0       	ldi	r28, 0x00	; 0
     80c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=0; i<16; i++){
		array[i] = radioReadReg(0x7F);
     80e:	8f e7       	ldi	r24, 0x7F	; 127
     810:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
     814:	f8 01       	movw	r30, r16
     816:	ec 0f       	add	r30, r28
     818:	fd 1f       	adc	r31, r29
     81a:	80 83       	st	Z, r24
     81c:	21 96       	adiw	r28, 0x01	; 1
	
	return radioReadReg(0x26);
}

void rfmReadFIFO(uint8_t *array){
	for(uint8_t i=0; i<16; i++){
     81e:	c0 31       	cpi	r28, 0x10	; 16
     820:	d1 05       	cpc	r29, r1
     822:	a9 f7       	brne	.-22     	; 0x80e <rfmReadFIFO+0xe>
		array[i] = radioReadReg(0x7F);
	}
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <rfmReadIntrpts>:

uint16_t rfmReadIntrpts(void){
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
	uint16_t rfmIntList = radioReadReg(0x03);
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
     838:	08 2f       	mov	r16, r24
     83a:	10 e0       	ldi	r17, 0x00	; 0
	rfmIntList |= radioReadReg(0x04)<<8;
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
     842:	38 2f       	mov	r19, r24
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	20 2b       	or	r18, r16
     848:	31 2b       	or	r19, r17
	return rfmIntList;
}
     84a:	c9 01       	movw	r24, r18
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <transmitELT_Beacon>:
	_delay_ms(1);
	transmitELT_Beacon();
	radioWriteReg(OPCONTROL1_REG, 0x00);
}

void transmitELT_Beacon(void){
     852:	2f 92       	push	r2
     854:	3f 92       	push	r3
     856:	4f 92       	push	r4
     858:	5f 92       	push	r5
     85a:	6f 92       	push	r6
     85c:	7f 92       	push	r7
     85e:	8f 92       	push	r8
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	if((radioReadReg(0x07)&(1<<RFM_xton)) != (1<<RFM_xton) ){
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
     87c:	80 fd       	sbrc	r24, 0
     87e:	04 c0       	rjmp	.+8      	; 0x888 <transmitELT_Beacon+0x36>
		radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
     880:	87 e0       	ldi	r24, 0x07	; 7
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
		//printf("Fail on Preset: Beacon\n");
		//_delay_ms(2);
	}
	
	radioWriteReg(0x71, 0x12);		// FSK Async Mode, 
     888:	81 e7       	ldi	r24, 0x71	; 113
     88a:	62 e1       	ldi	r22, 0x12	; 18
     88c:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x72, 7);		// Frequency deviation is 625 Hz * value (Centered, so actual peak-peak deviation is 2x)
     890:	82 e7       	ldi	r24, 0x72	; 114
     892:	67 e0       	ldi	r22, 0x07	; 7
     894:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
     898:	87 e0       	ldi	r24, 0x07	; 7
     89a:	68 e0       	ldi	r22, 0x08	; 8
     89c:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
     8a0:	c5 eb       	ldi	r28, 0xB5	; 181
     8a2:	d2 e0       	ldi	r29, 0x02	; 2
     8a4:	50 e9       	ldi	r21, 0x90	; 144
     8a6:	25 2e       	mov	r2, r21
     8a8:	51 e0       	ldi	r21, 0x01	; 1
     8aa:	35 2e       	mov	r3, r21
		CS_RFM = HIGH;
		for(uint16_t d=0; d<beaconNotes[n][1]; d++){
			FORCE_MOSI = d&0x01;
			_delay_us(beaconNotes[n][0]); // Getting 416 Hz A4 w/o correction, means its adding 66 uS 
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     8ac:	41 e5       	ldi	r20, 0x51	; 81
     8ae:	64 2e       	mov	r6, r20
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
	//_delay_ms(1);
	
	for(uint8_t n=0; n<BEACON_NOTES; n++){
		radioWriteReg(0x6D, beaconNotes[n][2]);
     8b0:	8d e6       	ldi	r24, 0x6D	; 109
     8b2:	6c 81       	ldd	r22, Y+4	; 0x04
     8b4:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
     8b8:	80 ea       	ldi	r24, 0xA0	; 160
     8ba:	9f e0       	ldi	r25, 0x0F	; 15
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <transmitELT_Beacon+0x6a>
		_delay_ms(1);
		SPCR = 0;
     8c0:	1c bc       	out	0x2c, r1	; 44
		CS_RFM = HIGH;
     8c2:	2a 9a       	sbi	0x05, 2	; 5
		for(uint16_t d=0; d<beaconNotes[n][1]; d++){
     8c4:	4a 80       	ldd	r4, Y+2	; 0x02
     8c6:	5b 80       	ldd	r5, Y+3	; 0x03
     8c8:	88 24       	eor	r8, r8
     8ca:	99 24       	eor	r9, r9
     8cc:	77 24       	eor	r7, r7
     8ce:	7d c0       	rjmp	.+250    	; 0x9ca <__stack+0xcb>
			FORCE_MOSI = d&0x01;
     8d0:	97 2d       	mov	r25, r7
     8d2:	91 70       	andi	r25, 0x01	; 1
     8d4:	99 0f       	add	r25, r25
     8d6:	99 0f       	add	r25, r25
     8d8:	99 0f       	add	r25, r25
     8da:	85 b1       	in	r24, 0x05	; 5
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	89 2b       	or	r24, r25
     8e0:	85 b9       	out	0x05, r24	; 5
			_delay_us(beaconNotes[n][0]); // Getting 416 Hz A4 w/o correction, means its adding 66 uS 
     8e2:	68 81       	ld	r22, Y
     8e4:	79 81       	ldd	r23, Y+1	; 0x01
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     8ee:	5b 01       	movw	r10, r22
     8f0:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     8f2:	2b ea       	ldi	r18, 0xAB	; 171
     8f4:	3a ea       	ldi	r19, 0xAA	; 170
     8f6:	4a ea       	ldi	r20, 0xAA	; 170
     8f8:	50 e4       	ldi	r21, 0x40	; 64
     8fa:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e8       	ldi	r20, 0x80	; 128
     908:	5f e3       	ldi	r21, 0x3F	; 63
     90a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     90e:	88 23       	and	r24, r24
     910:	14 f4       	brge	.+4      	; 0x916 <__stack+0x17>
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	52 c0       	rjmp	.+164    	; 0x9ba <__stack+0xbb>
		__ticks = 1;
	else if (__tmp > 255)
     916:	c8 01       	movw	r24, r16
     918:	b7 01       	movw	r22, r14
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	4f e7       	ldi	r20, 0x7F	; 127
     920:	53 e4       	ldi	r21, 0x43	; 67
     922:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     926:	18 16       	cp	r1, r24
     928:	0c f0       	brlt	.+2      	; 0x92c <__stack+0x2d>
     92a:	43 c0       	rjmp	.+134    	; 0x9b2 <__stack+0xb3>
	{
		_delay_ms(__us / 1000.0);
     92c:	c6 01       	movw	r24, r12
     92e:	b5 01       	movw	r22, r10
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	4a e7       	ldi	r20, 0x7A	; 122
     936:	54 e4       	ldi	r21, 0x44	; 68
     938:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__divsf3>
     93c:	5b 01       	movw	r10, r22
     93e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	4a e7       	ldi	r20, 0x7A	; 122
     946:	55 e4       	ldi	r21, 0x45	; 69
     948:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     94c:	7b 01       	movw	r14, r22
     94e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     95c:	88 23       	and	r24, r24
     95e:	1c f4       	brge	.+6      	; 0x966 <__stack+0x67>
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	22 c0       	rjmp	.+68     	; 0x9aa <__stack+0xab>
		__ticks = 1;
	else if (__tmp > 65535)
     966:	c8 01       	movw	r24, r16
     968:	b7 01       	movw	r22, r14
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	3f ef       	ldi	r19, 0xFF	; 255
     96e:	4f e7       	ldi	r20, 0x7F	; 127
     970:	57 e4       	ldi	r21, 0x47	; 71
     972:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     976:	18 16       	cp	r1, r24
     978:	a4 f4       	brge	.+40     	; 0x9a2 <__stack+0xa3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     97a:	c6 01       	movw	r24, r12
     97c:	b5 01       	movw	r22, r10
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e2       	ldi	r20, 0x20	; 32
     984:	51 e4       	ldi	r21, 0x41	; 65
     986:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     98a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     98e:	05 c0       	rjmp	.+10     	; 0x99a <__stack+0x9b>
     990:	c1 01       	movw	r24, r2
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <__stack+0x93>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     996:	61 50       	subi	r22, 0x01	; 1
     998:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	61 15       	cp	r22, r1
     99c:	71 05       	cpc	r23, r1
     99e:	c1 f7       	brne	.-16     	; 0x990 <__stack+0x91>
     9a0:	0e c0       	rjmp	.+28     	; 0x9be <__stack+0xbf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a2:	c8 01       	movw	r24, r16
     9a4:	b7 01       	movw	r22, r14
     9a6:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     9aa:	cb 01       	movw	r24, r22
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <__stack+0xad>
     9b0:	06 c0       	rjmp	.+12     	; 0x9be <__stack+0xbf>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9b2:	c8 01       	movw	r24, r16
     9b4:	b7 01       	movw	r22, r14
     9b6:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9ba:	6a 95       	dec	r22
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <__stack+0xbb>
	for(uint8_t n=0; n<BEACON_NOTES; n++){
		radioWriteReg(0x6D, beaconNotes[n][2]);
		_delay_ms(1);
		SPCR = 0;
		CS_RFM = HIGH;
		for(uint16_t d=0; d<beaconNotes[n][1]; d++){
     9be:	08 94       	sec
     9c0:	81 1c       	adc	r8, r1
     9c2:	91 1c       	adc	r9, r1
     9c4:	73 94       	inc	r7
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	78 22       	and	r7, r24
     9ca:	84 14       	cp	r8, r4
     9cc:	95 04       	cpc	r9, r5
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	7f cf       	rjmp	.-258    	; 0x8d0 <transmitELT_Beacon+0x7e>
			FORCE_MOSI = d&0x01;
			_delay_us(beaconNotes[n][0]); // Getting 416 Hz A4 w/o correction, means its adding 66 uS 
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     9d2:	6c bc       	out	0x2c, r6	; 44
     9d4:	26 96       	adiw	r28, 0x06	; 6
	radioWriteReg(0x72, 7);		// Frequency deviation is 625 Hz * value (Centered, so actual peak-peak deviation is 2x)
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
	//_delay_ms(1);
	
	for(uint8_t n=0; n<BEACON_NOTES; n++){
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	c9 3d       	cpi	r28, 0xD9	; 217
     9da:	d8 07       	cpc	r29, r24
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <__stack+0xe1>
     9de:	68 cf       	rjmp	.-304    	; 0x8b0 <transmitELT_Beacon+0x5e>
			FORCE_MOSI = d&0x01;
			_delay_us(beaconNotes[n][0]); // Getting 416 Hz A4 w/o correction, means its adding 66 uS 
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	}
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	df 90       	pop	r13
     9ee:	cf 90       	pop	r12
     9f0:	bf 90       	pop	r11
     9f2:	af 90       	pop	r10
     9f4:	9f 90       	pop	r9
     9f6:	8f 90       	pop	r8
     9f8:	7f 90       	pop	r7
     9fa:	6f 90       	pop	r6
     9fc:	5f 90       	pop	r5
     9fe:	4f 90       	pop	r4
     a00:	3f 90       	pop	r3
     a02:	2f 90       	pop	r2
     a04:	08 95       	ret

00000a06 <putUARTchar>:
		"1 to 3\tToggle Config Flags\n"
		"`\tWrite Toggles to EEPROM and Review\n"
		"?\tConsole Useage\n\n");
}

static int putUARTchar(char c, FILE *stream){
     a06:	1f 93       	push	r17
     a08:	18 2f       	mov	r17, r24
    if (c == '\n') putUARTchar('\r', stream);
     a0a:	8a 30       	cpi	r24, 0x0A	; 10
     a0c:	19 f4       	brne	.+6      	; 0xa14 <putUARTchar+0xe>
     a0e:	8d e0       	ldi	r24, 0x0D	; 13
     a10:	0e 94 03 05 	call	0xa06	; 0xa06 <putUARTchar>
    loop_until_bit_is_set(UCSR0A, UDRE0);
     a14:	80 91 c0 00 	lds	r24, 0x00C0
     a18:	85 ff       	sbrs	r24, 5
     a1a:	fc cf       	rjmp	.-8      	; 0xa14 <putUARTchar+0xe>
    UDR0 = c;
     a1c:	10 93 c6 00 	sts	0x00C6, r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a20:	80 ed       	ldi	r24, 0xD0	; 208
     a22:	97 e0       	ldi	r25, 0x07	; 7
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <putUARTchar+0x1e>
	_delay_us(500);
	//transferSPI(c);
    return 0;
}
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	1f 91       	pop	r17
     a2e:	08 95       	ret

00000a30 <getUARTchar>:

uint8_t getUARTchar(void){
    while( !(UCSR0A & (1<<RXC0)));
     a30:	80 91 c0 00 	lds	r24, 0x00C0
     a34:	87 ff       	sbrs	r24, 7
     a36:	fc cf       	rjmp	.-8      	; 0xa30 <getUARTchar>
    return(UDR0);
     a38:	80 91 c6 00 	lds	r24, 0x00C6
}
     a3c:	08 95       	ret

00000a3e <readADC>:

uint16_t readADC(uint8_t adcChannel){
	ADMUX 	= adcChannel; //(1<<REFS0) |
     a3e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	|= (1<<ADSC);
     a42:	80 91 7a 00 	lds	r24, 0x007A
     a46:	80 64       	ori	r24, 0x40	; 64
     a48:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC));
     a4c:	80 91 7a 00 	lds	r24, 0x007A
     a50:	86 fd       	sbrc	r24, 6
     a52:	fc cf       	rjmp	.-8      	; 0xa4c <readADC+0xe>
	return (ADCL + ((uint16_t) ADCH << 8));
     a54:	90 91 78 00 	lds	r25, 0x0078
     a58:	80 91 79 00 	lds	r24, 0x0079
     a5c:	38 2f       	mov	r19, r24
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	29 0f       	add	r18, r25
     a62:	31 1d       	adc	r19, r1
}
     a64:	c9 01       	movw	r24, r18
     a66:	08 95       	ret

00000a68 <readAdcNoiseReduced>:

uint16_t readAdcNoiseReduced(uint8_t adcChannel){
	ADMUX 	= adcChannel; //(1<<REFS0) |
     a68:	80 93 7c 00 	sts	0x007C, r24
	
	set_sleep_mode(SLEEP_MODE_ADC);
     a6c:	83 b7       	in	r24, 0x33	; 51
     a6e:	81 7f       	andi	r24, 0xF1	; 241
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     a74:	83 b7       	in	r24, 0x33	; 51
     a76:	81 60       	ori	r24, 0x01	; 1
     a78:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     a7a:	85 b7       	in	r24, 0x35	; 53
     a7c:	80 66       	ori	r24, 0x60	; 96
     a7e:	85 bf       	out	0x35, r24	; 53
     a80:	8f 7d       	andi	r24, 0xDF	; 223
     a82:	85 bf       	out	0x35, r24	; 53
	sei();
     a84:	78 94       	sei
	sleep_cpu();
     a86:	88 95       	sleep
	
	sleep_disable();
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	8e 7f       	andi	r24, 0xFE	; 254
     a8c:	83 bf       	out	0x33, r24	; 51
	return (ADCL + ((uint16_t) ADCH << 8));
     a8e:	90 91 78 00 	lds	r25, 0x0078
     a92:	80 91 79 00 	lds	r24, 0x0079
     a96:	38 2f       	mov	r19, r24
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	29 0f       	add	r18, r25
     a9c:	31 1d       	adc	r19, r1
}
     a9e:	c9 01       	movw	r24, r18
     aa0:	08 95       	ret

00000aa2 <updateVolts>:
		}
		_delay_ms(1);
	}
}

void updateVolts(uint8_t fastMode){
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	e8 2e       	mov	r14, r24
     ab8:	aa 24       	eor	r10, r10
     aba:	bb 24       	eor	r11, r11
     abc:	cc 24       	eor	r12, r12
     abe:	dd 24       	eor	r13, r13
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
     ac4:	00 e0       	ldi	r16, 0x00	; 0
	uint16_t sysVin = 0;
	uint16_t atMegaVolt = 0;
	
	
	for(uint8_t j=0; j<4; j++){
		lipoly += readADC(ADC_VBAT);
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <readADC>
     acc:	a8 0e       	add	r10, r24
     ace:	b9 1e       	adc	r11, r25
		sysVin += readADC(ADC_VIN);
     ad0:	87 e0       	ldi	r24, 0x07	; 7
     ad2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <readADC>
     ad6:	c8 0e       	add	r12, r24
     ad8:	d9 1e       	adc	r13, r25
     ada:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0; i<4; i++) readADC(ADC_VSYS); // Pre-heat the VSYS ADC Input
     adc:	8e e0       	ldi	r24, 0x0E	; 14
     ade:	0e 94 1f 05 	call	0xa3e	; 0xa3e <readADC>
     ae2:	1f 5f       	subi	r17, 0xFF	; 255
     ae4:	14 30       	cpi	r17, 0x04	; 4
     ae6:	d1 f7       	brne	.-12     	; 0xadc <updateVolts+0x3a>
		atMegaVolt += (fastMode)? readADC(ADC_VSYS) : readAdcNoiseReduced(ADC_VSYS); // [4092:0]
     ae8:	ee 20       	and	r14, r14
     aea:	21 f0       	breq	.+8      	; 0xaf4 <updateVolts+0x52>
     aec:	8e e0       	ldi	r24, 0x0E	; 14
     aee:	0e 94 1f 05 	call	0xa3e	; 0xa3e <readADC>
     af2:	03 c0       	rjmp	.+6      	; 0xafa <updateVolts+0x58>
     af4:	8e e0       	ldi	r24, 0x0E	; 14
     af6:	0e 94 34 05 	call	0xa68	; 0xa68 <readAdcNoiseReduced>
     afa:	c8 0f       	add	r28, r24
     afc:	d9 1f       	adc	r29, r25
	uint16_t lipoly = 0; // An array or struct would be more condusive?
	uint16_t sysVin = 0;
	uint16_t atMegaVolt = 0;
	
	
	for(uint8_t j=0; j<4; j++){
     afe:	0f 5f       	subi	r16, 0xFF	; 255
     b00:	04 30       	cpi	r16, 0x04	; 4
     b02:	09 f7       	brne	.-62     	; 0xac6 <updateVolts+0x24>
		for(uint8_t i=0; i<4; i++) readADC(ADC_VSYS); // Pre-heat the VSYS ADC Input
		atMegaVolt += (fastMode)? readADC(ADC_VSYS) : readAdcNoiseReduced(ADC_VSYS); // [4092:0]
	}
	lipoly >>= 2; // [1023:0]
	sysVin >>= 2;
	atMegaVolt >>= 2;
     b04:	9e 01       	movw	r18, r28
     b06:	36 95       	lsr	r19
     b08:	27 95       	ror	r18
     b0a:	36 95       	lsr	r19
     b0c:	27 95       	ror	r18
	// Repeated for sysVin
	// Is this next version more lossy? :
	// BATTv = battADC[1023:0] * ATMEGAv[4999:0] * 2 /1023 (appprox as >> 9) , Max is 5.1 Mil, divide is an easy right shift to within .1% actual
	// Both version require 32-bit ints, so might as well do the one with only one divide and 3 multiplies. First was 3 mult + 3 div
	
	atMegaVolt = (atMegaVolt < 225)? 4999 : (uint16_t)( (1125300)/((uint32_t) atMegaVolt) );
     b0e:	21 3e       	cpi	r18, 0xE1	; 225
     b10:	31 05       	cpc	r19, r1
     b12:	18 f4       	brcc	.+6      	; 0xb1a <updateVolts+0x78>
     b14:	c7 e8       	ldi	r28, 0x87	; 135
     b16:	d3 e1       	ldi	r29, 0x13	; 19
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <updateVolts+0x8a>
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	64 eb       	ldi	r22, 0xB4	; 180
     b20:	7b e2       	ldi	r23, 0x2B	; 43
     b22:	81 e1       	ldi	r24, 0x11	; 17
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__udivmodsi4>
     b2a:	e9 01       	movw	r28, r18
	sysVin = (uint16_t)( (uint32_t)( (uint32_t)sysVin * (uint32_t)atMegaVolt ) >> 9 );
     b2c:	7e 01       	movw	r14, r28
     b2e:	00 e0       	ldi	r16, 0x00	; 0
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	d6 94       	lsr	r13
     b34:	c7 94       	ror	r12
     b36:	d6 94       	lsr	r13
     b38:	c7 94       	ror	r12
     b3a:	96 01       	movw	r18, r12
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	c8 01       	movw	r24, r16
     b42:	b7 01       	movw	r22, r14
     b44:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsi3>
     b48:	a9 e0       	ldi	r26, 0x09	; 9
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	77 95       	ror	r23
     b50:	67 95       	ror	r22
     b52:	aa 95       	dec	r26
     b54:	d1 f7       	brne	.-12     	; 0xb4a <updateVolts+0xa8>
     b56:	6b 01       	movw	r12, r22
	lipoly = (uint16_t)( (uint32_t)( (uint32_t)lipoly * (uint32_t)atMegaVolt ) >> 9 );
     b58:	b6 94       	lsr	r11
     b5a:	a7 94       	ror	r10
     b5c:	b6 94       	lsr	r11
     b5e:	a7 94       	ror	r10
     b60:	95 01       	movw	r18, r10
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	c8 01       	movw	r24, r16
     b68:	b7 01       	movw	r22, r14
     b6a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__mulsi3>
     b6e:	e9 e0       	ldi	r30, 0x09	; 9
     b70:	96 95       	lsr	r25
     b72:	87 95       	ror	r24
     b74:	77 95       	ror	r23
     b76:	67 95       	ror	r22
     b78:	ea 95       	dec	r30
     b7a:	d1 f7       	brne	.-12     	; 0xb70 <updateVolts+0xce>
	
	sys.powerState = (sysVin > VIN_CUTOFF)? 1 : 0;
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	89 ed       	ldi	r24, 0xD9	; 217
     b80:	c8 16       	cp	r12, r24
     b82:	8e e0       	ldi	r24, 0x0E	; 14
     b84:	d8 06       	cpc	r13, r24
     b86:	08 f0       	brcs	.+2      	; 0xb8a <updateVolts+0xe8>
     b88:	21 e0       	ldi	r18, 0x01	; 1
     b8a:	22 0f       	add	r18, r18
     b8c:	22 0f       	add	r18, r18
     b8e:	80 91 91 03 	lds	r24, 0x0391
     b92:	8b 7f       	andi	r24, 0xFB	; 251
     b94:	82 2b       	or	r24, r18
     b96:	80 93 91 03 	sts	0x0391, r24
	sys.batteryState = (lipoly > LIPOLY_CUTOFF)? 1 : 0;
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	8d e0       	ldi	r24, 0x0D	; 13
     b9e:	69 34       	cpi	r22, 0x49	; 73
     ba0:	78 07       	cpc	r23, r24
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <updateVolts+0x104>
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	22 0f       	add	r18, r18
     ba8:	22 0f       	add	r18, r18
     baa:	22 0f       	add	r18, r18
     bac:	80 91 91 03 	lds	r24, 0x0391
     bb0:	87 7f       	andi	r24, 0xF7	; 247
     bb2:	82 2b       	or	r24, r18
     bb4:	80 93 91 03 	sts	0x0391, r24
	
	// printf("Lipoly: %u\tVoltIn: %u\tATmega: %u\n",lipoly,sysVin,atMegaVolt);
	
	volt.lipoly = lipoly;
     bb8:	70 93 93 03 	sts	0x0393, r23
     bbc:	60 93 92 03 	sts	0x0392, r22
	volt.sysVin = sysVin;
     bc0:	d0 92 95 03 	sts	0x0395, r13
     bc4:	c0 92 94 03 	sts	0x0394, r12
	volt.atMega = atMegaVolt;
     bc8:	d0 93 97 03 	sts	0x0397, r29
     bcc:	c0 93 96 03 	sts	0x0396, r28
	
	//return ((uint16_t) voltSample);
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	08 95       	ret

00000be6 <flashOrangeLED>:
	
	sleep_disable();
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01
	for(;count>0; count--){
		LED_OR = HIGH;
		_delay_ms(high);
     c12:	26 2e       	mov	r2, r22
     c14:	33 24       	eor	r3, r3
     c16:	44 24       	eor	r4, r4
     c18:	55 24       	eor	r5, r5
		LED_OR = LOW;
		_delay_ms(low);
     c1a:	64 2e       	mov	r6, r20
     c1c:	77 24       	eor	r7, r7
     c1e:	88 24       	eor	r8, r8
     c20:	99 24       	eor	r9, r9
     c22:	83 c0       	rjmp	.+262    	; 0xd2a <flashOrangeLED+0x144>
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
		LED_OR = HIGH;
     c24:	28 9a       	sbi	0x05, 0	; 5
		_delay_ms(high);
     c26:	c2 01       	movw	r24, r4
     c28:	b1 01       	movw	r22, r2
     c2a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     c2e:	5b 01       	movw	r10, r22
     c30:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	4a e7       	ldi	r20, 0x7A	; 122
     c38:	55 e4       	ldi	r21, 0x45	; 69
     c3a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     c3e:	7b 01       	movw	r14, r22
     c40:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e8       	ldi	r20, 0x80	; 128
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     c4e:	88 23       	and	r24, r24
     c50:	1c f4       	brge	.+6      	; 0xc58 <flashOrangeLED+0x72>
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	23 c0       	rjmp	.+70     	; 0xc9e <flashOrangeLED+0xb8>
		__ticks = 1;
	else if (__tmp > 65535)
     c58:	c8 01       	movw	r24, r16
     c5a:	b7 01       	movw	r22, r14
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	4f e7       	ldi	r20, 0x7F	; 127
     c62:	57 e4       	ldi	r21, 0x47	; 71
     c64:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     c68:	18 16       	cp	r1, r24
     c6a:	ac f4       	brge	.+42     	; 0xc96 <flashOrangeLED+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c6c:	c6 01       	movw	r24, r12
     c6e:	b5 01       	movw	r22, r10
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e2       	ldi	r20, 0x20	; 32
     c76:	51 e4       	ldi	r21, 0x41	; 65
     c78:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     c7c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <flashOrangeLED+0xa8>
     c82:	80 e9       	ldi	r24, 0x90	; 144
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <flashOrangeLED+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8a:	61 50       	subi	r22, 0x01	; 1
     c8c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8e:	61 15       	cp	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	b9 f7       	brne	.-18     	; 0xc82 <flashOrangeLED+0x9c>
     c94:	07 c0       	rjmp	.+14     	; 0xca4 <flashOrangeLED+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c96:	c8 01       	movw	r24, r16
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     c9e:	cb 01       	movw	r24, r22
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <flashOrangeLED+0xba>
		LED_OR = LOW;
     ca4:	28 98       	cbi	0x05, 0	; 5
		_delay_ms(low);
     ca6:	c4 01       	movw	r24, r8
     ca8:	b3 01       	movw	r22, r6
     caa:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     cae:	5b 01       	movw	r10, r22
     cb0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	55 e4       	ldi	r21, 0x45	; 69
     cba:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     cbe:	7b 01       	movw	r14, r22
     cc0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e8       	ldi	r20, 0x80	; 128
     cc8:	5f e3       	ldi	r21, 0x3F	; 63
     cca:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     cce:	88 23       	and	r24, r24
     cd0:	1c f4       	brge	.+6      	; 0xcd8 <flashOrangeLED+0xf2>
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	23 c0       	rjmp	.+70     	; 0xd1e <flashOrangeLED+0x138>
		__ticks = 1;
	else if (__tmp > 65535)
     cd8:	c8 01       	movw	r24, r16
     cda:	b7 01       	movw	r22, r14
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	3f ef       	ldi	r19, 0xFF	; 255
     ce0:	4f e7       	ldi	r20, 0x7F	; 127
     ce2:	57 e4       	ldi	r21, 0x47	; 71
     ce4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     ce8:	18 16       	cp	r1, r24
     cea:	ac f4       	brge	.+42     	; 0xd16 <flashOrangeLED+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cec:	c6 01       	movw	r24, r12
     cee:	b5 01       	movw	r22, r10
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e2       	ldi	r20, 0x20	; 32
     cf6:	51 e4       	ldi	r21, 0x41	; 65
     cf8:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     cfc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <flashOrangeLED+0x128>
     d02:	80 e9       	ldi	r24, 0x90	; 144
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <flashOrangeLED+0x120>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0a:	61 50       	subi	r22, 0x01	; 1
     d0c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0e:	61 15       	cp	r22, r1
     d10:	71 05       	cpc	r23, r1
     d12:	b9 f7       	brne	.-18     	; 0xd02 <flashOrangeLED+0x11c>
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <flashOrangeLED+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d16:	c8 01       	movw	r24, r16
     d18:	b7 01       	movw	r22, r14
     d1a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     d1e:	cb 01       	movw	r24, r22
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <flashOrangeLED+0x13a>
	sleep_disable();
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	81 50       	subi	r24, 0x01	; 1
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	e9 81       	ldd	r30, Y+1	; 0x01
     d2c:	ee 23       	and	r30, r30
     d2e:	09 f0       	breq	.+2      	; 0xd32 <flashOrangeLED+0x14c>
     d30:	79 cf       	rjmp	.-270    	; 0xc24 <flashOrangeLED+0x3e>
		LED_OR = HIGH;
		_delay_ms(high);
		LED_OR = LOW;
		_delay_ms(low);
	}
}
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	5f 90       	pop	r5
     d52:	4f 90       	pop	r4
     d54:	3f 90       	pop	r3
     d56:	2f 90       	pop	r2
     d58:	08 95       	ret

00000d5a <flashBlueLED>:

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
     d5a:	2f 92       	push	r2
     d5c:	3f 92       	push	r3
     d5e:	4f 92       	push	r4
     d60:	5f 92       	push	r5
     d62:	6f 92       	push	r6
     d64:	7f 92       	push	r7
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	0f 92       	push	r0
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	89 83       	std	Y+1, r24	; 0x01
	for(;count>0; count--){
		LED_BL = HIGH;
		_delay_ms(high);
     d86:	26 2e       	mov	r2, r22
     d88:	33 24       	eor	r3, r3
     d8a:	44 24       	eor	r4, r4
     d8c:	55 24       	eor	r5, r5
		LED_BL = LOW;
		_delay_ms(low);
     d8e:	64 2e       	mov	r6, r20
     d90:	77 24       	eor	r7, r7
     d92:	88 24       	eor	r8, r8
     d94:	99 24       	eor	r9, r9
     d96:	83 c0       	rjmp	.+262    	; 0xe9e <flashBlueLED+0x144>
	}
}

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
		LED_BL = HIGH;
     d98:	29 9a       	sbi	0x05, 1	; 5
		_delay_ms(high);
     d9a:	c2 01       	movw	r24, r4
     d9c:	b1 01       	movw	r22, r2
     d9e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     da2:	5b 01       	movw	r10, r22
     da4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	4a e7       	ldi	r20, 0x7A	; 122
     dac:	55 e4       	ldi	r21, 0x45	; 69
     dae:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     db2:	7b 01       	movw	r14, r22
     db4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e8       	ldi	r20, 0x80	; 128
     dbc:	5f e3       	ldi	r21, 0x3F	; 63
     dbe:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	1c f4       	brge	.+6      	; 0xdcc <flashBlueLED+0x72>
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	23 c0       	rjmp	.+70     	; 0xe12 <flashBlueLED+0xb8>
		__ticks = 1;
	else if (__tmp > 65535)
     dcc:	c8 01       	movw	r24, r16
     dce:	b7 01       	movw	r22, r14
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	3f ef       	ldi	r19, 0xFF	; 255
     dd4:	4f e7       	ldi	r20, 0x7F	; 127
     dd6:	57 e4       	ldi	r21, 0x47	; 71
     dd8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     ddc:	18 16       	cp	r1, r24
     dde:	ac f4       	brge	.+42     	; 0xe0a <flashBlueLED+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de0:	c6 01       	movw	r24, r12
     de2:	b5 01       	movw	r22, r10
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e2       	ldi	r20, 0x20	; 32
     dea:	51 e4       	ldi	r21, 0x41	; 65
     dec:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     df0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <flashBlueLED+0xa8>
     df6:	80 e9       	ldi	r24, 0x90	; 144
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <flashBlueLED+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	61 50       	subi	r22, 0x01	; 1
     e00:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	61 15       	cp	r22, r1
     e04:	71 05       	cpc	r23, r1
     e06:	b9 f7       	brne	.-18     	; 0xdf6 <flashBlueLED+0x9c>
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <flashBlueLED+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	c8 01       	movw	r24, r16
     e0c:	b7 01       	movw	r22, r14
     e0e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     e12:	cb 01       	movw	r24, r22
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <flashBlueLED+0xba>
		LED_BL = LOW;
     e18:	29 98       	cbi	0x05, 1	; 5
		_delay_ms(low);
     e1a:	c4 01       	movw	r24, r8
     e1c:	b3 01       	movw	r22, r6
     e1e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__floatunsisf>
     e22:	5b 01       	movw	r10, r22
     e24:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	4a e7       	ldi	r20, 0x7A	; 122
     e2c:	55 e4       	ldi	r21, 0x45	; 69
     e2e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     e32:	7b 01       	movw	r14, r22
     e34:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	5f e3       	ldi	r21, 0x3F	; 63
     e3e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__cmpsf2>
     e42:	88 23       	and	r24, r24
     e44:	1c f4       	brge	.+6      	; 0xe4c <flashBlueLED+0xf2>
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	23 c0       	rjmp	.+70     	; 0xe92 <flashBlueLED+0x138>
		__ticks = 1;
	else if (__tmp > 65535)
     e4c:	c8 01       	movw	r24, r16
     e4e:	b7 01       	movw	r22, r14
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	57 e4       	ldi	r21, 0x47	; 71
     e58:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__gesf2>
     e5c:	18 16       	cp	r1, r24
     e5e:	ac f4       	brge	.+42     	; 0xe8a <flashBlueLED+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e60:	c6 01       	movw	r24, r12
     e62:	b5 01       	movw	r22, r10
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__mulsf3>
     e70:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <flashBlueLED+0x128>
     e76:	80 e9       	ldi	r24, 0x90	; 144
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <flashBlueLED+0x120>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	61 50       	subi	r22, 0x01	; 1
     e80:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	61 15       	cp	r22, r1
     e84:	71 05       	cpc	r23, r1
     e86:	b9 f7       	brne	.-18     	; 0xe76 <flashBlueLED+0x11c>
     e88:	07 c0       	rjmp	.+14     	; 0xe98 <flashBlueLED+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8a:	c8 01       	movw	r24, r16
     e8c:	b7 01       	movw	r22, r14
     e8e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     e92:	cb 01       	movw	r24, r22
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <flashBlueLED+0x13a>
		_delay_ms(low);
	}
}

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	81 50       	subi	r24, 0x01	; 1
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	ee 23       	and	r30, r30
     ea2:	09 f0       	breq	.+2      	; 0xea6 <flashBlueLED+0x14c>
     ea4:	79 cf       	rjmp	.-270    	; 0xd98 <flashBlueLED+0x3e>
		LED_BL = HIGH;
		_delay_ms(high);
		LED_BL = LOW;
		_delay_ms(low);
	}
}
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	7f 90       	pop	r7
     ec2:	6f 90       	pop	r6
     ec4:	5f 90       	pop	r5
     ec6:	4f 90       	pop	r4
     ec8:	3f 90       	pop	r3
     eca:	2f 90       	pop	r2
     ecc:	08 95       	ret

00000ece <printHelpInfo>:
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <puts>
		"B\tBattery mV\n"
		"M\tMonitor\n"
		"1 to 3\tToggle Config Flags\n"
		"`\tWrite Toggles to EEPROM and Review\n"
		"?\tConsole Useage\n\n");
}
     ed6:	08 95       	ret

00000ed8 <deviceIdCheck>:
	volt.atMega = atMegaVolt;
	
	//return ((uint16_t) voltSample);
}

char deviceIdCheck(void){
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
	// printRegisters();
	CS_RFM = LOW;
     edc:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     ede:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     ee0:	0d b4       	in	r0, 0x2d	; 45
     ee2:	07 fe       	sbrs	r0, 7
     ee4:	fd cf       	rjmp	.-6      	; 0xee0 <deviceIdCheck+0x8>
	return SPDR;
     ee6:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     ee8:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     eea:	0d b4       	in	r0, 0x2d	; 45
     eec:	07 fe       	sbrs	r0, 7
     eee:	fd cf       	rjmp	.-6      	; 0xeea <deviceIdCheck+0x12>
	return SPDR;
     ef0:	0e b5       	in	r16, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     ef2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     ef4:	0d b4       	in	r0, 0x2d	; 45
     ef6:	07 fe       	sbrs	r0, 7
     ef8:	fd cf       	rjmp	.-6      	; 0xef4 <deviceIdCheck+0x1c>
	return SPDR;
     efa:	1e b5       	in	r17, 0x2e	; 46
		transferSPI(0x00);
		uint8_t rfmDevType = transferSPI(0x00);
		uint8_t rfmVerCode = transferSPI(0x00);
	CS_RFM = HIGH;
     efc:	2a 9a       	sbi	0x05, 2	; 5
	
	printf("\n%X\t%X\n",rfmDevType,rfmVerCode);
     efe:	00 d0       	rcall	.+0      	; 0xf00 <deviceIdCheck+0x28>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <deviceIdCheck+0x2a>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <deviceIdCheck+0x2c>
     f04:	ed b7       	in	r30, 0x3d	; 61
     f06:	fe b7       	in	r31, 0x3e	; 62
     f08:	31 96       	adiw	r30, 0x01	; 1
     f0a:	8a e7       	ldi	r24, 0x7A	; 122
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	ad b7       	in	r26, 0x3d	; 61
     f10:	be b7       	in	r27, 0x3e	; 62
     f12:	12 96       	adiw	r26, 0x02	; 2
     f14:	9c 93       	st	X, r25
     f16:	8e 93       	st	-X, r24
     f18:	11 97       	sbiw	r26, 0x01	; 1
     f1a:	02 83       	std	Z+2, r16	; 0x02
     f1c:	13 82       	std	Z+3, r1	; 0x03
     f1e:	14 83       	std	Z+4, r17	; 0x04
     f20:	15 82       	std	Z+5, r1	; 0x05
     f22:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
	
	
	rfmDevType ^= 0b00001000;
	rfmVerCode ^= 0b00000110;
	
	if(rfmDevType==0 && rfmVerCode==0) return (1);
     f26:	8d b7       	in	r24, 0x3d	; 61
     f28:	9e b7       	in	r25, 0x3e	; 62
     f2a:	06 96       	adiw	r24, 0x06	; 6
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	9e bf       	out	0x3e, r25	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	8d bf       	out	0x3d, r24	; 61
     f36:	08 30       	cpi	r16, 0x08	; 8
     f38:	11 f0       	breq	.+4      	; 0xf3e <deviceIdCheck+0x66>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <deviceIdCheck+0x6e>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	16 30       	cpi	r17, 0x06	; 6
     f42:	09 f4       	brne	.+2      	; 0xf46 <deviceIdCheck+0x6e>
     f44:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <transmitELT_Packet>:
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	}
}

void transmitELT_Packet(void){ //uint8_t *targetArray, uint8_t count){
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
	
	
	radioWriteReg(0x08,0x01);		// FIFO Clear Sequence
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	//_delay_ms(1);					
	radioWriteReg(0x08,0x00);		
     f5a:	88 e0       	ldi	r24, 0x08	; 8
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x71, 0x23);		// GFSK, FIFO Used
     f62:	81 e7       	ldi	r24, 0x71	; 113
     f64:	63 e2       	ldi	r22, 0x23	; 35
     f66:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x72, 20);		// ~20kHz Peak-Peak Deviation
     f6a:	82 e7       	ldi	r24, 0x72	; 114
     f6c:	64 e1       	ldi	r22, 0x14	; 20
     f6e:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	radioWriteReg(0x6D, 7);			// Max Power
     f72:	8d e6       	ldi	r24, 0x6D	; 109
     f74:	67 e0       	ldi	r22, 0x07	; 7
     f76:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
	
	if((radioReadReg(0x07)&(1<<RFM_xton)) != (1<<RFM_xton) ){
     f7a:	87 e0       	ldi	r24, 0x07	; 7
     f7c:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
     f80:	80 fd       	sbrc	r24, 0
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <transmitELT_Packet+0x48>
		radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
     f84:	87 e0       	ldi	r24, 0x07	; 7
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
     f8c:	80 ea       	ldi	r24, 0xA0	; 160
     f8e:	9f e0       	ldi	r25, 0x0F	; 15
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <transmitELT_Packet+0x44>
		_delay_ms(1);
	}
	
	//		FCC ID, Lat, Long, UTC Fix, # Sat's, HDOP, Altitude, LiPoly, System In, AtMega
	//		Slightly Reordered from $GPGGA. Want Lat/Long in front, incase of clock skew, battery lag
	snprintf(dataBufferA,BUFFER_SIZE,"KE7ZLH,%+.9li,%+.9li,%.6lu,%u,%u,%+.4i,%u,%u,%u*\n", 
     f94:	8d b7       	in	r24, 0x3d	; 61
     f96:	9e b7       	in	r25, 0x3e	; 62
     f98:	4e 97       	sbiw	r24, 0x1e	; 30
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	9e bf       	out	0x3e, r25	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	8d bf       	out	0x3d, r24	; 61
     fa4:	ed b7       	in	r30, 0x3d	; 61
     fa6:	fe b7       	in	r31, 0x3e	; 62
     fa8:	31 96       	adiw	r30, 0x01	; 1
     faa:	8d ef       	ldi	r24, 0xFD	; 253
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	ad b7       	in	r26, 0x3d	; 61
     fb0:	be b7       	in	r27, 0x3e	; 62
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	80 e8       	ldi	r24, 0x80	; 128
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	93 83       	std	Z+3, r25	; 0x03
     fc0:	82 83       	std	Z+2, r24	; 0x02
     fc2:	82 e8       	ldi	r24, 0x82	; 130
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	95 83       	std	Z+5, r25	; 0x05
     fc8:	84 83       	std	Z+4, r24	; 0x04
     fca:	20 91 80 03 	lds	r18, 0x0380
     fce:	30 91 81 03 	lds	r19, 0x0381
     fd2:	40 91 82 03 	lds	r20, 0x0382
     fd6:	90 91 83 03 	lds	r25, 0x0383
     fda:	89 2f       	mov	r24, r25
     fdc:	8f 73       	andi	r24, 0x3F	; 63
     fde:	26 83       	std	Z+6, r18	; 0x06
     fe0:	37 83       	std	Z+7, r19	; 0x07
     fe2:	40 87       	std	Z+8, r20	; 0x08
     fe4:	81 87       	std	Z+9, r24	; 0x09
     fe6:	92 95       	swap	r25
     fe8:	96 95       	lsr	r25
     fea:	96 95       	lsr	r25
     fec:	93 70       	andi	r25, 0x03	; 3
     fee:	80 91 84 03 	lds	r24, 0x0384
     ff2:	68 2f       	mov	r22, r24
     ff4:	66 0f       	add	r22, r22
     ff6:	66 0f       	add	r22, r22
     ff8:	69 2b       	or	r22, r25
     ffa:	82 95       	swap	r24
     ffc:	86 95       	lsr	r24
     ffe:	86 95       	lsr	r24
    1000:	83 70       	andi	r24, 0x03	; 3
    1002:	90 91 85 03 	lds	r25, 0x0385
    1006:	59 2f       	mov	r21, r25
    1008:	55 0f       	add	r21, r21
    100a:	55 0f       	add	r21, r21
    100c:	58 2b       	or	r21, r24
    100e:	92 95       	swap	r25
    1010:	96 95       	lsr	r25
    1012:	96 95       	lsr	r25
    1014:	93 70       	andi	r25, 0x03	; 3
    1016:	20 91 86 03 	lds	r18, 0x0386
    101a:	32 2f       	mov	r19, r18
    101c:	33 0f       	add	r19, r19
    101e:	33 0f       	add	r19, r19
    1020:	39 2b       	or	r19, r25
    1022:	22 95       	swap	r18
    1024:	26 95       	lsr	r18
    1026:	26 95       	lsr	r18
    1028:	23 70       	andi	r18, 0x03	; 3
    102a:	40 91 87 03 	lds	r20, 0x0387
    102e:	84 2f       	mov	r24, r20
    1030:	8f 70       	andi	r24, 0x0F	; 15
    1032:	88 0f       	add	r24, r24
    1034:	88 0f       	add	r24, r24
    1036:	82 2b       	or	r24, r18
    1038:	62 87       	std	Z+10, r22	; 0x0a
    103a:	53 87       	std	Z+11, r21	; 0x0b
    103c:	34 87       	std	Z+12, r19	; 0x0c
    103e:	85 87       	std	Z+13, r24	; 0x0d
    1040:	42 95       	swap	r20
    1042:	4f 70       	andi	r20, 0x0F	; 15
    1044:	90 91 88 03 	lds	r25, 0x0388
    1048:	39 2f       	mov	r19, r25
    104a:	32 95       	swap	r19
    104c:	30 7f       	andi	r19, 0xF0	; 240
    104e:	34 2b       	or	r19, r20
    1050:	92 95       	swap	r25
    1052:	9f 70       	andi	r25, 0x0F	; 15
    1054:	20 91 89 03 	lds	r18, 0x0389
    1058:	82 2f       	mov	r24, r18
    105a:	82 95       	swap	r24
    105c:	80 7f       	andi	r24, 0xF0	; 240
    105e:	89 2b       	or	r24, r25
    1060:	22 95       	swap	r18
    1062:	2f 70       	andi	r18, 0x0F	; 15
    1064:	36 87       	std	Z+14, r19	; 0x0e
    1066:	87 87       	std	Z+15, r24	; 0x0f
    1068:	20 8b       	std	Z+16, r18	; 0x10
    106a:	11 8a       	std	Z+17, r1	; 0x11
    106c:	80 91 8c 03 	lds	r24, 0x038C
    1070:	82 8b       	std	Z+18, r24	; 0x12
    1072:	13 8a       	std	Z+19, r1	; 0x13
    1074:	80 91 8d 03 	lds	r24, 0x038D
    1078:	84 8b       	std	Z+20, r24	; 0x14
    107a:	15 8a       	std	Z+21, r1	; 0x15
    107c:	80 91 8a 03 	lds	r24, 0x038A
    1080:	90 91 8b 03 	lds	r25, 0x038B
    1084:	97 8b       	std	Z+23, r25	; 0x17
    1086:	86 8b       	std	Z+22, r24	; 0x16
    1088:	80 91 92 03 	lds	r24, 0x0392
    108c:	90 91 93 03 	lds	r25, 0x0393
    1090:	91 8f       	std	Z+25, r25	; 0x19
    1092:	80 8f       	std	Z+24, r24	; 0x18
    1094:	80 91 94 03 	lds	r24, 0x0394
    1098:	90 91 95 03 	lds	r25, 0x0395
    109c:	93 8f       	std	Z+27, r25	; 0x1b
    109e:	82 8f       	std	Z+26, r24	; 0x1a
    10a0:	80 91 96 03 	lds	r24, 0x0396
    10a4:	90 91 97 03 	lds	r25, 0x0397
    10a8:	95 8f       	std	Z+29, r25	; 0x1d
    10aa:	84 8f       	std	Z+28, r24	; 0x1c
    10ac:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <snprintf>
		(int32_t)gps.lat,(int32_t)gps.lon,(uint32_t)gps.time,gps.sats,gps.hdop,gps.alt,volt.lipoly,volt.sysVin,volt.atMega);
	
	//printf("%s",dataBufferA);
	
	CS_RFM = LOW;
    10b0:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	8e bd       	out	0x2e, r24	; 46
    10b6:	8d b7       	in	r24, 0x3d	; 61
    10b8:	9e b7       	in	r25, 0x3e	; 62
    10ba:	4e 96       	adiw	r24, 0x1e	; 30
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	9e bf       	out	0x3e, r25	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	8d bf       	out	0x3d, r24	; 61
	while(!(SPSR & _BV(SPIF)));
    10c6:	0d b4       	in	r0, 0x2d	; 45
    10c8:	07 fe       	sbrs	r0, 7
    10ca:	fd cf       	rjmp	.-6      	; 0x10c6 <transmitELT_Packet+0x17a>
	return SPDR;
    10cc:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    10ce:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    10d0:	0d b4       	in	r0, 0x2d	; 45
    10d2:	07 fe       	sbrs	r0, 7
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <transmitELT_Packet+0x184>
	return SPDR;
    10d6:	8e b5       	in	r24, 0x2e	; 46
    10d8:	80 e0       	ldi	r24, 0x00	; 0


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    10da:	9a ea       	ldi	r25, 0xAA	; 170
    10dc:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    10de:	0d b4       	in	r0, 0x2d	; 45
    10e0:	07 fe       	sbrs	r0, 7
    10e2:	fd cf       	rjmp	.-6      	; 0x10de <transmitELT_Packet+0x192>
	return SPDR;
    10e4:	2e b5       	in	r18, 0x2e	; 46
		transferSPI((RFM_WRITE<<7) | 0x7F);
		transferSPI(0x00);
		for(uint8_t i=0; i<4; i++){
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	c1 f7       	brne	.-16     	; 0x10dc <transmitELT_Packet+0x190>


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    10ec:	89 e0       	ldi	r24, 0x09	; 9
    10ee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    10f0:	0d b4       	in	r0, 0x2d	; 45
    10f2:	07 fe       	sbrs	r0, 7
    10f4:	fd cf       	rjmp	.-6      	; 0x10f0 <transmitELT_Packet+0x1a4>
	return SPDR;
    10f6:	8e b5       	in	r24, 0x2e	; 46
    10f8:	80 e0       	ldi	r24, 0x00	; 0
			transferSPI(0xAA);
		}
		transferSPI(0x09);
		for(uint8_t i=0; i<BUFFER_SIZE; i++){ // String, obvious consequences if there is no \0 present
			if(dataBufferA[i] == '\0') break;
    10fa:	e8 2f       	mov	r30, r24
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	e3 50       	subi	r30, 0x03	; 3
    1100:	fd 4f       	sbci	r31, 0xFD	; 253
    1102:	e0 81       	ld	r30, Z
    1104:	ee 23       	and	r30, r30
    1106:	41 f0       	breq	.+16     	; 0x1118 <transmitELT_Packet+0x1cc>


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    1108:	ee bd       	out	0x2e, r30	; 46
	while(!(SPSR & _BV(SPIF)));
    110a:	0d b4       	in	r0, 0x2d	; 45
    110c:	07 fe       	sbrs	r0, 7
    110e:	fd cf       	rjmp	.-6      	; 0x110a <transmitELT_Packet+0x1be>
	return SPDR;
    1110:	9e b5       	in	r25, 0x2e	; 46
		transferSPI(0x00);
		for(uint8_t i=0; i<4; i++){
			transferSPI(0xAA);
		}
		transferSPI(0x09);
		for(uint8_t i=0; i<BUFFER_SIZE; i++){ // String, obvious consequences if there is no \0 present
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	80 38       	cpi	r24, 0x80	; 128
    1116:	89 f7       	brne	.-30     	; 0x10fa <transmitELT_Packet+0x1ae>
			if(dataBufferA[i] == '\0') break;
			transferSPI(dataBufferA[i]);
			//if(i == BUFFER_SIZE) printf("Fail on String\n");
		}
	CS_RFM = HIGH;
    1118:	2a 9a       	sbi	0x05, 2	; 5
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
    111a:	87 e0       	ldi	r24, 0x07	; 7
    111c:	68 e0       	ldi	r22, 0x08	; 8
    111e:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	c0 ea       	ldi	r28, 0xA0	; 160
    1126:	df e0       	ldi	r29, 0x0F	; 15

	for(uint8_t i=0; i<200; i++){
		if((radioReadReg(0x07)&0x08) == 0){
    1128:	87 e0       	ldi	r24, 0x07	; 7
    112a:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
    112e:	83 ff       	sbrs	r24, 3
    1130:	06 c0       	rjmp	.+12     	; 0x113e <transmitELT_Packet+0x1f2>
    1132:	ce 01       	movw	r24, r28
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <transmitELT_Packet+0x1e8>
		}
	CS_RFM = HIGH;
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));

	for(uint8_t i=0; i<200; i++){
    1138:	1f 5f       	subi	r17, 0xFF	; 255
    113a:	18 3c       	cpi	r17, 0xC8	; 200
    113c:	a9 f7       	brne	.-22     	; 0x1128 <transmitELT_Packet+0x1dc>
			// printf("Break@ %u\n",i);
			break;
		}
		_delay_ms(1);
	}
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	08 95       	ret

00001146 <transmitELT>:
	uint16_t rfmIntList = radioReadReg(0x03);
	rfmIntList |= radioReadReg(0x04)<<8;
	return rfmIntList;
}

void transmitELT(void){
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
    114a:	87 e0       	ldi	r24, 0x07	; 7
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
    1152:	00 ea       	ldi	r16, 0xA0	; 160
    1154:	1f e0       	ldi	r17, 0x0F	; 15
    1156:	c8 01       	movw	r24, r16
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <transmitELT+0x12>
	_delay_ms(1);
	transmitELT_Packet(); // Want to send packet before battery sags in worst case
    115c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <transmitELT_Packet>
    1160:	c8 01       	movw	r24, r16
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <transmitELT+0x1c>
	_delay_ms(1);
	transmitELT_Beacon();
    1166:	0e 94 29 04 	call	0x852	; 0x852 <transmitELT_Beacon>
	radioWriteReg(OPCONTROL1_REG, 0x00);
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
}
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <loop>:
	// Assert Concurrent Outputs (Outputs not tied to a FSM State, but merely from inputs)
	// if(sys.statusLEDs) LED_OR = HIGH; //flashOrangeLED(2,5,5); // Solve Delay timing issue
	
	
	
	if(sys.intSrc.wdt){ // Wow! Race Condition! Should only check this in a single function
    1178:	80 91 90 03 	lds	r24, 0x0390
    117c:	81 ff       	sbrs	r24, 1
    117e:	63 c0       	rjmp	.+198    	; 0x1246 <loop+0xce>
		if(sys.statusLEDs) LED_OR = HIGH;
    1180:	80 91 91 03 	lds	r24, 0x0391
    1184:	81 fd       	sbrc	r24, 1
    1186:	28 9a       	sbi	0x05, 0	; 5
		// updateVolts(1);
		sys.intSrc.wdt = 0;
    1188:	80 91 90 03 	lds	r24, 0x0390
    118c:	8d 7f       	andi	r24, 0xFD	; 253
    118e:	80 93 90 03 	sts	0x0390, r24
    1192:	80 ea       	ldi	r24, 0xA0	; 160
    1194:	9f e0       	ldi	r25, 0x0F	; 15
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <loop+0x1e>
		_delay_ms(1);
		printf("State: %s\tLipoly: %u\tVoltIn: %u\tATmega: %u\tRSSI: %u\n",
    119a:	80 91 8f 03 	lds	r24, 0x038F
    119e:	87 70       	andi	r24, 0x07	; 7
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <loop+0x30>
    11a2:	24 eb       	ldi	r18, 0xB4	; 180
    11a4:	31 e0       	ldi	r19, 0x01	; 1
    11a6:	1a c0       	rjmp	.+52     	; 0x11dc <loop+0x64>
    11a8:	80 91 8f 03 	lds	r24, 0x038F
    11ac:	87 70       	andi	r24, 0x07	; 7
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <loop+0x40>
    11b2:	29 eb       	ldi	r18, 0xB9	; 185
    11b4:	31 e0       	ldi	r19, 0x01	; 1
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <loop+0x64>
    11b8:	80 91 8f 03 	lds	r24, 0x038F
    11bc:	87 70       	andi	r24, 0x07	; 7
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	19 f4       	brne	.+6      	; 0x11c8 <loop+0x50>
    11c2:	2f eb       	ldi	r18, 0xBF	; 191
    11c4:	31 e0       	ldi	r19, 0x01	; 1
    11c6:	0a c0       	rjmp	.+20     	; 0x11dc <loop+0x64>
    11c8:	80 91 8f 03 	lds	r24, 0x038F
    11cc:	87 70       	andi	r24, 0x07	; 7
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <loop+0x60>
    11d2:	26 ec       	ldi	r18, 0xC6	; 198
    11d4:	31 e0       	ldi	r19, 0x01	; 1
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <loop+0x64>
    11d8:	2f ec       	ldi	r18, 0xCF	; 207
    11da:	31 e0       	ldi	r19, 0x01	; 1
    11dc:	8d b7       	in	r24, 0x3d	; 61
    11de:	9e b7       	in	r25, 0x3e	; 62
    11e0:	0c 97       	sbiw	r24, 0x0c	; 12
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	9e bf       	out	0x3e, r25	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	8d bf       	out	0x3d, r24	; 61
    11ec:	ed b7       	in	r30, 0x3d	; 61
    11ee:	fe b7       	in	r31, 0x3e	; 62
    11f0:	31 96       	adiw	r30, 0x01	; 1
    11f2:	86 ed       	ldi	r24, 0xD6	; 214
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	ad b7       	in	r26, 0x3d	; 61
    11f8:	be b7       	in	r27, 0x3e	; 62
    11fa:	12 96       	adiw	r26, 0x02	; 2
    11fc:	9c 93       	st	X, r25
    11fe:	8e 93       	st	-X, r24
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	33 83       	std	Z+3, r19	; 0x03
    1204:	22 83       	std	Z+2, r18	; 0x02
    1206:	80 91 92 03 	lds	r24, 0x0392
    120a:	90 91 93 03 	lds	r25, 0x0393
    120e:	95 83       	std	Z+5, r25	; 0x05
    1210:	84 83       	std	Z+4, r24	; 0x04
    1212:	80 91 94 03 	lds	r24, 0x0394
    1216:	90 91 95 03 	lds	r25, 0x0395
    121a:	97 83       	std	Z+7, r25	; 0x07
    121c:	86 83       	std	Z+6, r24	; 0x06
    121e:	80 91 96 03 	lds	r24, 0x0396
    1222:	90 91 97 03 	lds	r25, 0x0397
    1226:	91 87       	std	Z+9, r25	; 0x09
    1228:	80 87       	std	Z+8, r24	; 0x08
    122a:	8c e3       	ldi	r24, 0x3C	; 60
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	93 87       	std	Z+11, r25	; 0x0b
    1230:	82 87       	std	Z+10, r24	; 0x0a
    1232:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    1236:	8d b7       	in	r24, 0x3d	; 61
    1238:	9e b7       	in	r25, 0x3e	; 62
    123a:	0c 96       	adiw	r24, 0x0c	; 12
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	9e bf       	out	0x3e, r25	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	8d bf       	out	0x3d, r24	; 61
			(sys.state == 3)? "ACTIVE" : "FAILSAFE",volt.lipoly,volt.sysVin,volt.atMega,noiseFloor);

	}
		
	// Carry out the current State processes and determine next state
	switch(sys.state){ // Native State Machine
    1246:	80 91 8f 03 	lds	r24, 0x038F
    124a:	87 70       	andi	r24, 0x07	; 7
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <loop+0xde>
    1254:	5e c0       	rjmp	.+188    	; 0x1312 <loop+0x19a>
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	91 05       	cpc	r25, r1
    125a:	34 f4       	brge	.+12     	; 0x1268 <loop+0xf0>
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	61 f0       	breq	.+24     	; 0x1278 <loop+0x100>
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	09 f0       	breq	.+2      	; 0x1266 <loop+0xee>
    1264:	10 c1       	rjmp	.+544    	; 0x1486 <loop+0x30e>
    1266:	2a c0       	rjmp	.+84     	; 0x12bc <loop+0x144>
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <loop+0xf8>
    126e:	90 c0       	rjmp	.+288    	; 0x1390 <loop+0x218>
    1270:	07 97       	sbiw	r24, 0x07	; 7
    1272:	09 f0       	breq	.+2      	; 0x1276 <loop+0xfe>
    1274:	08 c1       	rjmp	.+528    	; 0x1486 <loop+0x30e>
    1276:	ce c0       	rjmp	.+412    	; 0x1414 <loop+0x29c>
		case DOWN:
			// Refresh information
				updateVolts(0);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <updateVolts>
			// Determine nextState using refreshed information
				if(rfmIntList&RFM_INT_VALID_PACKET_RX){
					// rfmReadFIFO(rfmFIFO);
					// if(rfmFIFO[0]&(DL_BIND_FLAG)) sys.state = SLEEP;
					// else sys.state = ACTIVE;
				} else sys.state = (sys.batteryState)? SLEEP : DOWN;
    127e:	80 91 91 03 	lds	r24, 0x0391
    1282:	86 95       	lsr	r24
    1284:	86 95       	lsr	r24
    1286:	86 95       	lsr	r24
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	90 91 8f 03 	lds	r25, 0x038F
    128e:	98 7f       	andi	r25, 0xF8	; 248
    1290:	98 2b       	or	r25, r24
    1292:	90 93 8f 03 	sts	0x038F, r25
			// Continue if remaining in current state
				if(sys.state != DOWN) break;
    1296:	80 91 8f 03 	lds	r24, 0x038F
    129a:	87 70       	andi	r24, 0x07	; 7
    129c:	09 f0       	breq	.+2      	; 0x12a0 <loop+0x128>
    129e:	f8 c0       	rjmp	.+496    	; 0x1490 <loop+0x318>
			// Assert Outputs
				rcOutputs(DISABLED);
    12a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <rcOutputs>
				sys.statusLEDs = ENABLED; //DISABLED;
    12a4:	80 91 91 03 	lds	r24, 0x0391
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	80 93 91 03 	sts	0x0391, r24
void uartIntConfig(uint8_t mode){
	if(mode == ENABLED){
		PCICR = (1<<PCIE2);
		PCMSK2 = (1<<PCINT16);
	} else{
		PCICR = 0; //(1<<PCIE2);
    12ae:	10 92 68 00 	sts	0x0068, r1
		PCMSK2 = 0; //(1<<PCINT16);
    12b2:	10 92 6d 00 	sts	0x006D, r1
				rcOutputs(DISABLED);
				sys.statusLEDs = ENABLED; //DISABLED;
				uartIntConfig(DISABLED);
			// Configure for next loop and continue
				// rfmIntConfig(ENABLED,noiseFloor);
				wdtIntConfig(DISABLED,0);
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	25 c0       	rjmp	.+74     	; 0x1306 <loop+0x18e>
				systemSleep(9);
			break;
		case SLEEP:
			// Refresh information
				updateVolts(0);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 51 05 	call	0xaa2	; 0xaa2 <updateVolts>
				if(rfmIntList&RFM_INT_VALID_PACKET_RX){
					// rfmReadFIFO(rfmFIFO);
					// if(rfmFIFO[0]&(DL_BIND_FLAG)) sys.state = BEACON;
					// else sys.state = ACTIVE;
					// sys.state = ACTIVE;
				} else sys.state = (sys.batteryState)? SLEEP : DOWN;
    12c2:	80 91 91 03 	lds	r24, 0x0391
    12c6:	86 95       	lsr	r24
    12c8:	86 95       	lsr	r24
    12ca:	86 95       	lsr	r24
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 91 8f 03 	lds	r25, 0x038F
    12d2:	98 7f       	andi	r25, 0xF8	; 248
    12d4:	98 2b       	or	r25, r24
    12d6:	90 93 8f 03 	sts	0x038F, r25
			// Continue if remaining in current state
				if(sys.state != SLEEP) break;
    12da:	80 91 8f 03 	lds	r24, 0x038F
    12de:	87 70       	andi	r24, 0x07	; 7
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <loop+0x16e>
    12e4:	d5 c0       	rjmp	.+426    	; 0x1490 <loop+0x318>
			// Assert Outputs
				rcOutputs(DISABLED);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <rcOutputs>
				sys.statusLEDs = ENABLED; //DISABLED;
    12ec:	80 91 91 03 	lds	r24, 0x0391
    12f0:	82 60       	ori	r24, 0x02	; 2
    12f2:	80 93 91 03 	sts	0x0391, r24
void uartIntConfig(uint8_t mode){
	if(mode == ENABLED){
		PCICR = (1<<PCIE2);
		PCMSK2 = (1<<PCINT16);
	} else{
		PCICR = 0; //(1<<PCIE2);
    12f6:	10 92 68 00 	sts	0x0068, r1
		PCMSK2 = 0; //(1<<PCINT16);
    12fa:	10 92 6d 00 	sts	0x006D, r1
				if(sys.state != SLEEP) break;
			// Assert Outputs
				rcOutputs(DISABLED);
				sys.statusLEDs = ENABLED; //DISABLED;
				uartIntConfig(DISABLED);
				transmitELT();
    12fe:	0e 94 a3 08 	call	0x1146	; 0x1146 <transmitELT>
			// Configure for next loop and continue
				// rfmIntConfig(ENABLED,noiseFloor);
				wdtIntConfig(ENABLED,9);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	69 e0       	ldi	r22, 0x09	; 9
    1306:	0e 94 02 02 	call	0x404	; 0x404 <wdtIntConfig>
				systemSleep(9);
    130a:	89 e0       	ldi	r24, 0x09	; 9
    130c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <systemSleep>
    1310:	bf c0       	rjmp	.+382    	; 0x1490 <loop+0x318>
			break;
		case BEACON:
				wdtIntConfig(ENABLED,9);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	69 e0       	ldi	r22, 0x09	; 9
    1316:	0e 94 02 02 	call	0x404	; 0x404 <wdtIntConfig>
			// Refresh information
				updateVolts(1);
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <updateVolts>
    1320:	80 e4       	ldi	r24, 0x40	; 64
    1322:	9f e1       	ldi	r25, 0x1F	; 31
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <loop+0x1ac>
			// Determine nextState using refreshed information
				if(rfmIntList&RFM_INT_VALID_PACKET_RX){
					// rfmReadFIFO(rfmFIFO);
					// if(rfmFIFO[0]&(DL_BIND_FLAG)) sys.state = BEACON;
					// else sys.state = ACTIVE;
				} else sys.state = (eltTransmitCount > 5)? SLEEP : BEACON;
    1328:	90 91 fc 02 	lds	r25, 0x02FC
    132c:	96 30       	cpi	r25, 0x06	; 6
    132e:	10 f4       	brcc	.+4      	; 0x1334 <loop+0x1bc>
    1330:	22 e0       	ldi	r18, 0x02	; 2
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <loop+0x1be>
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	80 91 8f 03 	lds	r24, 0x038F
    133a:	88 7f       	andi	r24, 0xF8	; 248
    133c:	82 2b       	or	r24, r18
    133e:	80 93 8f 03 	sts	0x038F, r24
			// Continue if remaining in current state
				if(sys.state != BEACON){
    1342:	80 91 8f 03 	lds	r24, 0x038F
    1346:	87 70       	andi	r24, 0x07	; 7
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	19 f0       	breq	.+6      	; 0x1352 <loop+0x1da>
					eltTransmitCount = 0;
    134c:	10 92 fc 02 	sts	0x02FC, r1
    1350:	9f c0       	rjmp	.+318    	; 0x1490 <loop+0x318>
					break;
				}
				eltTransmitCount += 1;
    1352:	9f 5f       	subi	r25, 0xFF	; 255
    1354:	90 93 fc 02 	sts	0x02FC, r25
			// Assert Outputs
				rcOutputs((sys.powerState)? ENABLED : DISABLED);
    1358:	80 91 91 03 	lds	r24, 0x0391
    135c:	86 95       	lsr	r24
    135e:	86 95       	lsr	r24
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <rcOutputs>
				sys.statusLEDs = ENABLED; //(sys.powerState)? ENABLED : DISABLED;
    1366:	80 91 91 03 	lds	r24, 0x0391
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	80 93 91 03 	sts	0x0391, r24
void uartIntConfig(uint8_t mode){
	if(mode == ENABLED){
		PCICR = (1<<PCIE2);
		PCMSK2 = (1<<PCINT16);
	} else{
		PCICR = 0; //(1<<PCIE2);
    1370:	10 92 68 00 	sts	0x0068, r1
		PCMSK2 = 0; //(1<<PCINT16);
    1374:	10 92 6d 00 	sts	0x006D, r1
				eltTransmitCount += 1;
			// Assert Outputs
				rcOutputs((sys.powerState)? ENABLED : DISABLED);
				sys.statusLEDs = ENABLED; //(sys.powerState)? ENABLED : DISABLED;
				uartIntConfig(DISABLED);
				transmitELT();
    1378:	0e 94 a3 08 	call	0x1146	; 0x1146 <transmitELT>
    137c:	8c e2       	ldi	r24, 0x2C	; 44
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	20 e9       	ldi	r18, 0x90	; 144
    1382:	31 e0       	ldi	r19, 0x01	; 1
    1384:	f9 01       	movw	r30, r18
    1386:	31 97       	sbiw	r30, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <loop+0x20e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	d9 f7       	brne	.-10     	; 0x1384 <loop+0x20c>
    138e:	80 c0       	rjmp	.+256    	; 0x1490 <loop+0x318>
				_delay_ms(30);
			break;
		case ACTIVE:
			// Refresh information
			// Determine nextState using refreshed information
				if(timer10ms > 600){ // 10 Misses in 20 hops (Fix this)
    1390:	80 91 f8 02 	lds	r24, 0x02F8
    1394:	90 91 f9 02 	lds	r25, 0x02F9
    1398:	89 55       	subi	r24, 0x59	; 89
    139a:	92 40       	sbci	r25, 0x02	; 2
    139c:	b8 f0       	brcs	.+46     	; 0x13cc <loop+0x254>
					timer10ms = 0;
    139e:	10 92 f9 02 	sts	0x02F9, r1
    13a2:	10 92 f8 02 	sts	0x02F8, r1
					failsafeCounter = 0;
    13a6:	10 92 fb 02 	sts	0x02FB, r1
    13aa:	10 92 fa 02 	sts	0x02FA, r1
					updateVolts(1); // Very Dangerous. Perhaps just checking for the powerState component?
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <updateVolts>
					sys.state = ((sys.powerState == 0))? DOWN : FAILSAFE; //sticksCentered() && 
    13b4:	80 91 91 03 	lds	r24, 0x0391
    13b8:	82 ff       	sbrs	r24, 2
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <loop+0x248>
    13bc:	97 e0       	ldi	r25, 0x07	; 7
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <loop+0x24a>
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	80 91 8f 03 	lds	r24, 0x038F
    13c6:	88 7f       	andi	r24, 0xF8	; 248
    13c8:	89 2b       	or	r24, r25
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <loop+0x25c>
				} else sys.state = ACTIVE;
    13cc:	80 91 8f 03 	lds	r24, 0x038F
    13d0:	88 7f       	andi	r24, 0xF8	; 248
    13d2:	83 60       	ori	r24, 0x03	; 3
    13d4:	80 93 8f 03 	sts	0x038F, r24
			// Continue if remaining in current state
				if(sys.state != ACTIVE) break;
    13d8:	80 91 8f 03 	lds	r24, 0x038F
    13dc:	87 70       	andi	r24, 0x07	; 7
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <loop+0x26c>
    13e2:	56 c0       	rjmp	.+172    	; 0x1490 <loop+0x318>
			// Assert Outputs
				rcOutputs(ENABLED);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <rcOutputs>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t i=0; i<CHANNELS; i++){
					pwmValues[i] = 1700;
    13ee:	24 ea       	ldi	r18, 0xA4	; 164
    13f0:	36 e0       	ldi	r19, 0x06	; 6
    13f2:	fc 01       	movw	r30, r24
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	e9 51       	subi	r30, 0x19	; 25
    13fa:	fd 4f       	sbci	r31, 0xFD	; 253
    13fc:	31 83       	std	Z+1, r19	; 0x01
    13fe:	20 83       	st	Z, r18
    1400:	01 96       	adiw	r24, 0x01	; 1
				} else sys.state = ACTIVE;
			// Continue if remaining in current state
				if(sys.state != ACTIVE) break;
			// Assert Outputs
				rcOutputs(ENABLED);
				for(uint8_t i=0; i<CHANNELS; i++){
    1402:	88 30       	cpi	r24, 0x08	; 8
    1404:	91 05       	cpc	r25, r1
    1406:	a9 f7       	brne	.-22     	; 0x13f2 <loop+0x27a>
					pwmValues[i] = 1700;
				}
				sys.statusLEDs = ENABLED;
    1408:	80 91 91 03 	lds	r24, 0x0391
    140c:	82 60       	ori	r24, 0x02	; 2
    140e:	80 93 91 03 	sts	0x0391, r24
    1412:	34 c0       	rjmp	.+104    	; 0x147c <loop+0x304>
					// failsafeCounter += 1;
					// updateVolts(1);
					// sys.intSrc.wdt = 0;
				// }
			// Determine nextState using refreshed information
				if(timer10ms > 800){
    1414:	80 91 f8 02 	lds	r24, 0x02F8
    1418:	90 91 f9 02 	lds	r25, 0x02F9
    141c:	81 52       	subi	r24, 0x21	; 33
    141e:	93 40       	sbci	r25, 0x03	; 3
    1420:	88 f0       	brcs	.+34     	; 0x1444 <loop+0x2cc>
					sys.state = (sys.powerState)? BEACON : SLEEP;
    1422:	80 91 91 03 	lds	r24, 0x0391
    1426:	82 fd       	sbrc	r24, 2
    1428:	02 c0       	rjmp	.+4      	; 0x142e <loop+0x2b6>
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <loop+0x2b8>
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	80 91 8f 03 	lds	r24, 0x038F
    1434:	88 7f       	andi	r24, 0xF8	; 248
    1436:	89 2b       	or	r24, r25
    1438:	80 93 8f 03 	sts	0x038F, r24
					timer10ms = 0;
    143c:	10 92 f9 02 	sts	0x02F9, r1
    1440:	10 92 f8 02 	sts	0x02F8, r1
				}
			// Continue if remaining in current state
				if(sys.state != FAILSAFE) break;
    1444:	80 91 8f 03 	lds	r24, 0x038F
    1448:	87 70       	andi	r24, 0x07	; 7
    144a:	87 30       	cpi	r24, 0x07	; 7
    144c:	09 f5       	brne	.+66     	; 0x1490 <loop+0x318>
			// Assert Outputs
				rcOutputs(ENABLED);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <rcOutputs>
				sys.statusLEDs = ENABLED;
    1454:	80 91 91 03 	lds	r24, 0x0391
    1458:	82 60       	ori	r24, 0x02	; 2
    145a:	80 93 91 03 	sts	0x0391, r24
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t i=0; i<CHANNELS; i++){
					pwmValues[i] = 1000;
    1462:	28 ee       	ldi	r18, 0xE8	; 232
    1464:	33 e0       	ldi	r19, 0x03	; 3
    1466:	fc 01       	movw	r30, r24
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	e9 51       	subi	r30, 0x19	; 25
    146e:	fd 4f       	sbci	r31, 0xFD	; 253
    1470:	31 83       	std	Z+1, r19	; 0x01
    1472:	20 83       	st	Z, r18
    1474:	01 96       	adiw	r24, 0x01	; 1
			// Continue if remaining in current state
				if(sys.state != FAILSAFE) break;
			// Assert Outputs
				rcOutputs(ENABLED);
				sys.statusLEDs = ENABLED;
				for(uint8_t i=0; i<CHANNELS; i++){
    1476:	88 30       	cpi	r24, 0x08	; 8
    1478:	91 05       	cpc	r25, r1
    147a:	a9 f7       	brne	.-22     	; 0x1466 <loop+0x2ee>
					pwmValues[i] = 1000;
				}
			// Configure for next loop and continue
				wdtIntConfig(ENABLED, 5); // 0.5 sec timeout
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	65 e0       	ldi	r22, 0x05	; 5
    1480:	0e 94 02 02 	call	0x404	; 0x404 <wdtIntConfig>
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <loop+0x318>
			break;
		default:
			sys.state = FAILSAFE;
    1486:	80 91 8f 03 	lds	r24, 0x038F
    148a:	87 60       	ori	r24, 0x07	; 7
    148c:	80 93 8f 03 	sts	0x038F, r24
			// Configure for next loop and continue
			
	}

	
	LED_OR = LOW;
    1490:	28 98       	cbi	0x05, 0	; 5
}
    1492:	08 95       	ret

00001494 <printRegisters>:
		radioWriteReg(0x06, 0);
		EIMSK = 0;
	}
}

void printRegisters(void){
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
	
	
	printf("\n\t");
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <printRegisters+0xe>
    14a2:	8b e0       	ldi	r24, 0x0B	; 11
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	ad b7       	in	r26, 0x3d	; 61
    14a8:	be b7       	in	r27, 0x3e	; 62
    14aa:	12 96       	adiw	r26, 0x02	; 2
    14ac:	9c 93       	st	X, r25
    14ae:	8e 93       	st	-X, r24
    14b0:	11 97       	sbiw	r26, 0x01	; 1
    14b2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    14b6:	c0 e0       	ldi	r28, 0x00	; 0
    14b8:	d0 e0       	ldi	r29, 0x00	; 0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
	for(uint8_t c=0; c<16; c++)	printf("%X\t",c);
    14be:	6e e0       	ldi	r22, 0x0E	; 14
    14c0:	e6 2e       	mov	r14, r22
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	f6 2e       	mov	r15, r22
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <printRegisters+0x34>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <printRegisters+0x36>
    14ca:	ed b7       	in	r30, 0x3d	; 61
    14cc:	fe b7       	in	r31, 0x3e	; 62
    14ce:	f2 82       	std	Z+2, r15	; 0x02
    14d0:	e1 82       	std	Z+1, r14	; 0x01
    14d2:	d4 83       	std	Z+4, r29	; 0x04
    14d4:	c3 83       	std	Z+3, r28	; 0x03
    14d6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    14da:	21 96       	adiw	r28, 0x01	; 1
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	c0 31       	cpi	r28, 0x10	; 16
    14e6:	d1 05       	cpc	r29, r1
    14e8:	71 f7       	brne	.-36     	; 0x14c6 <printRegisters+0x32>
	printf("\n");
    14ea:	8a e0       	ldi	r24, 0x0A	; 10
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <putchar>
    14f2:	c0 e0       	ldi	r28, 0x00	; 0
    14f4:	d0 e0       	ldi	r29, 0x00	; 0
    14f6:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8_t j=0; j<8; j++){
		printf("%X\t",j);
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <printRegisters+0x66>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <printRegisters+0x68>
    14fc:	ad b7       	in	r26, 0x3d	; 61
    14fe:	be b7       	in	r27, 0x3e	; 62
    1500:	11 96       	adiw	r26, 0x01	; 1
    1502:	ec 92       	st	X, r14
    1504:	11 97       	sbiw	r26, 0x01	; 1
    1506:	12 96       	adiw	r26, 0x02	; 2
    1508:	fc 92       	st	X, r15
    150a:	12 97       	sbiw	r26, 0x02	; 2
    150c:	14 96       	adiw	r26, 0x04	; 4
    150e:	dc 93       	st	X, r29
    1510:	ce 93       	st	-X, r28
    1512:	13 97       	sbiw	r26, 0x03	; 3
    1514:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
		CS_RFM = LOW;
    1518:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    151a:	0e bd       	out	0x2e, r16	; 46
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
	while(!(SPSR & _BV(SPIF)));
    1524:	0d b4       	in	r0, 0x2d	; 45
    1526:	07 fe       	sbrs	r0, 7
    1528:	fd cf       	rjmp	.-6      	; 0x1524 <printRegisters+0x90>
	return SPDR;
    152a:	8e b5       	in	r24, 0x2e	; 46
    152c:	10 e0       	ldi	r17, 0x00	; 0


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    152e:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    1530:	0d b4       	in	r0, 0x2d	; 45
    1532:	07 fe       	sbrs	r0, 7
    1534:	fd cf       	rjmp	.-6      	; 0x1530 <printRegisters+0x9c>
	return SPDR;
    1536:	8e b5       	in	r24, 0x2e	; 46
			transferSPI(16*j);
			for(uint8_t k=0; k<16; k++){
				uint8_t response = transferSPI(0x00);
				printf("%X\t",response);
    1538:	00 d0       	rcall	.+0      	; 0x153a <printRegisters+0xa6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <printRegisters+0xa8>
    153c:	ed b7       	in	r30, 0x3d	; 61
    153e:	fe b7       	in	r31, 0x3e	; 62
    1540:	31 96       	adiw	r30, 0x01	; 1
    1542:	ad b7       	in	r26, 0x3d	; 61
    1544:	be b7       	in	r27, 0x3e	; 62
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	ec 92       	st	X, r14
    154a:	11 97       	sbiw	r26, 0x01	; 1
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	fc 92       	st	X, r15
    1550:	82 83       	std	Z+2, r24	; 0x02
    1552:	13 82       	std	Z+3, r1	; 0x03
    1554:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
	printf("\n");
	for(uint8_t j=0; j<8; j++){
		printf("%X\t",j);
		CS_RFM = LOW;
			transferSPI(16*j);
			for(uint8_t k=0; k<16; k++){
    1558:	1f 5f       	subi	r17, 0xFF	; 255
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	10 31       	cpi	r17, 0x10	; 16
    1564:	21 f7       	brne	.-56     	; 0x152e <printRegisters+0x9a>
				uint8_t response = transferSPI(0x00);
				printf("%X\t",response);
			}
		CS_RFM = HIGH;
    1566:	2a 9a       	sbi	0x05, 2	; 5
		printf("\n");
    1568:	8a e0       	ldi	r24, 0x0A	; 10
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <putchar>
    1570:	21 96       	adiw	r28, 0x01	; 1
    1572:	00 5f       	subi	r16, 0xF0	; 240
	
	
	printf("\n\t");
	for(uint8_t c=0; c<16; c++)	printf("%X\t",c);
	printf("\n");
	for(uint8_t j=0; j<8; j++){
    1574:	00 38       	cpi	r16, 0x80	; 128
    1576:	09 f0       	breq	.+2      	; 0x157a <printRegisters+0xe6>
    1578:	bf cf       	rjmp	.-130    	; 0x14f8 <printRegisters+0x64>
	//printf("\n");
	
	//printf("_T\t%u",TCNT1);


}
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	08 95       	ret

00001588 <setup>:
	while(1){		
		loop();
	}
}

void setup(void){
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	uint8_t startStatus = atMegaInit();								// 
    1590:	0e 94 1b 02 	call	0x436	; 0x436 <atMegaInit>
    1594:	08 2f       	mov	r16, r24
	sys.state = ACTIVE;
    1596:	80 91 8f 03 	lds	r24, 0x038F
    159a:	88 7f       	andi	r24, 0xF8	; 248
    159c:	83 60       	ori	r24, 0x03	; 3
    159e:	80 93 8f 03 	sts	0x038F, r24
    15a2:	10 e0       	ldi	r17, 0x00	; 0
    15a4:	c0 e4       	ldi	r28, 0x40	; 64
    15a6:	dc e9       	ldi	r29, 0x9C	; 156
	
	// Restart Peripherals											// ~105 ms
	for(uint8_t i=0; i<5; i++){
		radioWriteReg(0x07, 0x80);		// Reset the Chip
    15a8:	87 e0       	ldi	r24, 0x07	; 7
    15aa:	60 e8       	ldi	r22, 0x80	; 128
    15ac:	0e 94 c4 02 	call	0x588	; 0x588 <radioWriteReg>
    15b0:	ce 01       	movw	r24, r28
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <setup+0x2a>
void setup(void){
	uint8_t startStatus = atMegaInit();								// 
	sys.state = ACTIVE;
	
	// Restart Peripherals											// ~105 ms
	for(uint8_t i=0; i<5; i++){
    15b6:	1f 5f       	subi	r17, 0xFF	; 255
    15b8:	15 30       	cpi	r17, 0x05	; 5
    15ba:	b1 f7       	brne	.-20     	; 0x15a8 <setup+0x20>
    15bc:	10 e0       	ldi	r17, 0x00	; 0
    15be:	c0 ea       	ldi	r28, 0xA0	; 160
    15c0:	df e0       	ldi	r29, 0x0F	; 15
		radioWriteReg(0x07, 0x80);		// Reset the Chip
		_delay_ms(10);
	}
	for(uint8_t i=0; i<200; i++){
		if((radioReadReg(0x05)&0x02) == 0x02) break;
    15c2:	85 e0       	ldi	r24, 0x05	; 5
    15c4:	0e 94 de 03 	call	0x7bc	; 0x7bc <radioReadReg>
    15c8:	81 fd       	sbrc	r24, 1
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <setup+0x50>
    15cc:	ce 01       	movw	r24, r28
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <setup+0x46>
	// Restart Peripherals											// ~105 ms
	for(uint8_t i=0; i<5; i++){
		radioWriteReg(0x07, 0x80);		// Reset the Chip
		_delay_ms(10);
	}
	for(uint8_t i=0; i<200; i++){
    15d2:	1f 5f       	subi	r17, 0xFF	; 255
    15d4:	18 3c       	cpi	r17, 0xC8	; 200
    15d6:	a9 f7       	brne	.-22     	; 0x15c2 <setup+0x3a>
		if((radioReadReg(0x05)&0x02) == 0x02) break;
		_delay_ms(1);
	}
	radioMode(ACTIVE);
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <radioMode>
	
	// Tasks and Routines
	printf("\n\nKatanaLRS v1\nBy Steve Carlson May 2013\n\n");
    15de:	82 e1       	ldi	r24, 0x12	; 18
    15e0:	92 e0       	ldi	r25, 0x02	; 2
    15e2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <puts>
	printf("Reset Source: "); //%X\n",startStatus); //%X\n", startStatus);
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <setup+0x60>
    15e8:	8c e3       	ldi	r24, 0x3C	; 60
    15ea:	92 e0       	ldi	r25, 0x02	; 2
    15ec:	ed b7       	in	r30, 0x3d	; 61
    15ee:	fe b7       	in	r31, 0x3e	; 62
    15f0:	92 83       	std	Z+2, r25	; 0x02
    15f2:	81 83       	std	Z+1, r24	; 0x01
    15f4:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
	if(startStatus&WDRF) printf("WatchDog\t"); // From iom328p.h in AVR Include Folder
    15f8:	c0 2f       	mov	r28, r16
    15fa:	d0 e0       	ldi	r29, 0x00	; 0
    15fc:	ce 01       	movw	r24, r28
    15fe:	83 70       	andi	r24, 0x03	; 3
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	89 2b       	or	r24, r25
    1608:	59 f0       	breq	.+22     	; 0x1620 <setup+0x98>
    160a:	00 d0       	rcall	.+0      	; 0x160c <setup+0x84>
    160c:	8b e4       	ldi	r24, 0x4B	; 75
    160e:	92 e0       	ldi	r25, 0x02	; 2
    1610:	ed b7       	in	r30, 0x3d	; 61
    1612:	fe b7       	in	r31, 0x3e	; 62
    1614:	92 83       	std	Z+2, r25	; 0x02
    1616:	81 83       	std	Z+1, r24	; 0x01
    1618:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
	if(startStatus&BORF) printf("BrownOut\t");
    1620:	c1 ff       	sbrs	r28, 1
    1622:	0b c0       	rjmp	.+22     	; 0x163a <setup+0xb2>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <setup+0x9e>
    1626:	85 e5       	ldi	r24, 0x55	; 85
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	ed b7       	in	r30, 0x3d	; 61
    162c:	fe b7       	in	r31, 0x3e	; 62
    162e:	92 83       	std	Z+2, r25	; 0x02
    1630:	81 83       	std	Z+1, r24	; 0x01
    1632:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
	if(startStatus&EXTRF) printf("External\t");
    163a:	c0 ff       	sbrs	r28, 0
    163c:	0b c0       	rjmp	.+22     	; 0x1654 <setup+0xcc>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <setup+0xb8>
    1640:	8f e5       	ldi	r24, 0x5F	; 95
    1642:	92 e0       	ldi	r25, 0x02	; 2
    1644:	ed b7       	in	r30, 0x3d	; 61
    1646:	fe b7       	in	r31, 0x3e	; 62
    1648:	92 83       	std	Z+2, r25	; 0x02
    164a:	81 83       	std	Z+1, r24	; 0x01
    164c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
	if(startStatus&PORF) printf("PowerOn\t");
	printf("\n\n");
    1654:	89 e6       	ldi	r24, 0x69	; 105
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <puts>
	//	WDRF BORF EXTRF PORF
	
	flashOrangeLED(5,10,40); 										// 250 ms
    165c:	85 e0       	ldi	r24, 0x05	; 5
    165e:	6a e0       	ldi	r22, 0x0A	; 10
    1660:	48 e2       	ldi	r20, 0x28	; 40
    1662:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <flashOrangeLED>
	sys.monitorMode = 1;
    1666:	80 91 91 03 	lds	r24, 0x0391
    166a:	81 60       	ori	r24, 0x01	; 1
    166c:	80 93 91 03 	sts	0x0391, r24
	
	printf("Device ID Check: ");
    1670:	00 d0       	rcall	.+0      	; 0x1672 <setup+0xea>
    1672:	8b e6       	ldi	r24, 0x6B	; 107
    1674:	92 e0       	ldi	r25, 0x02	; 2
    1676:	ed b7       	in	r30, 0x3d	; 61
    1678:	fe b7       	in	r31, 0x3e	; 62
    167a:	92 83       	std	Z+2, r25	; 0x02
    167c:	81 83       	std	Z+1, r24	; 0x01
    167e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
	if(deviceIdCheck()){
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0e 94 6c 07 	call	0xed8	; 0xed8 <deviceIdCheck>
    168a:	88 23       	and	r24, r24
    168c:	19 f0       	breq	.+6      	; 0x1694 <setup+0x10c>
		printf("OK\n");
    168e:	8d e7       	ldi	r24, 0x7D	; 125
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <setup+0x110>
		// transmitELT();
		// transmitELT_Packet();										// ~100 ms
	} else{
		printf("FAILED!\n");
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	92 e0       	ldi	r25, 0x02	; 2
    1698:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <puts>
	}	
	
	*((uint8_t*) &configFlags) = eeprom_read_byte((const uint8_t*) EEPROM_START);
    169c:	8a e0       	ldi	r24, 0x0A	; 10
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 4a 10 	call	0x2094	; 0x2094 <__eerd_byte_m328p>
    16a4:	80 93 8e 03 	sts	0x038E, r24
	
	// Application Warm-up
	TIMSK1 = _BV(TOIE1);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 6f 00 	sts	0x006F, r24
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0; i<CHANNELS; i++){
		pwmValues[i] = 1500;
    16b2:	2c ed       	ldi	r18, 0xDC	; 220
    16b4:	35 e0       	ldi	r19, 0x05	; 5
    16b6:	fc 01       	movw	r30, r24
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	e9 51       	subi	r30, 0x19	; 25
    16be:	fd 4f       	sbci	r31, 0xFD	; 253
    16c0:	31 83       	std	Z+1, r19	; 0x01
    16c2:	20 83       	st	Z, r18
    16c4:	01 96       	adiw	r24, 0x01	; 1
	
	*((uint8_t*) &configFlags) = eeprom_read_byte((const uint8_t*) EEPROM_START);
	
	// Application Warm-up
	TIMSK1 = _BV(TOIE1);
	for(uint8_t i=0; i<CHANNELS; i++){
    16c6:	88 30       	cpi	r24, 0x08	; 8
    16c8:	91 05       	cpc	r25, r1
    16ca:	a9 f7       	brne	.-22     	; 0x16b6 <setup+0x12e>
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <puts>
		pwmValues[i] = 1500;
	}
	
	// Console Usage Hints
	printHelpInfo();
}
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	08 95       	ret

000016de <main>:
}


// Main Program
int main(void){
	setup();
    16de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <setup>

	while(1){		
		loop();
    16e2:	0e 94 bc 08 	call	0x1178	; 0x1178 <loop>
    16e6:	fd cf       	rjmp	.-6      	; 0x16e2 <main+0x4>

000016e8 <__vector_18>:
ISR(TIMER0_COMPA_vect){
	sys.intSrc.timer0 = 1;
	timer10ms = (timer10ms >= 60000)? 0 : timer10ms+1; // 600 sec, 10 min
}

ISR(USART_RX_vect){
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
	sys.intSrc.uart = 1;
    170a:	80 91 90 03 	lds	r24, 0x0390
    170e:	84 60       	ori	r24, 0x04	; 4
    1710:	80 93 90 03 	sts	0x0390, r24
	sys.monitorMode = 0;
    1714:	80 91 91 03 	lds	r24, 0x0391
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	80 93 91 03 	sts	0x0391, r24
	
	uint8_t command = UDR0;
    171e:	80 91 c6 00 	lds	r24, 0x00C6
	
	switch(command){
    1722:	82 34       	cpi	r24, 0x42	; 66
    1724:	89 f0       	breq	.+34     	; 0x1748 <__vector_18+0x60>
    1726:	83 34       	cpi	r24, 0x43	; 67
    1728:	30 f4       	brcc	.+12     	; 0x1736 <__vector_18+0x4e>
    172a:	81 33       	cpi	r24, 0x31	; 49
    172c:	71 f1       	breq	.+92     	; 0x178a <__vector_18+0xa2>
    172e:	8f 33       	cpi	r24, 0x3F	; 63
    1730:	09 f0       	breq	.+2      	; 0x1734 <__vector_18+0x4c>
    1732:	4e c0       	rjmp	.+156    	; 0x17d0 <__vector_18+0xe8>
    1734:	24 c0       	rjmp	.+72     	; 0x177e <__vector_18+0x96>
    1736:	8d 34       	cpi	r24, 0x4D	; 77
    1738:	e1 f0       	breq	.+56     	; 0x1772 <__vector_18+0x8a>
    173a:	80 36       	cpi	r24, 0x60	; 96
    173c:	09 f4       	brne	.+2      	; 0x1740 <__vector_18+0x58>
    173e:	42 c0       	rjmp	.+132    	; 0x17c4 <__vector_18+0xdc>
    1740:	8a 34       	cpi	r24, 0x4A	; 74
    1742:	09 f0       	breq	.+2      	; 0x1746 <__vector_18+0x5e>
    1744:	45 c0       	rjmp	.+138    	; 0x17d0 <__vector_18+0xe8>
    1746:	1e c0       	rjmp	.+60     	; 0x1784 <__vector_18+0x9c>
		case 'B':
			printf("Battery: %u\n", volt.atMega);
    1748:	00 d0       	rcall	.+0      	; 0x174a <__vector_18+0x62>
    174a:	00 d0       	rcall	.+0      	; 0x174c <__vector_18+0x64>
    174c:	88 e8       	ldi	r24, 0x88	; 136
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	ed b7       	in	r30, 0x3d	; 61
    1752:	fe b7       	in	r31, 0x3e	; 62
    1754:	92 83       	std	Z+2, r25	; 0x02
    1756:	81 83       	std	Z+1, r24	; 0x01
    1758:	80 91 96 03 	lds	r24, 0x0396
    175c:	90 91 97 03 	lds	r25, 0x0397
    1760:	94 83       	std	Z+4, r25	; 0x04
    1762:	83 83       	std	Z+3, r24	; 0x03
    1764:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	2f c0       	rjmp	.+94     	; 0x17d0 <__vector_18+0xe8>
			break;
		case 'M':
			sys.monitorMode = 1;
    1772:	80 91 91 03 	lds	r24, 0x0391
    1776:	81 60       	ori	r24, 0x01	; 1
    1778:	80 93 91 03 	sts	0x0391, r24
    177c:	29 c0       	rjmp	.+82     	; 0x17d0 <__vector_18+0xe8>
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	1d c0       	rjmp	.+58     	; 0x17be <__vector_18+0xd6>
			break;
		case '?':
			printHelpInfo();
			break;
		case 'J':
			printRegisters();
    1784:	0e 94 4a 0a 	call	0x1494	; 0x1494 <printRegisters>
    1788:	23 c0       	rjmp	.+70     	; 0x17d0 <__vector_18+0xe8>
			break;
		case '1':
			configFlags.wdtSlpEn ^= 1;
    178a:	80 91 8e 03 	lds	r24, 0x038E
    178e:	98 e0       	ldi	r25, 0x08	; 8
    1790:	89 27       	eor	r24, r25
    1792:	80 93 8e 03 	sts	0x038E, r24
			printf("Sleep: ");
    1796:	00 d0       	rcall	.+0      	; 0x1798 <__vector_18+0xb0>
    1798:	85 e9       	ldi	r24, 0x95	; 149
    179a:	92 e0       	ldi	r25, 0x02	; 2
    179c:	ed b7       	in	r30, 0x3d	; 61
    179e:	fe b7       	in	r31, 0x3e	; 62
    17a0:	92 83       	std	Z+2, r25	; 0x02
    17a2:	81 83       	std	Z+1, r24	; 0x01
    17a4:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <printf>
			if(configFlags.wdtSlpEn) printf("Enabled\n");
    17a8:	80 91 8e 03 	lds	r24, 0x038E
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	83 ff       	sbrs	r24, 3
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <__vector_18+0xd2>
    17b4:	8d e9       	ldi	r24, 0x9D	; 157
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <__vector_18+0xd6>
			else printf("Disabled\n");
    17ba:	85 ea       	ldi	r24, 0xA5	; 165
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <puts>
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <__vector_18+0xe8>
			break;
		case '`':
			eeprom_update_byte((uint8_t*)EEPROM_START,(*(uint8_t*) &configFlags));
    17c4:	8a e0       	ldi	r24, 0x0A	; 10
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	60 91 8e 03 	lds	r22, 0x038E
    17cc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__eeupd_byte_m328p>
			break;
		default:
			break;
	}	
}
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <__cmpsf2>:
    17f2:	d4 d0       	rcall	.+424    	; 0x199c <__fp_cmp>
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <__cmpsf2+0x6>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	08 95       	ret

000017fa <__divsf3>:
    17fa:	0c d0       	rcall	.+24     	; 0x1814 <__divsf3x>
    17fc:	0a c1       	rjmp	.+532    	; 0x1a12 <__fp_round>
    17fe:	02 d1       	rcall	.+516    	; 0x1a04 <__fp_pscB>
    1800:	40 f0       	brcs	.+16     	; 0x1812 <__divsf3+0x18>
    1802:	f9 d0       	rcall	.+498    	; 0x19f6 <__fp_pscA>
    1804:	30 f0       	brcs	.+12     	; 0x1812 <__divsf3+0x18>
    1806:	21 f4       	brne	.+8      	; 0x1810 <__divsf3+0x16>
    1808:	5f 3f       	cpi	r21, 0xFF	; 255
    180a:	19 f0       	breq	.+6      	; 0x1812 <__divsf3+0x18>
    180c:	eb c0       	rjmp	.+470    	; 0x19e4 <__fp_inf>
    180e:	51 11       	cpse	r21, r1
    1810:	34 c1       	rjmp	.+616    	; 0x1a7a <__fp_szero>
    1812:	ee c0       	rjmp	.+476    	; 0x19f0 <__fp_nan>

00001814 <__divsf3x>:
    1814:	0f d1       	rcall	.+542    	; 0x1a34 <__fp_split3>
    1816:	98 f3       	brcs	.-26     	; 0x17fe <__divsf3+0x4>

00001818 <__divsf3_pse>:
    1818:	99 23       	and	r25, r25
    181a:	c9 f3       	breq	.-14     	; 0x180e <__divsf3+0x14>
    181c:	55 23       	and	r21, r21
    181e:	b1 f3       	breq	.-20     	; 0x180c <__divsf3+0x12>
    1820:	95 1b       	sub	r25, r21
    1822:	55 0b       	sbc	r21, r21
    1824:	bb 27       	eor	r27, r27
    1826:	aa 27       	eor	r26, r26
    1828:	62 17       	cp	r22, r18
    182a:	73 07       	cpc	r23, r19
    182c:	84 07       	cpc	r24, r20
    182e:	38 f0       	brcs	.+14     	; 0x183e <__divsf3_pse+0x26>
    1830:	9f 5f       	subi	r25, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	44 1f       	adc	r20, r20
    183a:	aa 1f       	adc	r26, r26
    183c:	a9 f3       	breq	.-22     	; 0x1828 <__divsf3_pse+0x10>
    183e:	33 d0       	rcall	.+102    	; 0x18a6 <__divsf3_pse+0x8e>
    1840:	0e 2e       	mov	r0, r30
    1842:	3a f0       	brmi	.+14     	; 0x1852 <__divsf3_pse+0x3a>
    1844:	e0 e8       	ldi	r30, 0x80	; 128
    1846:	30 d0       	rcall	.+96     	; 0x18a8 <__divsf3_pse+0x90>
    1848:	91 50       	subi	r25, 0x01	; 1
    184a:	50 40       	sbci	r21, 0x00	; 0
    184c:	e6 95       	lsr	r30
    184e:	00 1c       	adc	r0, r0
    1850:	ca f7       	brpl	.-14     	; 0x1844 <__divsf3_pse+0x2c>
    1852:	29 d0       	rcall	.+82     	; 0x18a6 <__divsf3_pse+0x8e>
    1854:	fe 2f       	mov	r31, r30
    1856:	27 d0       	rcall	.+78     	; 0x18a6 <__divsf3_pse+0x8e>
    1858:	66 0f       	add	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	bb 1f       	adc	r27, r27
    1860:	26 17       	cp	r18, r22
    1862:	37 07       	cpc	r19, r23
    1864:	48 07       	cpc	r20, r24
    1866:	ab 07       	cpc	r26, r27
    1868:	b0 e8       	ldi	r27, 0x80	; 128
    186a:	09 f0       	breq	.+2      	; 0x186e <__divsf3_pse+0x56>
    186c:	bb 0b       	sbc	r27, r27
    186e:	80 2d       	mov	r24, r0
    1870:	bf 01       	movw	r22, r30
    1872:	ff 27       	eor	r31, r31
    1874:	93 58       	subi	r25, 0x83	; 131
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	2a f0       	brmi	.+10     	; 0x1884 <__divsf3_pse+0x6c>
    187a:	9e 3f       	cpi	r25, 0xFE	; 254
    187c:	51 05       	cpc	r21, r1
    187e:	68 f0       	brcs	.+26     	; 0x189a <__divsf3_pse+0x82>
    1880:	b1 c0       	rjmp	.+354    	; 0x19e4 <__fp_inf>
    1882:	fb c0       	rjmp	.+502    	; 0x1a7a <__fp_szero>
    1884:	5f 3f       	cpi	r21, 0xFF	; 255
    1886:	ec f3       	brlt	.-6      	; 0x1882 <__divsf3_pse+0x6a>
    1888:	98 3e       	cpi	r25, 0xE8	; 232
    188a:	dc f3       	brlt	.-10     	; 0x1882 <__divsf3_pse+0x6a>
    188c:	86 95       	lsr	r24
    188e:	77 95       	ror	r23
    1890:	67 95       	ror	r22
    1892:	b7 95       	ror	r27
    1894:	f7 95       	ror	r31
    1896:	9f 5f       	subi	r25, 0xFF	; 255
    1898:	c9 f7       	brne	.-14     	; 0x188c <__divsf3_pse+0x74>
    189a:	88 0f       	add	r24, r24
    189c:	91 1d       	adc	r25, r1
    189e:	96 95       	lsr	r25
    18a0:	87 95       	ror	r24
    18a2:	97 f9       	bld	r25, 7
    18a4:	08 95       	ret
    18a6:	e1 e0       	ldi	r30, 0x01	; 1
    18a8:	66 0f       	add	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	bb 1f       	adc	r27, r27
    18b0:	62 17       	cp	r22, r18
    18b2:	73 07       	cpc	r23, r19
    18b4:	84 07       	cpc	r24, r20
    18b6:	ba 07       	cpc	r27, r26
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__divsf3_pse+0xaa>
    18ba:	62 1b       	sub	r22, r18
    18bc:	73 0b       	sbc	r23, r19
    18be:	84 0b       	sbc	r24, r20
    18c0:	ba 0b       	sbc	r27, r26
    18c2:	ee 1f       	adc	r30, r30
    18c4:	88 f7       	brcc	.-30     	; 0x18a8 <__divsf3_pse+0x90>
    18c6:	e0 95       	com	r30
    18c8:	08 95       	ret

000018ca <__fixunssfsi>:
    18ca:	bc d0       	rcall	.+376    	; 0x1a44 <__fp_splitA>
    18cc:	88 f0       	brcs	.+34     	; 0x18f0 <__fixunssfsi+0x26>
    18ce:	9f 57       	subi	r25, 0x7F	; 127
    18d0:	90 f0       	brcs	.+36     	; 0x18f6 <__fixunssfsi+0x2c>
    18d2:	b9 2f       	mov	r27, r25
    18d4:	99 27       	eor	r25, r25
    18d6:	b7 51       	subi	r27, 0x17	; 23
    18d8:	a0 f0       	brcs	.+40     	; 0x1902 <__fixunssfsi+0x38>
    18da:	d1 f0       	breq	.+52     	; 0x1910 <__fixunssfsi+0x46>
    18dc:	66 0f       	add	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	1a f0       	brmi	.+6      	; 0x18ec <__fixunssfsi+0x22>
    18e6:	ba 95       	dec	r27
    18e8:	c9 f7       	brne	.-14     	; 0x18dc <__fixunssfsi+0x12>
    18ea:	12 c0       	rjmp	.+36     	; 0x1910 <__fixunssfsi+0x46>
    18ec:	b1 30       	cpi	r27, 0x01	; 1
    18ee:	81 f0       	breq	.+32     	; 0x1910 <__fixunssfsi+0x46>
    18f0:	c3 d0       	rcall	.+390    	; 0x1a78 <__fp_zero>
    18f2:	b1 e0       	ldi	r27, 0x01	; 1
    18f4:	08 95       	ret
    18f6:	c0 c0       	rjmp	.+384    	; 0x1a78 <__fp_zero>
    18f8:	67 2f       	mov	r22, r23
    18fa:	78 2f       	mov	r23, r24
    18fc:	88 27       	eor	r24, r24
    18fe:	b8 5f       	subi	r27, 0xF8	; 248
    1900:	39 f0       	breq	.+14     	; 0x1910 <__fixunssfsi+0x46>
    1902:	b9 3f       	cpi	r27, 0xF9	; 249
    1904:	cc f3       	brlt	.-14     	; 0x18f8 <__fixunssfsi+0x2e>
    1906:	86 95       	lsr	r24
    1908:	77 95       	ror	r23
    190a:	67 95       	ror	r22
    190c:	b3 95       	inc	r27
    190e:	d9 f7       	brne	.-10     	; 0x1906 <__fixunssfsi+0x3c>
    1910:	3e f4       	brtc	.+14     	; 0x1920 <__fixunssfsi+0x56>
    1912:	90 95       	com	r25
    1914:	80 95       	com	r24
    1916:	70 95       	com	r23
    1918:	61 95       	neg	r22
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	08 95       	ret

00001922 <__floatunsisf>:
    1922:	e8 94       	clt
    1924:	09 c0       	rjmp	.+18     	; 0x1938 <__floatsisf+0x12>

00001926 <__floatsisf>:
    1926:	97 fb       	bst	r25, 7
    1928:	3e f4       	brtc	.+14     	; 0x1938 <__floatsisf+0x12>
    192a:	90 95       	com	r25
    192c:	80 95       	com	r24
    192e:	70 95       	com	r23
    1930:	61 95       	neg	r22
    1932:	7f 4f       	sbci	r23, 0xFF	; 255
    1934:	8f 4f       	sbci	r24, 0xFF	; 255
    1936:	9f 4f       	sbci	r25, 0xFF	; 255
    1938:	99 23       	and	r25, r25
    193a:	a9 f0       	breq	.+42     	; 0x1966 <__floatsisf+0x40>
    193c:	f9 2f       	mov	r31, r25
    193e:	96 e9       	ldi	r25, 0x96	; 150
    1940:	bb 27       	eor	r27, r27
    1942:	93 95       	inc	r25
    1944:	f6 95       	lsr	r31
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	f1 11       	cpse	r31, r1
    1950:	f8 cf       	rjmp	.-16     	; 0x1942 <__floatsisf+0x1c>
    1952:	fa f4       	brpl	.+62     	; 0x1992 <__floatsisf+0x6c>
    1954:	bb 0f       	add	r27, r27
    1956:	11 f4       	brne	.+4      	; 0x195c <__floatsisf+0x36>
    1958:	60 ff       	sbrs	r22, 0
    195a:	1b c0       	rjmp	.+54     	; 0x1992 <__floatsisf+0x6c>
    195c:	6f 5f       	subi	r22, 0xFF	; 255
    195e:	7f 4f       	sbci	r23, 0xFF	; 255
    1960:	8f 4f       	sbci	r24, 0xFF	; 255
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	16 c0       	rjmp	.+44     	; 0x1992 <__floatsisf+0x6c>
    1966:	88 23       	and	r24, r24
    1968:	11 f0       	breq	.+4      	; 0x196e <__floatsisf+0x48>
    196a:	96 e9       	ldi	r25, 0x96	; 150
    196c:	11 c0       	rjmp	.+34     	; 0x1990 <__floatsisf+0x6a>
    196e:	77 23       	and	r23, r23
    1970:	21 f0       	breq	.+8      	; 0x197a <__floatsisf+0x54>
    1972:	9e e8       	ldi	r25, 0x8E	; 142
    1974:	87 2f       	mov	r24, r23
    1976:	76 2f       	mov	r23, r22
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <__floatsisf+0x5e>
    197a:	66 23       	and	r22, r22
    197c:	71 f0       	breq	.+28     	; 0x199a <__floatsisf+0x74>
    197e:	96 e8       	ldi	r25, 0x86	; 134
    1980:	86 2f       	mov	r24, r22
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	2a f0       	brmi	.+10     	; 0x1992 <__floatsisf+0x6c>
    1988:	9a 95       	dec	r25
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	da f7       	brpl	.-10     	; 0x1988 <__floatsisf+0x62>
    1992:	88 0f       	add	r24, r24
    1994:	96 95       	lsr	r25
    1996:	87 95       	ror	r24
    1998:	97 f9       	bld	r25, 7
    199a:	08 95       	ret

0000199c <__fp_cmp>:
    199c:	99 0f       	add	r25, r25
    199e:	00 08       	sbc	r0, r0
    19a0:	55 0f       	add	r21, r21
    19a2:	aa 0b       	sbc	r26, r26
    19a4:	e0 e8       	ldi	r30, 0x80	; 128
    19a6:	fe ef       	ldi	r31, 0xFE	; 254
    19a8:	16 16       	cp	r1, r22
    19aa:	17 06       	cpc	r1, r23
    19ac:	e8 07       	cpc	r30, r24
    19ae:	f9 07       	cpc	r31, r25
    19b0:	c0 f0       	brcs	.+48     	; 0x19e2 <__fp_cmp+0x46>
    19b2:	12 16       	cp	r1, r18
    19b4:	13 06       	cpc	r1, r19
    19b6:	e4 07       	cpc	r30, r20
    19b8:	f5 07       	cpc	r31, r21
    19ba:	98 f0       	brcs	.+38     	; 0x19e2 <__fp_cmp+0x46>
    19bc:	62 1b       	sub	r22, r18
    19be:	73 0b       	sbc	r23, r19
    19c0:	84 0b       	sbc	r24, r20
    19c2:	95 0b       	sbc	r25, r21
    19c4:	39 f4       	brne	.+14     	; 0x19d4 <__fp_cmp+0x38>
    19c6:	0a 26       	eor	r0, r26
    19c8:	61 f0       	breq	.+24     	; 0x19e2 <__fp_cmp+0x46>
    19ca:	23 2b       	or	r18, r19
    19cc:	24 2b       	or	r18, r20
    19ce:	25 2b       	or	r18, r21
    19d0:	21 f4       	brne	.+8      	; 0x19da <__fp_cmp+0x3e>
    19d2:	08 95       	ret
    19d4:	0a 26       	eor	r0, r26
    19d6:	09 f4       	brne	.+2      	; 0x19da <__fp_cmp+0x3e>
    19d8:	a1 40       	sbci	r26, 0x01	; 1
    19da:	a6 95       	lsr	r26
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	81 1d       	adc	r24, r1
    19e0:	81 1d       	adc	r24, r1
    19e2:	08 95       	ret

000019e4 <__fp_inf>:
    19e4:	97 f9       	bld	r25, 7
    19e6:	9f 67       	ori	r25, 0x7F	; 127
    19e8:	80 e8       	ldi	r24, 0x80	; 128
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	08 95       	ret

000019f0 <__fp_nan>:
    19f0:	9f ef       	ldi	r25, 0xFF	; 255
    19f2:	80 ec       	ldi	r24, 0xC0	; 192
    19f4:	08 95       	ret

000019f6 <__fp_pscA>:
    19f6:	00 24       	eor	r0, r0
    19f8:	0a 94       	dec	r0
    19fa:	16 16       	cp	r1, r22
    19fc:	17 06       	cpc	r1, r23
    19fe:	18 06       	cpc	r1, r24
    1a00:	09 06       	cpc	r0, r25
    1a02:	08 95       	ret

00001a04 <__fp_pscB>:
    1a04:	00 24       	eor	r0, r0
    1a06:	0a 94       	dec	r0
    1a08:	12 16       	cp	r1, r18
    1a0a:	13 06       	cpc	r1, r19
    1a0c:	14 06       	cpc	r1, r20
    1a0e:	05 06       	cpc	r0, r21
    1a10:	08 95       	ret

00001a12 <__fp_round>:
    1a12:	09 2e       	mov	r0, r25
    1a14:	03 94       	inc	r0
    1a16:	00 0c       	add	r0, r0
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <__fp_round+0xc>
    1a1a:	88 23       	and	r24, r24
    1a1c:	52 f0       	brmi	.+20     	; 0x1a32 <__fp_round+0x20>
    1a1e:	bb 0f       	add	r27, r27
    1a20:	40 f4       	brcc	.+16     	; 0x1a32 <__fp_round+0x20>
    1a22:	bf 2b       	or	r27, r31
    1a24:	11 f4       	brne	.+4      	; 0x1a2a <__fp_round+0x18>
    1a26:	60 ff       	sbrs	r22, 0
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <__fp_round+0x20>
    1a2a:	6f 5f       	subi	r22, 0xFF	; 255
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	08 95       	ret

00001a34 <__fp_split3>:
    1a34:	57 fd       	sbrc	r21, 7
    1a36:	90 58       	subi	r25, 0x80	; 128
    1a38:	44 0f       	add	r20, r20
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	59 f0       	breq	.+22     	; 0x1a54 <__fp_splitA+0x10>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <__fp_splitA+0x1a>
    1a42:	47 95       	ror	r20

00001a44 <__fp_splitA>:
    1a44:	88 0f       	add	r24, r24
    1a46:	97 fb       	bst	r25, 7
    1a48:	99 1f       	adc	r25, r25
    1a4a:	61 f0       	breq	.+24     	; 0x1a64 <__fp_splitA+0x20>
    1a4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4e:	79 f0       	breq	.+30     	; 0x1a6e <__fp_splitA+0x2a>
    1a50:	87 95       	ror	r24
    1a52:	08 95       	ret
    1a54:	12 16       	cp	r1, r18
    1a56:	13 06       	cpc	r1, r19
    1a58:	14 06       	cpc	r1, r20
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	f2 cf       	rjmp	.-28     	; 0x1a42 <__fp_split3+0xe>
    1a5e:	46 95       	lsr	r20
    1a60:	f1 df       	rcall	.-30     	; 0x1a44 <__fp_splitA>
    1a62:	08 c0       	rjmp	.+16     	; 0x1a74 <__fp_splitA+0x30>
    1a64:	16 16       	cp	r1, r22
    1a66:	17 06       	cpc	r1, r23
    1a68:	18 06       	cpc	r1, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	f1 cf       	rjmp	.-30     	; 0x1a50 <__fp_splitA+0xc>
    1a6e:	86 95       	lsr	r24
    1a70:	71 05       	cpc	r23, r1
    1a72:	61 05       	cpc	r22, r1
    1a74:	08 94       	sec
    1a76:	08 95       	ret

00001a78 <__fp_zero>:
    1a78:	e8 94       	clt

00001a7a <__fp_szero>:
    1a7a:	bb 27       	eor	r27, r27
    1a7c:	66 27       	eor	r22, r22
    1a7e:	77 27       	eor	r23, r23
    1a80:	cb 01       	movw	r24, r22
    1a82:	97 f9       	bld	r25, 7
    1a84:	08 95       	ret

00001a86 <__gesf2>:
    1a86:	8a df       	rcall	.-236    	; 0x199c <__fp_cmp>
    1a88:	08 f4       	brcc	.+2      	; 0x1a8c <__gesf2+0x6>
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	08 95       	ret

00001a8e <__mulsf3>:
    1a8e:	0b d0       	rcall	.+22     	; 0x1aa6 <__mulsf3x>
    1a90:	c0 cf       	rjmp	.-128    	; 0x1a12 <__fp_round>
    1a92:	b1 df       	rcall	.-158    	; 0x19f6 <__fp_pscA>
    1a94:	28 f0       	brcs	.+10     	; 0x1aa0 <__mulsf3+0x12>
    1a96:	b6 df       	rcall	.-148    	; 0x1a04 <__fp_pscB>
    1a98:	18 f0       	brcs	.+6      	; 0x1aa0 <__mulsf3+0x12>
    1a9a:	95 23       	and	r25, r21
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <__mulsf3+0x12>
    1a9e:	a2 cf       	rjmp	.-188    	; 0x19e4 <__fp_inf>
    1aa0:	a7 cf       	rjmp	.-178    	; 0x19f0 <__fp_nan>
    1aa2:	11 24       	eor	r1, r1
    1aa4:	ea cf       	rjmp	.-44     	; 0x1a7a <__fp_szero>

00001aa6 <__mulsf3x>:
    1aa6:	c6 df       	rcall	.-116    	; 0x1a34 <__fp_split3>
    1aa8:	a0 f3       	brcs	.-24     	; 0x1a92 <__mulsf3+0x4>

00001aaa <__mulsf3_pse>:
    1aaa:	95 9f       	mul	r25, r21
    1aac:	d1 f3       	breq	.-12     	; 0x1aa2 <__mulsf3+0x14>
    1aae:	95 0f       	add	r25, r21
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	55 1f       	adc	r21, r21
    1ab4:	62 9f       	mul	r22, r18
    1ab6:	f0 01       	movw	r30, r0
    1ab8:	72 9f       	mul	r23, r18
    1aba:	bb 27       	eor	r27, r27
    1abc:	f0 0d       	add	r31, r0
    1abe:	b1 1d       	adc	r27, r1
    1ac0:	63 9f       	mul	r22, r19
    1ac2:	aa 27       	eor	r26, r26
    1ac4:	f0 0d       	add	r31, r0
    1ac6:	b1 1d       	adc	r27, r1
    1ac8:	aa 1f       	adc	r26, r26
    1aca:	64 9f       	mul	r22, r20
    1acc:	66 27       	eor	r22, r22
    1ace:	b0 0d       	add	r27, r0
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	66 1f       	adc	r22, r22
    1ad4:	82 9f       	mul	r24, r18
    1ad6:	22 27       	eor	r18, r18
    1ad8:	b0 0d       	add	r27, r0
    1ada:	a1 1d       	adc	r26, r1
    1adc:	62 1f       	adc	r22, r18
    1ade:	73 9f       	mul	r23, r19
    1ae0:	b0 0d       	add	r27, r0
    1ae2:	a1 1d       	adc	r26, r1
    1ae4:	62 1f       	adc	r22, r18
    1ae6:	83 9f       	mul	r24, r19
    1ae8:	a0 0d       	add	r26, r0
    1aea:	61 1d       	adc	r22, r1
    1aec:	22 1f       	adc	r18, r18
    1aee:	74 9f       	mul	r23, r20
    1af0:	33 27       	eor	r19, r19
    1af2:	a0 0d       	add	r26, r0
    1af4:	61 1d       	adc	r22, r1
    1af6:	23 1f       	adc	r18, r19
    1af8:	84 9f       	mul	r24, r20
    1afa:	60 0d       	add	r22, r0
    1afc:	21 1d       	adc	r18, r1
    1afe:	82 2f       	mov	r24, r18
    1b00:	76 2f       	mov	r23, r22
    1b02:	6a 2f       	mov	r22, r26
    1b04:	11 24       	eor	r1, r1
    1b06:	9f 57       	subi	r25, 0x7F	; 127
    1b08:	50 40       	sbci	r21, 0x00	; 0
    1b0a:	8a f0       	brmi	.+34     	; 0x1b2e <__mulsf3_pse+0x84>
    1b0c:	e1 f0       	breq	.+56     	; 0x1b46 <__mulsf3_pse+0x9c>
    1b0e:	88 23       	and	r24, r24
    1b10:	4a f0       	brmi	.+18     	; 0x1b24 <__mulsf3_pse+0x7a>
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	bb 1f       	adc	r27, r27
    1b18:	66 1f       	adc	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	50 40       	sbci	r21, 0x00	; 0
    1b22:	a9 f7       	brne	.-22     	; 0x1b0e <__mulsf3_pse+0x64>
    1b24:	9e 3f       	cpi	r25, 0xFE	; 254
    1b26:	51 05       	cpc	r21, r1
    1b28:	70 f0       	brcs	.+28     	; 0x1b46 <__mulsf3_pse+0x9c>
    1b2a:	5c cf       	rjmp	.-328    	; 0x19e4 <__fp_inf>
    1b2c:	a6 cf       	rjmp	.-180    	; 0x1a7a <__fp_szero>
    1b2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b30:	ec f3       	brlt	.-6      	; 0x1b2c <__mulsf3_pse+0x82>
    1b32:	98 3e       	cpi	r25, 0xE8	; 232
    1b34:	dc f3       	brlt	.-10     	; 0x1b2c <__mulsf3_pse+0x82>
    1b36:	86 95       	lsr	r24
    1b38:	77 95       	ror	r23
    1b3a:	67 95       	ror	r22
    1b3c:	b7 95       	ror	r27
    1b3e:	f7 95       	ror	r31
    1b40:	e7 95       	ror	r30
    1b42:	9f 5f       	subi	r25, 0xFF	; 255
    1b44:	c1 f7       	brne	.-16     	; 0x1b36 <__mulsf3_pse+0x8c>
    1b46:	fe 2b       	or	r31, r30
    1b48:	88 0f       	add	r24, r24
    1b4a:	91 1d       	adc	r25, r1
    1b4c:	96 95       	lsr	r25
    1b4e:	87 95       	ror	r24
    1b50:	97 f9       	bld	r25, 7
    1b52:	08 95       	ret

00001b54 <__mulsi3>:
    1b54:	62 9f       	mul	r22, r18
    1b56:	d0 01       	movw	r26, r0
    1b58:	73 9f       	mul	r23, r19
    1b5a:	f0 01       	movw	r30, r0
    1b5c:	82 9f       	mul	r24, r18
    1b5e:	e0 0d       	add	r30, r0
    1b60:	f1 1d       	adc	r31, r1
    1b62:	64 9f       	mul	r22, r20
    1b64:	e0 0d       	add	r30, r0
    1b66:	f1 1d       	adc	r31, r1
    1b68:	92 9f       	mul	r25, r18
    1b6a:	f0 0d       	add	r31, r0
    1b6c:	83 9f       	mul	r24, r19
    1b6e:	f0 0d       	add	r31, r0
    1b70:	74 9f       	mul	r23, r20
    1b72:	f0 0d       	add	r31, r0
    1b74:	65 9f       	mul	r22, r21
    1b76:	f0 0d       	add	r31, r0
    1b78:	99 27       	eor	r25, r25
    1b7a:	72 9f       	mul	r23, r18
    1b7c:	b0 0d       	add	r27, r0
    1b7e:	e1 1d       	adc	r30, r1
    1b80:	f9 1f       	adc	r31, r25
    1b82:	63 9f       	mul	r22, r19
    1b84:	b0 0d       	add	r27, r0
    1b86:	e1 1d       	adc	r30, r1
    1b88:	f9 1f       	adc	r31, r25
    1b8a:	bd 01       	movw	r22, r26
    1b8c:	cf 01       	movw	r24, r30
    1b8e:	11 24       	eor	r1, r1
    1b90:	08 95       	ret

00001b92 <__udivmodsi4>:
    1b92:	a1 e2       	ldi	r26, 0x21	; 33
    1b94:	1a 2e       	mov	r1, r26
    1b96:	aa 1b       	sub	r26, r26
    1b98:	bb 1b       	sub	r27, r27
    1b9a:	fd 01       	movw	r30, r26
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <__udivmodsi4_ep>

00001b9e <__udivmodsi4_loop>:
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	ee 1f       	adc	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	a2 17       	cp	r26, r18
    1ba8:	b3 07       	cpc	r27, r19
    1baa:	e4 07       	cpc	r30, r20
    1bac:	f5 07       	cpc	r31, r21
    1bae:	20 f0       	brcs	.+8      	; 0x1bb8 <__udivmodsi4_ep>
    1bb0:	a2 1b       	sub	r26, r18
    1bb2:	b3 0b       	sbc	r27, r19
    1bb4:	e4 0b       	sbc	r30, r20
    1bb6:	f5 0b       	sbc	r31, r21

00001bb8 <__udivmodsi4_ep>:
    1bb8:	66 1f       	adc	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	1a 94       	dec	r1
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <__udivmodsi4_loop>
    1bc4:	60 95       	com	r22
    1bc6:	70 95       	com	r23
    1bc8:	80 95       	com	r24
    1bca:	90 95       	com	r25
    1bcc:	9b 01       	movw	r18, r22
    1bce:	ac 01       	movw	r20, r24
    1bd0:	bd 01       	movw	r22, r26
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	08 95       	ret

00001bd6 <printf>:
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 ef       	ldi	r30, 0xF1	; 241
    1bdc:	fd e0       	ldi	r31, 0x0D	; 13
    1bde:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x20>
    1be2:	fe 01       	movw	r30, r28
    1be4:	35 96       	adiw	r30, 0x05	; 5
    1be6:	61 91       	ld	r22, Z+
    1be8:	71 91       	ld	r23, Z+
    1bea:	80 91 9a 03 	lds	r24, 0x039A
    1bee:	90 91 9b 03 	lds	r25, 0x039B
    1bf2:	af 01       	movw	r20, r30
    1bf4:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <vfprintf>
    1bf8:	20 96       	adiw	r28, 0x00	; 0
    1bfa:	e2 e0       	ldi	r30, 0x02	; 2
    1bfc:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x20>

00001c00 <putchar>:
    1c00:	60 91 9a 03 	lds	r22, 0x039A
    1c04:	70 91 9b 03 	lds	r23, 0x039B
    1c08:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1c0c:	08 95       	ret

00001c0e <puts>:
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	8c 01       	movw	r16, r24
    1c18:	e0 91 9a 03 	lds	r30, 0x039A
    1c1c:	f0 91 9b 03 	lds	r31, 0x039B
    1c20:	83 81       	ldd	r24, Z+3	; 0x03
    1c22:	81 ff       	sbrs	r24, 1
    1c24:	21 c0       	rjmp	.+66     	; 0x1c68 <puts+0x5a>
    1c26:	c0 e0       	ldi	r28, 0x00	; 0
    1c28:	d0 e0       	ldi	r29, 0x00	; 0
    1c2a:	0d c0       	rjmp	.+26     	; 0x1c46 <puts+0x38>
    1c2c:	e0 91 9a 03 	lds	r30, 0x039A
    1c30:	f0 91 9b 03 	lds	r31, 0x039B
    1c34:	20 85       	ldd	r18, Z+8	; 0x08
    1c36:	31 85       	ldd	r19, Z+9	; 0x09
    1c38:	bf 01       	movw	r22, r30
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	09 95       	icall
    1c3e:	89 2b       	or	r24, r25
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <puts+0x38>
    1c42:	cf ef       	ldi	r28, 0xFF	; 255
    1c44:	df ef       	ldi	r29, 0xFF	; 255
    1c46:	f8 01       	movw	r30, r16
    1c48:	81 91       	ld	r24, Z+
    1c4a:	8f 01       	movw	r16, r30
    1c4c:	88 23       	and	r24, r24
    1c4e:	71 f7       	brne	.-36     	; 0x1c2c <puts+0x1e>
    1c50:	e0 91 9a 03 	lds	r30, 0x039A
    1c54:	f0 91 9b 03 	lds	r31, 0x039B
    1c58:	20 85       	ldd	r18, Z+8	; 0x08
    1c5a:	31 85       	ldd	r19, Z+9	; 0x09
    1c5c:	8a e0       	ldi	r24, 0x0A	; 10
    1c5e:	bf 01       	movw	r22, r30
    1c60:	f9 01       	movw	r30, r18
    1c62:	09 95       	icall
    1c64:	89 2b       	or	r24, r25
    1c66:	11 f0       	breq	.+4      	; 0x1c6c <puts+0x5e>
    1c68:	cf ef       	ldi	r28, 0xFF	; 255
    1c6a:	df ef       	ldi	r29, 0xFF	; 255
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	08 95       	ret

00001c78 <snprintf>:
    1c78:	ae e0       	ldi	r26, 0x0E	; 14
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e4       	ldi	r30, 0x42	; 66
    1c7e:	fe e0       	ldi	r31, 0x0E	; 14
    1c80:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__prologue_saves__+0x1c>
    1c84:	0d 89       	ldd	r16, Y+21	; 0x15
    1c86:	1e 89       	ldd	r17, Y+22	; 0x16
    1c88:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8c:	97 ff       	sbrs	r25, 7
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <snprintf+0x1c>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e8       	ldi	r25, 0x80	; 128
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	1a 83       	std	Y+2, r17	; 0x02
    1c9c:	09 83       	std	Y+1, r16	; 0x01
    1c9e:	86 e0       	ldi	r24, 0x06	; 6
    1ca0:	8c 83       	std	Y+4, r24	; 0x04
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	25 5e       	subi	r18, 0xE5	; 229
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	69 8d       	ldd	r22, Y+25	; 0x19
    1cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb0:	a9 01       	movw	r20, r18
    1cb2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <vfprintf>
    1cb6:	4d 81       	ldd	r20, Y+5	; 0x05
    1cb8:	5e 81       	ldd	r21, Y+6	; 0x06
    1cba:	57 fd       	sbrc	r21, 7
    1cbc:	0a c0       	rjmp	.+20     	; 0x1cd2 <snprintf+0x5a>
    1cbe:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc0:	38 85       	ldd	r19, Y+8	; 0x08
    1cc2:	42 17       	cp	r20, r18
    1cc4:	53 07       	cpc	r21, r19
    1cc6:	0c f4       	brge	.+2      	; 0x1cca <snprintf+0x52>
    1cc8:	9a 01       	movw	r18, r20
    1cca:	02 0f       	add	r16, r18
    1ccc:	13 1f       	adc	r17, r19
    1cce:	f8 01       	movw	r30, r16
    1cd0:	10 82       	st	Z, r1
    1cd2:	2e 96       	adiw	r28, 0x0e	; 14
    1cd4:	e4 e0       	ldi	r30, 0x04	; 4
    1cd6:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__epilogue_restores__+0x1c>

00001cda <vfprintf>:
    1cda:	ab e0       	ldi	r26, 0x0B	; 11
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e3 e7       	ldi	r30, 0x73	; 115
    1ce0:	fe e0       	ldi	r31, 0x0E	; 14
    1ce2:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__prologue_saves__>
    1ce6:	3c 01       	movw	r6, r24
    1ce8:	2b 01       	movw	r4, r22
    1cea:	5a 01       	movw	r10, r20
    1cec:	fc 01       	movw	r30, r24
    1cee:	17 82       	std	Z+7, r1	; 0x07
    1cf0:	16 82       	std	Z+6, r1	; 0x06
    1cf2:	83 81       	ldd	r24, Z+3	; 0x03
    1cf4:	81 fd       	sbrc	r24, 1
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <vfprintf+0x24>
    1cf8:	6f ef       	ldi	r22, 0xFF	; 255
    1cfa:	7f ef       	ldi	r23, 0xFF	; 255
    1cfc:	c6 c1       	rjmp	.+908    	; 0x208a <vfprintf+0x3b0>
    1cfe:	9a e0       	ldi	r25, 0x0A	; 10
    1d00:	89 2e       	mov	r8, r25
    1d02:	1e 01       	movw	r2, r28
    1d04:	08 94       	sec
    1d06:	21 1c       	adc	r2, r1
    1d08:	31 1c       	adc	r3, r1
    1d0a:	f3 01       	movw	r30, r6
    1d0c:	23 81       	ldd	r18, Z+3	; 0x03
    1d0e:	f2 01       	movw	r30, r4
    1d10:	23 fd       	sbrc	r18, 3
    1d12:	85 91       	lpm	r24, Z+
    1d14:	23 ff       	sbrs	r18, 3
    1d16:	81 91       	ld	r24, Z+
    1d18:	2f 01       	movw	r4, r30
    1d1a:	88 23       	and	r24, r24
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <vfprintf+0x46>
    1d1e:	b2 c1       	rjmp	.+868    	; 0x2084 <vfprintf+0x3aa>
    1d20:	85 32       	cpi	r24, 0x25	; 37
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <vfprintf+0x58>
    1d24:	23 fd       	sbrc	r18, 3
    1d26:	85 91       	lpm	r24, Z+
    1d28:	23 ff       	sbrs	r18, 3
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	2f 01       	movw	r4, r30
    1d2e:	85 32       	cpi	r24, 0x25	; 37
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <vfprintf+0x62>
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	b3 01       	movw	r22, r6
    1d36:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1d3a:	e7 cf       	rjmp	.-50     	; 0x1d0a <vfprintf+0x30>
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	ff 24       	eor	r15, r15
    1d40:	ee 24       	eor	r14, r14
    1d42:	99 24       	eor	r9, r9
    1d44:	ff e1       	ldi	r31, 0x1F	; 31
    1d46:	ff 15       	cp	r31, r15
    1d48:	d0 f0       	brcs	.+52     	; 0x1d7e <vfprintf+0xa4>
    1d4a:	9b 32       	cpi	r25, 0x2B	; 43
    1d4c:	69 f0       	breq	.+26     	; 0x1d68 <vfprintf+0x8e>
    1d4e:	9c 32       	cpi	r25, 0x2C	; 44
    1d50:	28 f4       	brcc	.+10     	; 0x1d5c <vfprintf+0x82>
    1d52:	90 32       	cpi	r25, 0x20	; 32
    1d54:	59 f0       	breq	.+22     	; 0x1d6c <vfprintf+0x92>
    1d56:	93 32       	cpi	r25, 0x23	; 35
    1d58:	91 f4       	brne	.+36     	; 0x1d7e <vfprintf+0xa4>
    1d5a:	0e c0       	rjmp	.+28     	; 0x1d78 <vfprintf+0x9e>
    1d5c:	9d 32       	cpi	r25, 0x2D	; 45
    1d5e:	49 f0       	breq	.+18     	; 0x1d72 <vfprintf+0x98>
    1d60:	90 33       	cpi	r25, 0x30	; 48
    1d62:	69 f4       	brne	.+26     	; 0x1d7e <vfprintf+0xa4>
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	24 c0       	rjmp	.+72     	; 0x1db0 <vfprintf+0xd6>
    1d68:	52 e0       	ldi	r21, 0x02	; 2
    1d6a:	f5 2a       	or	r15, r21
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	f8 2a       	or	r15, r24
    1d70:	28 c0       	rjmp	.+80     	; 0x1dc2 <vfprintf+0xe8>
    1d72:	98 e0       	ldi	r25, 0x08	; 8
    1d74:	f9 2a       	or	r15, r25
    1d76:	25 c0       	rjmp	.+74     	; 0x1dc2 <vfprintf+0xe8>
    1d78:	e0 e1       	ldi	r30, 0x10	; 16
    1d7a:	fe 2a       	or	r15, r30
    1d7c:	22 c0       	rjmp	.+68     	; 0x1dc2 <vfprintf+0xe8>
    1d7e:	f7 fc       	sbrc	r15, 7
    1d80:	29 c0       	rjmp	.+82     	; 0x1dd4 <vfprintf+0xfa>
    1d82:	89 2f       	mov	r24, r25
    1d84:	80 53       	subi	r24, 0x30	; 48
    1d86:	8a 30       	cpi	r24, 0x0A	; 10
    1d88:	70 f4       	brcc	.+28     	; 0x1da6 <vfprintf+0xcc>
    1d8a:	f6 fe       	sbrs	r15, 6
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <vfprintf+0xbe>
    1d8e:	98 9c       	mul	r9, r8
    1d90:	90 2c       	mov	r9, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	98 0e       	add	r9, r24
    1d96:	15 c0       	rjmp	.+42     	; 0x1dc2 <vfprintf+0xe8>
    1d98:	e8 9c       	mul	r14, r8
    1d9a:	e0 2c       	mov	r14, r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	e8 0e       	add	r14, r24
    1da0:	f0 e2       	ldi	r31, 0x20	; 32
    1da2:	ff 2a       	or	r15, r31
    1da4:	0e c0       	rjmp	.+28     	; 0x1dc2 <vfprintf+0xe8>
    1da6:	9e 32       	cpi	r25, 0x2E	; 46
    1da8:	29 f4       	brne	.+10     	; 0x1db4 <vfprintf+0xda>
    1daa:	f6 fc       	sbrc	r15, 6
    1dac:	6b c1       	rjmp	.+726    	; 0x2084 <vfprintf+0x3aa>
    1dae:	40 e4       	ldi	r20, 0x40	; 64
    1db0:	f4 2a       	or	r15, r20
    1db2:	07 c0       	rjmp	.+14     	; 0x1dc2 <vfprintf+0xe8>
    1db4:	9c 36       	cpi	r25, 0x6C	; 108
    1db6:	19 f4       	brne	.+6      	; 0x1dbe <vfprintf+0xe4>
    1db8:	50 e8       	ldi	r21, 0x80	; 128
    1dba:	f5 2a       	or	r15, r21
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <vfprintf+0xe8>
    1dbe:	98 36       	cpi	r25, 0x68	; 104
    1dc0:	49 f4       	brne	.+18     	; 0x1dd4 <vfprintf+0xfa>
    1dc2:	f2 01       	movw	r30, r4
    1dc4:	23 fd       	sbrc	r18, 3
    1dc6:	95 91       	lpm	r25, Z+
    1dc8:	23 ff       	sbrs	r18, 3
    1dca:	91 91       	ld	r25, Z+
    1dcc:	2f 01       	movw	r4, r30
    1dce:	99 23       	and	r25, r25
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <vfprintf+0xfa>
    1dd2:	b8 cf       	rjmp	.-144    	; 0x1d44 <vfprintf+0x6a>
    1dd4:	89 2f       	mov	r24, r25
    1dd6:	85 54       	subi	r24, 0x45	; 69
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	18 f0       	brcs	.+6      	; 0x1de2 <vfprintf+0x108>
    1ddc:	80 52       	subi	r24, 0x20	; 32
    1dde:	83 30       	cpi	r24, 0x03	; 3
    1de0:	38 f4       	brcc	.+14     	; 0x1df0 <vfprintf+0x116>
    1de2:	44 e0       	ldi	r20, 0x04	; 4
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	a4 0e       	add	r10, r20
    1de8:	b5 1e       	adc	r11, r21
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	59 83       	std	Y+1, r21	; 0x01
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <vfprintf+0x134>
    1df0:	93 36       	cpi	r25, 0x63	; 99
    1df2:	31 f0       	breq	.+12     	; 0x1e00 <vfprintf+0x126>
    1df4:	93 37       	cpi	r25, 0x73	; 115
    1df6:	79 f0       	breq	.+30     	; 0x1e16 <vfprintf+0x13c>
    1df8:	93 35       	cpi	r25, 0x53	; 83
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <vfprintf+0x124>
    1dfc:	56 c0       	rjmp	.+172    	; 0x1eaa <vfprintf+0x1d0>
    1dfe:	20 c0       	rjmp	.+64     	; 0x1e40 <vfprintf+0x166>
    1e00:	f5 01       	movw	r30, r10
    1e02:	80 81       	ld	r24, Z
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	42 e0       	ldi	r20, 0x02	; 2
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	a4 0e       	add	r10, r20
    1e0c:	b5 1e       	adc	r11, r21
    1e0e:	61 01       	movw	r12, r2
    1e10:	01 e0       	ldi	r16, 0x01	; 1
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	12 c0       	rjmp	.+36     	; 0x1e3a <vfprintf+0x160>
    1e16:	f5 01       	movw	r30, r10
    1e18:	c0 80       	ld	r12, Z
    1e1a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e1c:	f6 fc       	sbrc	r15, 6
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <vfprintf+0x14c>
    1e20:	6f ef       	ldi	r22, 0xFF	; 255
    1e22:	7f ef       	ldi	r23, 0xFF	; 255
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <vfprintf+0x150>
    1e26:	69 2d       	mov	r22, r9
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	42 e0       	ldi	r20, 0x02	; 2
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	a4 0e       	add	r10, r20
    1e30:	b5 1e       	adc	r11, r21
    1e32:	c6 01       	movw	r24, r12
    1e34:	0e 94 6f 10 	call	0x20de	; 0x20de <strnlen>
    1e38:	8c 01       	movw	r16, r24
    1e3a:	5f e7       	ldi	r21, 0x7F	; 127
    1e3c:	f5 22       	and	r15, r21
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <vfprintf+0x18e>
    1e40:	f5 01       	movw	r30, r10
    1e42:	c0 80       	ld	r12, Z
    1e44:	d1 80       	ldd	r13, Z+1	; 0x01
    1e46:	f6 fc       	sbrc	r15, 6
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <vfprintf+0x176>
    1e4a:	6f ef       	ldi	r22, 0xFF	; 255
    1e4c:	7f ef       	ldi	r23, 0xFF	; 255
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <vfprintf+0x17a>
    1e50:	69 2d       	mov	r22, r9
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	42 e0       	ldi	r20, 0x02	; 2
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	a4 0e       	add	r10, r20
    1e5a:	b5 1e       	adc	r11, r21
    1e5c:	c6 01       	movw	r24, r12
    1e5e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <strnlen_P>
    1e62:	8c 01       	movw	r16, r24
    1e64:	50 e8       	ldi	r21, 0x80	; 128
    1e66:	f5 2a       	or	r15, r21
    1e68:	f3 fe       	sbrs	r15, 3
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <vfprintf+0x1a0>
    1e6c:	1a c0       	rjmp	.+52     	; 0x1ea2 <vfprintf+0x1c8>
    1e6e:	80 e2       	ldi	r24, 0x20	; 32
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	b3 01       	movw	r22, r6
    1e74:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1e78:	ea 94       	dec	r14
    1e7a:	8e 2d       	mov	r24, r14
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	08 17       	cp	r16, r24
    1e80:	19 07       	cpc	r17, r25
    1e82:	a8 f3       	brcs	.-22     	; 0x1e6e <vfprintf+0x194>
    1e84:	0e c0       	rjmp	.+28     	; 0x1ea2 <vfprintf+0x1c8>
    1e86:	f6 01       	movw	r30, r12
    1e88:	f7 fc       	sbrc	r15, 7
    1e8a:	85 91       	lpm	r24, Z+
    1e8c:	f7 fe       	sbrs	r15, 7
    1e8e:	81 91       	ld	r24, Z+
    1e90:	6f 01       	movw	r12, r30
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	b3 01       	movw	r22, r6
    1e96:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1e9a:	e1 10       	cpse	r14, r1
    1e9c:	ea 94       	dec	r14
    1e9e:	01 50       	subi	r16, 0x01	; 1
    1ea0:	10 40       	sbci	r17, 0x00	; 0
    1ea2:	01 15       	cp	r16, r1
    1ea4:	11 05       	cpc	r17, r1
    1ea6:	79 f7       	brne	.-34     	; 0x1e86 <vfprintf+0x1ac>
    1ea8:	ea c0       	rjmp	.+468    	; 0x207e <vfprintf+0x3a4>
    1eaa:	94 36       	cpi	r25, 0x64	; 100
    1eac:	11 f0       	breq	.+4      	; 0x1eb2 <vfprintf+0x1d8>
    1eae:	99 36       	cpi	r25, 0x69	; 105
    1eb0:	69 f5       	brne	.+90     	; 0x1f0c <vfprintf+0x232>
    1eb2:	f7 fe       	sbrs	r15, 7
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <vfprintf+0x1ec>
    1eb6:	f5 01       	movw	r30, r10
    1eb8:	20 81       	ld	r18, Z
    1eba:	31 81       	ldd	r19, Z+1	; 0x01
    1ebc:	42 81       	ldd	r20, Z+2	; 0x02
    1ebe:	53 81       	ldd	r21, Z+3	; 0x03
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <vfprintf+0x200>
    1ec6:	f5 01       	movw	r30, r10
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	9c 01       	movw	r18, r24
    1ece:	44 27       	eor	r20, r20
    1ed0:	37 fd       	sbrc	r19, 7
    1ed2:	40 95       	com	r20
    1ed4:	54 2f       	mov	r21, r20
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a8 0e       	add	r10, r24
    1edc:	b9 1e       	adc	r11, r25
    1ede:	9f e6       	ldi	r25, 0x6F	; 111
    1ee0:	f9 22       	and	r15, r25
    1ee2:	57 ff       	sbrs	r21, 7
    1ee4:	09 c0       	rjmp	.+18     	; 0x1ef8 <vfprintf+0x21e>
    1ee6:	50 95       	com	r21
    1ee8:	40 95       	com	r20
    1eea:	30 95       	com	r19
    1eec:	21 95       	neg	r18
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	e0 e8       	ldi	r30, 0x80	; 128
    1ef6:	fe 2a       	or	r15, r30
    1ef8:	ca 01       	movw	r24, r20
    1efa:	b9 01       	movw	r22, r18
    1efc:	a1 01       	movw	r20, r2
    1efe:	2a e0       	ldi	r18, 0x0A	; 10
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	0e 94 a6 10 	call	0x214c	; 0x214c <__ultoa_invert>
    1f06:	d8 2e       	mov	r13, r24
    1f08:	d2 18       	sub	r13, r2
    1f0a:	40 c0       	rjmp	.+128    	; 0x1f8c <vfprintf+0x2b2>
    1f0c:	95 37       	cpi	r25, 0x75	; 117
    1f0e:	29 f4       	brne	.+10     	; 0x1f1a <vfprintf+0x240>
    1f10:	1f 2d       	mov	r17, r15
    1f12:	1f 7e       	andi	r17, 0xEF	; 239
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	1d c0       	rjmp	.+58     	; 0x1f54 <vfprintf+0x27a>
    1f1a:	1f 2d       	mov	r17, r15
    1f1c:	19 7f       	andi	r17, 0xF9	; 249
    1f1e:	9f 36       	cpi	r25, 0x6F	; 111
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <vfprintf+0x260>
    1f22:	90 37       	cpi	r25, 0x70	; 112
    1f24:	20 f4       	brcc	.+8      	; 0x1f2e <vfprintf+0x254>
    1f26:	98 35       	cpi	r25, 0x58	; 88
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <vfprintf+0x252>
    1f2a:	ac c0       	rjmp	.+344    	; 0x2084 <vfprintf+0x3aa>
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <vfprintf+0x272>
    1f2e:	90 37       	cpi	r25, 0x70	; 112
    1f30:	39 f0       	breq	.+14     	; 0x1f40 <vfprintf+0x266>
    1f32:	98 37       	cpi	r25, 0x78	; 120
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <vfprintf+0x25e>
    1f36:	a6 c0       	rjmp	.+332    	; 0x2084 <vfprintf+0x3aa>
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <vfprintf+0x268>
    1f3a:	28 e0       	ldi	r18, 0x08	; 8
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	0a c0       	rjmp	.+20     	; 0x1f54 <vfprintf+0x27a>
    1f40:	10 61       	ori	r17, 0x10	; 16
    1f42:	14 fd       	sbrc	r17, 4
    1f44:	14 60       	ori	r17, 0x04	; 4
    1f46:	20 e1       	ldi	r18, 0x10	; 16
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <vfprintf+0x27a>
    1f4c:	14 fd       	sbrc	r17, 4
    1f4e:	16 60       	ori	r17, 0x06	; 6
    1f50:	20 e1       	ldi	r18, 0x10	; 16
    1f52:	32 e0       	ldi	r19, 0x02	; 2
    1f54:	17 ff       	sbrs	r17, 7
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <vfprintf+0x28e>
    1f58:	f5 01       	movw	r30, r10
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	44 e0       	ldi	r20, 0x04	; 4
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <vfprintf+0x29e>
    1f68:	f5 01       	movw	r30, r10
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	bc 01       	movw	r22, r24
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	42 e0       	ldi	r20, 0x02	; 2
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	a4 0e       	add	r10, r20
    1f7a:	b5 1e       	adc	r11, r21
    1f7c:	a1 01       	movw	r20, r2
    1f7e:	0e 94 a6 10 	call	0x214c	; 0x214c <__ultoa_invert>
    1f82:	d8 2e       	mov	r13, r24
    1f84:	d2 18       	sub	r13, r2
    1f86:	8f e7       	ldi	r24, 0x7F	; 127
    1f88:	f8 2e       	mov	r15, r24
    1f8a:	f1 22       	and	r15, r17
    1f8c:	f6 fe       	sbrs	r15, 6
    1f8e:	0b c0       	rjmp	.+22     	; 0x1fa6 <vfprintf+0x2cc>
    1f90:	5e ef       	ldi	r21, 0xFE	; 254
    1f92:	f5 22       	and	r15, r21
    1f94:	d9 14       	cp	r13, r9
    1f96:	38 f4       	brcc	.+14     	; 0x1fa6 <vfprintf+0x2cc>
    1f98:	f4 fe       	sbrs	r15, 4
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <vfprintf+0x2d0>
    1f9c:	f2 fc       	sbrc	r15, 2
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <vfprintf+0x2d0>
    1fa0:	8f ee       	ldi	r24, 0xEF	; 239
    1fa2:	f8 22       	and	r15, r24
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <vfprintf+0x2d0>
    1fa6:	1d 2d       	mov	r17, r13
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <vfprintf+0x2d2>
    1faa:	19 2d       	mov	r17, r9
    1fac:	f4 fe       	sbrs	r15, 4
    1fae:	0d c0       	rjmp	.+26     	; 0x1fca <vfprintf+0x2f0>
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ed 0d       	add	r30, r13
    1fb4:	f1 1d       	adc	r31, r1
    1fb6:	80 81       	ld	r24, Z
    1fb8:	80 33       	cpi	r24, 0x30	; 48
    1fba:	19 f4       	brne	.+6      	; 0x1fc2 <vfprintf+0x2e8>
    1fbc:	99 ee       	ldi	r25, 0xE9	; 233
    1fbe:	f9 22       	and	r15, r25
    1fc0:	08 c0       	rjmp	.+16     	; 0x1fd2 <vfprintf+0x2f8>
    1fc2:	1f 5f       	subi	r17, 0xFF	; 255
    1fc4:	f2 fe       	sbrs	r15, 2
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <vfprintf+0x2f8>
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <vfprintf+0x2f6>
    1fca:	8f 2d       	mov	r24, r15
    1fcc:	86 78       	andi	r24, 0x86	; 134
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <vfprintf+0x2f8>
    1fd0:	1f 5f       	subi	r17, 0xFF	; 255
    1fd2:	0f 2d       	mov	r16, r15
    1fd4:	f3 fc       	sbrc	r15, 3
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <vfprintf+0x326>
    1fd8:	f0 fe       	sbrs	r15, 0
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <vfprintf+0x320>
    1fdc:	1e 15       	cp	r17, r14
    1fde:	10 f0       	brcs	.+4      	; 0x1fe4 <vfprintf+0x30a>
    1fe0:	9d 2c       	mov	r9, r13
    1fe2:	0b c0       	rjmp	.+22     	; 0x1ffa <vfprintf+0x320>
    1fe4:	9d 2c       	mov	r9, r13
    1fe6:	9e 0c       	add	r9, r14
    1fe8:	91 1a       	sub	r9, r17
    1fea:	1e 2d       	mov	r17, r14
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <vfprintf+0x320>
    1fee:	80 e2       	ldi	r24, 0x20	; 32
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	b3 01       	movw	r22, r6
    1ff4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    1ff8:	1f 5f       	subi	r17, 0xFF	; 255
    1ffa:	1e 15       	cp	r17, r14
    1ffc:	c0 f3       	brcs	.-16     	; 0x1fee <vfprintf+0x314>
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <vfprintf+0x32e>
    2000:	1e 15       	cp	r17, r14
    2002:	10 f4       	brcc	.+4      	; 0x2008 <vfprintf+0x32e>
    2004:	e1 1a       	sub	r14, r17
    2006:	01 c0       	rjmp	.+2      	; 0x200a <vfprintf+0x330>
    2008:	ee 24       	eor	r14, r14
    200a:	04 ff       	sbrs	r16, 4
    200c:	0f c0       	rjmp	.+30     	; 0x202c <vfprintf+0x352>
    200e:	80 e3       	ldi	r24, 0x30	; 48
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	b3 01       	movw	r22, r6
    2014:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    2018:	02 ff       	sbrs	r16, 2
    201a:	1d c0       	rjmp	.+58     	; 0x2056 <vfprintf+0x37c>
    201c:	01 fd       	sbrc	r16, 1
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <vfprintf+0x34c>
    2020:	88 e7       	ldi	r24, 0x78	; 120
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e c0       	rjmp	.+28     	; 0x2042 <vfprintf+0x368>
    2026:	88 e5       	ldi	r24, 0x58	; 88
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0b c0       	rjmp	.+22     	; 0x2042 <vfprintf+0x368>
    202c:	80 2f       	mov	r24, r16
    202e:	86 78       	andi	r24, 0x86	; 134
    2030:	91 f0       	breq	.+36     	; 0x2056 <vfprintf+0x37c>
    2032:	01 ff       	sbrs	r16, 1
    2034:	02 c0       	rjmp	.+4      	; 0x203a <vfprintf+0x360>
    2036:	8b e2       	ldi	r24, 0x2B	; 43
    2038:	01 c0       	rjmp	.+2      	; 0x203c <vfprintf+0x362>
    203a:	80 e2       	ldi	r24, 0x20	; 32
    203c:	f7 fc       	sbrc	r15, 7
    203e:	8d e2       	ldi	r24, 0x2D	; 45
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	b3 01       	movw	r22, r6
    2044:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    2048:	06 c0       	rjmp	.+12     	; 0x2056 <vfprintf+0x37c>
    204a:	80 e3       	ldi	r24, 0x30	; 48
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	b3 01       	movw	r22, r6
    2050:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    2054:	9a 94       	dec	r9
    2056:	d9 14       	cp	r13, r9
    2058:	c0 f3       	brcs	.-16     	; 0x204a <vfprintf+0x370>
    205a:	da 94       	dec	r13
    205c:	f1 01       	movw	r30, r2
    205e:	ed 0d       	add	r30, r13
    2060:	f1 1d       	adc	r31, r1
    2062:	80 81       	ld	r24, Z
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	b3 01       	movw	r22, r6
    2068:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    206c:	dd 20       	and	r13, r13
    206e:	a9 f7       	brne	.-22     	; 0x205a <vfprintf+0x380>
    2070:	06 c0       	rjmp	.+12     	; 0x207e <vfprintf+0x3a4>
    2072:	80 e2       	ldi	r24, 0x20	; 32
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	b3 01       	movw	r22, r6
    2078:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <fputc>
    207c:	ea 94       	dec	r14
    207e:	ee 20       	and	r14, r14
    2080:	c1 f7       	brne	.-16     	; 0x2072 <vfprintf+0x398>
    2082:	43 ce       	rjmp	.-890    	; 0x1d0a <vfprintf+0x30>
    2084:	f3 01       	movw	r30, r6
    2086:	66 81       	ldd	r22, Z+6	; 0x06
    2088:	77 81       	ldd	r23, Z+7	; 0x07
    208a:	cb 01       	movw	r24, r22
    208c:	2b 96       	adiw	r28, 0x0b	; 11
    208e:	e2 e1       	ldi	r30, 0x12	; 18
    2090:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__epilogue_restores__>

00002094 <__eerd_byte_m328p>:
    2094:	f9 99       	sbic	0x1f, 1	; 31
    2096:	fe cf       	rjmp	.-4      	; 0x2094 <__eerd_byte_m328p>
    2098:	92 bd       	out	0x22, r25	; 34
    209a:	81 bd       	out	0x21, r24	; 33
    209c:	f8 9a       	sbi	0x1f, 0	; 31
    209e:	99 27       	eor	r25, r25
    20a0:	80 b5       	in	r24, 0x20	; 32
    20a2:	08 95       	ret

000020a4 <__eeupd_byte_m328p>:
    20a4:	26 2f       	mov	r18, r22

000020a6 <__eeupd_r18_m328p>:
    20a6:	f9 99       	sbic	0x1f, 1	; 31
    20a8:	fe cf       	rjmp	.-4      	; 0x20a6 <__eeupd_r18_m328p>
    20aa:	92 bd       	out	0x22, r25	; 34
    20ac:	81 bd       	out	0x21, r24	; 33
    20ae:	f8 9a       	sbi	0x1f, 0	; 31
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	00 b4       	in	r0, 0x20	; 32
    20b4:	02 16       	cp	r0, r18
    20b6:	39 f0       	breq	.+14     	; 0x20c6 <__eeupd_r18_m328p+0x20>
    20b8:	1f ba       	out	0x1f, r1	; 31
    20ba:	20 bd       	out	0x20, r18	; 32
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	fa 9a       	sbi	0x1f, 2	; 31
    20c2:	f9 9a       	sbi	0x1f, 1	; 31
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	08 95       	ret

000020c8 <strnlen_P>:
    20c8:	fc 01       	movw	r30, r24
    20ca:	05 90       	lpm	r0, Z+
    20cc:	61 50       	subi	r22, 0x01	; 1
    20ce:	70 40       	sbci	r23, 0x00	; 0
    20d0:	01 10       	cpse	r0, r1
    20d2:	d8 f7       	brcc	.-10     	; 0x20ca <strnlen_P+0x2>
    20d4:	80 95       	com	r24
    20d6:	90 95       	com	r25
    20d8:	8e 0f       	add	r24, r30
    20da:	9f 1f       	adc	r25, r31
    20dc:	08 95       	ret

000020de <strnlen>:
    20de:	fc 01       	movw	r30, r24
    20e0:	61 50       	subi	r22, 0x01	; 1
    20e2:	70 40       	sbci	r23, 0x00	; 0
    20e4:	01 90       	ld	r0, Z+
    20e6:	01 10       	cpse	r0, r1
    20e8:	d8 f7       	brcc	.-10     	; 0x20e0 <strnlen+0x2>
    20ea:	80 95       	com	r24
    20ec:	90 95       	com	r25
    20ee:	8e 0f       	add	r24, r30
    20f0:	9f 1f       	adc	r25, r31
    20f2:	08 95       	ret

000020f4 <fputc>:
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	8c 01       	movw	r16, r24
    20fe:	eb 01       	movw	r28, r22
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	81 ff       	sbrs	r24, 1
    2104:	1b c0       	rjmp	.+54     	; 0x213c <fputc+0x48>
    2106:	82 ff       	sbrs	r24, 2
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <fputc+0x30>
    210a:	2e 81       	ldd	r18, Y+6	; 0x06
    210c:	3f 81       	ldd	r19, Y+7	; 0x07
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	28 17       	cp	r18, r24
    2114:	39 07       	cpc	r19, r25
    2116:	64 f4       	brge	.+24     	; 0x2130 <fputc+0x3c>
    2118:	e8 81       	ld	r30, Y
    211a:	f9 81       	ldd	r31, Y+1	; 0x01
    211c:	01 93       	st	Z+, r16
    211e:	f9 83       	std	Y+1, r31	; 0x01
    2120:	e8 83       	st	Y, r30
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <fputc+0x3c>
    2124:	e8 85       	ldd	r30, Y+8	; 0x08
    2126:	f9 85       	ldd	r31, Y+9	; 0x09
    2128:	80 2f       	mov	r24, r16
    212a:	09 95       	icall
    212c:	89 2b       	or	r24, r25
    212e:	31 f4       	brne	.+12     	; 0x213c <fputc+0x48>
    2130:	8e 81       	ldd	r24, Y+6	; 0x06
    2132:	9f 81       	ldd	r25, Y+7	; 0x07
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	9f 83       	std	Y+7, r25	; 0x07
    2138:	8e 83       	std	Y+6, r24	; 0x06
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <fputc+0x4c>
    213c:	0f ef       	ldi	r16, 0xFF	; 255
    213e:	1f ef       	ldi	r17, 0xFF	; 255
    2140:	c8 01       	movw	r24, r16
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <__ultoa_invert>:
    214c:	fa 01       	movw	r30, r20
    214e:	aa 27       	eor	r26, r26
    2150:	28 30       	cpi	r18, 0x08	; 8
    2152:	51 f1       	breq	.+84     	; 0x21a8 <__ultoa_invert+0x5c>
    2154:	20 31       	cpi	r18, 0x10	; 16
    2156:	81 f1       	breq	.+96     	; 0x21b8 <__ultoa_invert+0x6c>
    2158:	e8 94       	clt
    215a:	6f 93       	push	r22
    215c:	6e 7f       	andi	r22, 0xFE	; 254
    215e:	6e 5f       	subi	r22, 0xFE	; 254
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	8f 4f       	sbci	r24, 0xFF	; 255
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	af 4f       	sbci	r26, 0xFF	; 255
    2168:	b1 e0       	ldi	r27, 0x01	; 1
    216a:	3e d0       	rcall	.+124    	; 0x21e8 <__ultoa_invert+0x9c>
    216c:	b4 e0       	ldi	r27, 0x04	; 4
    216e:	3c d0       	rcall	.+120    	; 0x21e8 <__ultoa_invert+0x9c>
    2170:	67 0f       	add	r22, r23
    2172:	78 1f       	adc	r23, r24
    2174:	89 1f       	adc	r24, r25
    2176:	9a 1f       	adc	r25, r26
    2178:	a1 1d       	adc	r26, r1
    217a:	68 0f       	add	r22, r24
    217c:	79 1f       	adc	r23, r25
    217e:	8a 1f       	adc	r24, r26
    2180:	91 1d       	adc	r25, r1
    2182:	a1 1d       	adc	r26, r1
    2184:	6a 0f       	add	r22, r26
    2186:	71 1d       	adc	r23, r1
    2188:	81 1d       	adc	r24, r1
    218a:	91 1d       	adc	r25, r1
    218c:	a1 1d       	adc	r26, r1
    218e:	20 d0       	rcall	.+64     	; 0x21d0 <__ultoa_invert+0x84>
    2190:	09 f4       	brne	.+2      	; 0x2194 <__ultoa_invert+0x48>
    2192:	68 94       	set
    2194:	3f 91       	pop	r19
    2196:	2a e0       	ldi	r18, 0x0A	; 10
    2198:	26 9f       	mul	r18, r22
    219a:	11 24       	eor	r1, r1
    219c:	30 19       	sub	r19, r0
    219e:	30 5d       	subi	r19, 0xD0	; 208
    21a0:	31 93       	st	Z+, r19
    21a2:	de f6       	brtc	.-74     	; 0x215a <__ultoa_invert+0xe>
    21a4:	cf 01       	movw	r24, r30
    21a6:	08 95       	ret
    21a8:	46 2f       	mov	r20, r22
    21aa:	47 70       	andi	r20, 0x07	; 7
    21ac:	40 5d       	subi	r20, 0xD0	; 208
    21ae:	41 93       	st	Z+, r20
    21b0:	b3 e0       	ldi	r27, 0x03	; 3
    21b2:	0f d0       	rcall	.+30     	; 0x21d2 <__ultoa_invert+0x86>
    21b4:	c9 f7       	brne	.-14     	; 0x21a8 <__ultoa_invert+0x5c>
    21b6:	f6 cf       	rjmp	.-20     	; 0x21a4 <__ultoa_invert+0x58>
    21b8:	46 2f       	mov	r20, r22
    21ba:	4f 70       	andi	r20, 0x0F	; 15
    21bc:	40 5d       	subi	r20, 0xD0	; 208
    21be:	4a 33       	cpi	r20, 0x3A	; 58
    21c0:	18 f0       	brcs	.+6      	; 0x21c8 <__ultoa_invert+0x7c>
    21c2:	49 5d       	subi	r20, 0xD9	; 217
    21c4:	31 fd       	sbrc	r19, 1
    21c6:	40 52       	subi	r20, 0x20	; 32
    21c8:	41 93       	st	Z+, r20
    21ca:	02 d0       	rcall	.+4      	; 0x21d0 <__ultoa_invert+0x84>
    21cc:	a9 f7       	brne	.-22     	; 0x21b8 <__ultoa_invert+0x6c>
    21ce:	ea cf       	rjmp	.-44     	; 0x21a4 <__ultoa_invert+0x58>
    21d0:	b4 e0       	ldi	r27, 0x04	; 4
    21d2:	a6 95       	lsr	r26
    21d4:	97 95       	ror	r25
    21d6:	87 95       	ror	r24
    21d8:	77 95       	ror	r23
    21da:	67 95       	ror	r22
    21dc:	ba 95       	dec	r27
    21de:	c9 f7       	brne	.-14     	; 0x21d2 <__ultoa_invert+0x86>
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	61 05       	cpc	r22, r1
    21e4:	71 05       	cpc	r23, r1
    21e6:	08 95       	ret
    21e8:	9b 01       	movw	r18, r22
    21ea:	ac 01       	movw	r20, r24
    21ec:	0a 2e       	mov	r0, r26
    21ee:	06 94       	lsr	r0
    21f0:	57 95       	ror	r21
    21f2:	47 95       	ror	r20
    21f4:	37 95       	ror	r19
    21f6:	27 95       	ror	r18
    21f8:	ba 95       	dec	r27
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <__ultoa_invert+0xa2>
    21fc:	62 0f       	add	r22, r18
    21fe:	73 1f       	adc	r23, r19
    2200:	84 1f       	adc	r24, r20
    2202:	95 1f       	adc	r25, r21
    2204:	a0 1d       	adc	r26, r0
    2206:	08 95       	ret

00002208 <__prologue_saves__>:
    2208:	2f 92       	push	r2
    220a:	3f 92       	push	r3
    220c:	4f 92       	push	r4
    220e:	5f 92       	push	r5
    2210:	6f 92       	push	r6
    2212:	7f 92       	push	r7
    2214:	8f 92       	push	r8
    2216:	9f 92       	push	r9
    2218:	af 92       	push	r10
    221a:	bf 92       	push	r11
    221c:	cf 92       	push	r12
    221e:	df 92       	push	r13
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	ca 1b       	sub	r28, r26
    2232:	db 0b       	sbc	r29, r27
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	09 94       	ijmp

00002240 <__epilogue_restores__>:
    2240:	2a 88       	ldd	r2, Y+18	; 0x12
    2242:	39 88       	ldd	r3, Y+17	; 0x11
    2244:	48 88       	ldd	r4, Y+16	; 0x10
    2246:	5f 84       	ldd	r5, Y+15	; 0x0f
    2248:	6e 84       	ldd	r6, Y+14	; 0x0e
    224a:	7d 84       	ldd	r7, Y+13	; 0x0d
    224c:	8c 84       	ldd	r8, Y+12	; 0x0c
    224e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2250:	aa 84       	ldd	r10, Y+10	; 0x0a
    2252:	b9 84       	ldd	r11, Y+9	; 0x09
    2254:	c8 84       	ldd	r12, Y+8	; 0x08
    2256:	df 80       	ldd	r13, Y+7	; 0x07
    2258:	ee 80       	ldd	r14, Y+6	; 0x06
    225a:	fd 80       	ldd	r15, Y+5	; 0x05
    225c:	0c 81       	ldd	r16, Y+4	; 0x04
    225e:	1b 81       	ldd	r17, Y+3	; 0x03
    2260:	aa 81       	ldd	r26, Y+2	; 0x02
    2262:	b9 81       	ldd	r27, Y+1	; 0x01
    2264:	ce 0f       	add	r28, r30
    2266:	d1 1d       	adc	r29, r1
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	ed 01       	movw	r28, r26
    2274:	08 95       	ret

00002276 <_exit>:
    2276:	f8 94       	cli

00002278 <__stop_program>:
    2278:	ff cf       	rjmp	.-2      	; 0x2278 <__stop_program>
