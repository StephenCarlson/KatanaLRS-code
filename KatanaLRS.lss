
KatanaLRS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  00001d9e  00001e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  008002b4  008002b4  00001fe6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000223  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011be  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f1  00000000  00000000  000033e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000111c  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  000048f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  00004b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009bc  00000000  00000000  00004f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000590e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_1>
       8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_5>
      18:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_11>
      30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_12>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e9       	ldi	r30, 0x9E	; 158
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 3b       	cpi	r26, 0xB4	; 180
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a4 eb       	ldi	r26, 0xB4	; 180
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 35       	cpi	r26, 0x50	; 80
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 00 09 	call	0x1200	; 0x1200 <main>
      9e:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <startI2C>:
void stopI2C(void);
uint8_t writeI2C(uint8_t);
uint8_t readI2C(uint8_t);


uint8_t startI2C(uint8_t address, uint8_t intent){ // i.e. ITG3200ADDR, WRITE
      a6:	28 2f       	mov	r18, r24
	uint16_t time = TCNT1;
      a8:	e0 91 84 00 	lds	r30, 0x0084
      ac:	f0 91 85 00 	lds	r31, 0x0085
	//while( !(TWCR &(1<<TWINT)));			// Avoid Crashing
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Send Start
      b0:	84 ea       	ldi	r24, 0xA4	; 164
      b2:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
      b6:	af 01       	movw	r20, r30
      b8:	4e 5c       	subi	r20, 0xCE	; 206
      ba:	5f 4f       	sbci	r21, 0xFF	; 255
      bc:	07 c0       	rjmp	.+14     	; 0xcc <startI2C+0x26>
      be:	80 91 84 00 	lds	r24, 0x0084
      c2:	90 91 85 00 	lds	r25, 0x0085
      c6:	84 17       	cp	r24, r20
      c8:	95 07       	cpc	r25, r21
      ca:	21 f0       	breq	.+8      	; 0xd4 <startI2C+0x2e>

uint8_t startI2C(uint8_t address, uint8_t intent){ // i.e. ITG3200ADDR, WRITE
	uint16_t time = TCNT1;
	//while( !(TWCR &(1<<TWINT)));			// Avoid Crashing
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Send Start
	while( !(TWCR &(1<<TWINT))){
      cc:	80 91 bc 00 	lds	r24, 0x00BC
      d0:	87 ff       	sbrs	r24, 7
      d2:	f5 cf       	rjmp	.-22     	; 0xbe <startI2C+0x18>
		if(TCNT1== (time+50)) break;
	} //printf("ST1: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_START) printf("BadStart\n");
#endif
	TWDR = ((address<<1) | (intent & 0x01));			// Hail Slave Device
      d4:	61 70       	andi	r22, 0x01	; 1
      d6:	22 0f       	add	r18, r18
      d8:	26 2b       	or	r18, r22
      da:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT)|(1<<TWEN);			// Engage
      de:	84 e8       	ldi	r24, 0x84	; 132
      e0:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
      e4:	9f 01       	movw	r18, r30
      e6:	2e 5c       	subi	r18, 0xCE	; 206
      e8:	3f 4f       	sbci	r19, 0xFF	; 255
      ea:	07 c0       	rjmp	.+14     	; 0xfa <startI2C+0x54>
      ec:	80 91 84 00 	lds	r24, 0x0084
      f0:	90 91 85 00 	lds	r25, 0x0085
      f4:	82 17       	cp	r24, r18
      f6:	93 07       	cpc	r25, r19
      f8:	21 f0       	breq	.+8      	; 0x102 <startI2C+0x5c>
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_START) printf("BadStart\n");
#endif
	TWDR = ((address<<1) | (intent & 0x01));			// Hail Slave Device
	TWCR = (1<<TWINT)|(1<<TWEN);			// Engage
	while( !(TWCR &(1<<TWINT))){
      fa:	80 91 bc 00 	lds	r24, 0x00BC
      fe:	87 ff       	sbrs	r24, 7
     100:	f5 cf       	rjmp	.-22     	; 0xec <startI2C+0x46>
		if(TCNT1== (time+50)) break;
	} //; //printf("ST2: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS == TW_NO_INFO || TW_STATUS == TW_BUS_ERROR) printf("BadHold\n");
#endif
	return TW_STATUS;
     102:	80 91 b9 00 	lds	r24, 0x00B9
}
     106:	88 7f       	andi	r24, 0xF8	; 248
     108:	08 95       	ret

0000010a <stopI2C>:

void stopI2C(void){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Send Stop
     10a:	84 e9       	ldi	r24, 0x94	; 148
     10c:	80 93 bc 00 	sts	0x00BC, r24
	while(TWCR &(1<<TWSTO)); //printf("SP: %X\n",TWSR);
     110:	80 91 bc 00 	lds	r24, 0x00BC
     114:	84 fd       	sbrc	r24, 4
     116:	fc cf       	rjmp	.-8      	; 0x110 <stopI2C+0x6>
}
     118:	08 95       	ret

0000011a <writeI2C>:

uint8_t writeI2C(uint8_t data){
	uint16_t time = TCNT1;
     11a:	20 91 84 00 	lds	r18, 0x0084
     11e:	30 91 85 00 	lds	r19, 0x0085
	TWDR = data;							// Data
     122:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);			// Enable
     126:	84 e8       	ldi	r24, 0x84	; 132
     128:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
     12c:	2e 5c       	subi	r18, 0xCE	; 206
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	07 c0       	rjmp	.+14     	; 0x140 <writeI2C+0x26>
     132:	80 91 84 00 	lds	r24, 0x0084
     136:	90 91 85 00 	lds	r25, 0x0085
     13a:	82 17       	cp	r24, r18
     13c:	93 07       	cpc	r25, r19
     13e:	21 f0       	breq	.+8      	; 0x148 <writeI2C+0x2e>

uint8_t writeI2C(uint8_t data){
	uint16_t time = TCNT1;
	TWDR = data;							// Data
	TWCR = (1<<TWINT)|(1<<TWEN);			// Enable
	while( !(TWCR &(1<<TWINT))){
     140:	80 91 bc 00 	lds	r24, 0x00BC
     144:	87 ff       	sbrs	r24, 7
     146:	f5 cf       	rjmp	.-22     	; 0x132 <writeI2C+0x18>
		if(TCNT1== (time+50)) break;
	} //; //printf("WT: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_MT_DATA_ACK) printf("BadFrame\n");
#endif
	return TW_STATUS;
     148:	80 91 b9 00 	lds	r24, 0x00B9
}
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	08 95       	ret

00000150 <readI2C>:

uint8_t readI2C(uint8_t ackType){
	uint16_t time = TCNT1;
     150:	20 91 84 00 	lds	r18, 0x0084
     154:	30 91 85 00 	lds	r19, 0x0085
	//printf("TWCR: %X", (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA));
	TWCR = (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA);
     158:	82 95       	swap	r24
     15a:	88 0f       	add	r24, r24
     15c:	88 0f       	add	r24, r24
     15e:	80 7c       	andi	r24, 0xC0	; 192
     160:	84 68       	ori	r24, 0x84	; 132
     162:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
     166:	2e 5c       	subi	r18, 0xCE	; 206
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	07 c0       	rjmp	.+14     	; 0x17a <readI2C+0x2a>
     16c:	80 91 84 00 	lds	r24, 0x0084
     170:	90 91 85 00 	lds	r25, 0x0085
     174:	82 17       	cp	r24, r18
     176:	93 07       	cpc	r25, r19
     178:	21 f0       	breq	.+8      	; 0x182 <readI2C+0x32>

uint8_t readI2C(uint8_t ackType){
	uint16_t time = TCNT1;
	//printf("TWCR: %X", (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA));
	TWCR = (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA);
	while( !(TWCR &(1<<TWINT))){
     17a:	80 91 bc 00 	lds	r24, 0x00BC
     17e:	87 ff       	sbrs	r24, 7
     180:	f5 cf       	rjmp	.-22     	; 0x16c <readI2C+0x1c>
		if(TCNT1== (time+50)) break;
	} //; //printf("RV: %X\n",TWSR);
	return TWDR;
     182:	80 91 bb 00 	lds	r24, 0x00BB
}
     186:	08 95       	ret

00000188 <transferSPI>:


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     188:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     18a:	0d b4       	in	r0, 0x2d	; 45
     18c:	07 fe       	sbrs	r0, 7
     18e:	fd cf       	rjmp	.-6      	; 0x18a <transferSPI+0x2>
	return SPDR;
     190:	8e b5       	in	r24, 0x2e	; 46
}
     192:	08 95       	ret

00000194 <__vector_1>:
	uint16_t sysVin;
	uint16_t atMega;
} volt;

// Interrupt Vectors (Listed in Priority Order)
ISR(INT0_vect){
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	11 24       	eor	r1, r1
     19e:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_INTx;
     1a0:	80 91 43 03 	lds	r24, 0x0343
     1a4:	83 7e       	andi	r24, 0xE3	; 227
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	80 93 43 03 	sts	0x0343, r24
	EIMSK = 0;
     1ac:	1d ba       	out	0x1d, r1	; 29
}
     1ae:	8f 91       	pop	r24
     1b0:	0f 90       	pop	r0
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	0f 90       	pop	r0
     1b6:	1f 90       	pop	r1
     1b8:	18 95       	reti

000001ba <__vector_2>:

ISR(INT1_vect){
     1ba:	1f 92       	push	r1
     1bc:	0f 92       	push	r0
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	0f 92       	push	r0
     1c2:	11 24       	eor	r1, r1
     1c4:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_INTx;
     1c6:	80 91 43 03 	lds	r24, 0x0343
     1ca:	83 7e       	andi	r24, 0xE3	; 227
     1cc:	84 60       	ori	r24, 0x04	; 4
     1ce:	80 93 43 03 	sts	0x0343, r24
	EIMSK = 0;
     1d2:	1d ba       	out	0x1d, r1	; 29
}
     1d4:	8f 91       	pop	r24
     1d6:	0f 90       	pop	r0
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	0f 90       	pop	r0
     1dc:	1f 90       	pop	r1
     1de:	18 95       	reti

000001e0 <__vector_5>:

ISR(PCINT2_vect){
     1e0:	1f 92       	push	r1
     1e2:	0f 92       	push	r0
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	0f 92       	push	r0
     1e8:	11 24       	eor	r1, r1
     1ea:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_UART;
     1ec:	80 91 43 03 	lds	r24, 0x0343
     1f0:	83 7e       	andi	r24, 0xE3	; 227
     1f2:	8c 60       	ori	r24, 0x0C	; 12
     1f4:	80 93 43 03 	sts	0x0343, r24
	PCICR = 0;
     1f8:	10 92 68 00 	sts	0x0068, r1
	PCMSK2 = 0;
     1fc:	10 92 6d 00 	sts	0x006D, r1
}
     200:	8f 91       	pop	r24
     202:	0f 90       	pop	r0
     204:	0f be       	out	0x3f, r0	; 63
     206:	0f 90       	pop	r0
     208:	1f 90       	pop	r1
     20a:	18 95       	reti

0000020c <__vector_6>:

ISR(WDT_vect){
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_WDT;
     218:	80 91 43 03 	lds	r24, 0x0343
     21c:	83 7e       	andi	r24, 0xE3	; 227
     21e:	88 60       	ori	r24, 0x08	; 8
     220:	80 93 43 03 	sts	0x0343, r24
}
     224:	8f 91       	pop	r24
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <__vector_11>:

ISR(TIMER1_COMPA_vect){
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_TIMER;
     23c:	80 91 43 03 	lds	r24, 0x0343
     240:	83 7e       	andi	r24, 0xE3	; 227
     242:	80 61       	ori	r24, 0x10	; 16
     244:	80 93 43 03 	sts	0x0343, r24
}
     248:	8f 91       	pop	r24
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <__vector_12>:

ISR(TIMER1_COMPB_vect){
     254:	1f 92       	push	r1
     256:	0f 92       	push	r0
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
}
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <__vector_16>:

ISR(TIMER0_OVF_vect){
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
}
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <__vector_21>:
		default:
			break;
	}	
}

ISR(ADC_vect){
     27c:	1f 92       	push	r1
     27e:	0f 92       	push	r0
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	8f 93       	push	r24
	sleep_disable();
     288:	83 b7       	in	r24, 0x33	; 51
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	83 bf       	out	0x33, r24	; 51
}
     28e:	8f 91       	pop	r24
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <atMegaInit>:
	
	return systemReturnState;
}

uint8_t atMegaInit(void){
	uint8_t startupStatus = MCUSR; //wdt_init(); //
     29a:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
     29c:	14 be       	out	0x34, r1	; 52
	WDTCSR |= _BV(WDCE) | _BV(WDE); // Three Options Below:
     29e:	e0 e6       	ldi	r30, 0x60	; 96
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	90 81       	ld	r25, Z
     2a4:	98 61       	ori	r25, 0x18	; 24
     2a6:	90 83       	st	Z, r25
	// Was this WDTCSR = _BV(WDIE) | _BV(WDP2) | _BV(WDP1) | _BV(WDE); // Hardwire the WDT for 1 Sec
	//WDTCSR = _BV(WDE) | _BV(WDP3) | _BV(WDP0);
	//WDTCSR = 0;
	WDTCSR = _BV(WDIE) | _BV(WDE) | _BV(WDP3) | _BV(WDP0);
     2a8:	99 e6       	ldi	r25, 0x69	; 105
     2aa:	90 83       	st	Z, r25
	wdt_reset();
     2ac:	a8 95       	wdr
	
	// System
	//MCUCR |= (1<<PUD);		// Pull-up Disable
	MCUCR = 0;
     2ae:	15 be       	out	0x35, r1	; 53
	PRR = 0;
     2b0:	10 92 64 00 	sts	0x0064, r1

	// Timers
	TCCR1A = _BV(COM1A1)|_BV(WGM11)|_BV(WGM13);
     2b4:	92 e9       	ldi	r25, 0x92	; 146
     2b6:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1<<CS12); //(1<<CS11)|(1<<CS10); //
     2ba:	94 e0       	ldi	r25, 0x04	; 4
     2bc:	90 93 81 00 	sts	0x0081, r25
	ICR1 = 0xFFFF;
     2c0:	2f ef       	ldi	r18, 0xFF	; 255
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	30 93 87 00 	sts	0x0087, r19
     2c8:	20 93 86 00 	sts	0x0086, r18
	
	// IO Ports
	// 0: Input (Hi-Z) 1: Output
	//        76543210		7		6		5		4		3		2		1		0
	DDRB |= 0b00101111; //	XTAL2	XTAL1	SCK		MISO	MOSI	CS_RFM	LED_BL	LED_OR
     2cc:	94 b1       	in	r25, 0x04	; 4
     2ce:	9f 62       	ori	r25, 0x2F	; 47
     2d0:	94 b9       	out	0x04, r25	; 4
    DDRC |= 0b00001111; //	--		Reset	SCL		SDA		P4		P3		P2		P1
     2d2:	97 b1       	in	r25, 0x07	; 7
     2d4:	9f 60       	ori	r25, 0x0F	; 15
     2d6:	97 b9       	out	0x07, r25	; 7
    DDRD |= 0b00000010; //	P8		P7		P6		P5		RFM_PBL	RF_INT	TXD		RXD
     2d8:	51 9a       	sbi	0x0a, 1	; 10
	// PORTC |=0b00000000;
	
	// Serial Port
	UBRR0H = UART_UBRR >> 8;
     2da:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UART_UBRR;
     2de:	98 e0       	ldi	r25, 0x08	; 8
     2e0:	90 93 c4 00 	sts	0x00C4, r25
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     2e4:	98 e9       	ldi	r25, 0x98	; 152
     2e6:	90 93 c1 00 	sts	0x00C1, r25
    stdout = &uart_io; //= stdin 
     2ea:	26 ea       	ldi	r18, 0xA6	; 166
     2ec:	32 e0       	ldi	r19, 0x02	; 2
     2ee:	30 93 4d 03 	sts	0x034D, r19
     2f2:	20 93 4c 03 	sts	0x034C, r18
	
	//SPI
	SPCR	= (1<<SPE)|(1<<MSTR)|(1<<SPR0); // |(1<<CPOL)|(1<<CPHA)
     2f6:	91 e5       	ldi	r25, 0x51	; 81
     2f8:	9c bd       	out	0x2c, r25	; 44
	
	//I2C
	TWCR = (1<<TWEN) | (1<<TWEA);
     2fa:	94 e4       	ldi	r25, 0x44	; 68
     2fc:	90 93 bc 00 	sts	0x00BC, r25
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0));
     300:	e9 eb       	ldi	r30, 0xB9	; 185
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	90 81       	ld	r25, Z
     306:	9c 7f       	andi	r25, 0xFC	; 252
     308:	90 83       	st	Z, r25
	TWBR = ((F_CPU / I2C_FREQ) - 16) / 2;
     30a:	9c e0       	ldi	r25, 0x0C	; 12
     30c:	90 93 b8 00 	sts	0x00B8, r25
	
	// ADC
	ADMUX 	= 0; //(1<<REFS0);	// AVcc Connected
     310:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
     314:	9f e8       	ldi	r25, 0x8F	; 143
     316:	90 93 7a 00 	sts	0x007A, r25
	DIDR0 	= (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     31a:	9f e3       	ldi	r25, 0x3F	; 63
     31c:	90 93 7e 00 	sts	0x007E, r25

	//PCICR = 0; //(1<<PCIE2);
	//PCMSK2 = 0; //(1<<PCINT16);
	
	EICRA = 0;
     320:	10 92 69 00 	sts	0x0069, r1
	EIMSK = 0; //(1<<INT1)|(1<<INT0);
     324:	1d ba       	out	0x1d, r1	; 29
	
	sei();
     326:	78 94       	sei
	
	return startupStatus;
}
     328:	08 95       	ret

0000032a <systemSleep>:
	//	Interval	0	1	2	3	4	5	6	7	8	9
	//	Time in ms	16	32	64	128	256	512	1k	2k	4k	8k
	
	//LED = LOW;
	
	cli();
     32a:	f8 94       	cli
	
	TWCR = 0;
     32c:	10 92 bc 00 	sts	0x00BC, r1
	TWSR = 0;
     330:	10 92 b9 00 	sts	0x00B9, r1
	SPCR = 0;
     334:	1c bc       	out	0x2c, r1	; 44
	ADMUX = 0;
     336:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     33a:	10 92 7a 00 	sts	0x007A, r1
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     33e:	8f e3       	ldi	r24, 0x3F	; 63
     340:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 = (1<<AIN1D)|(1<<AIN0D);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	80 93 7f 00 	sts	0x007F, r24
	UCSR0B =0;
     34a:	10 92 c1 00 	sts	0x00C1, r1
	TCCR1B = 0;
     34e:	10 92 81 00 	sts	0x0081, r1
	PORTB = PORTC = PORTD = 0; // 
     352:	1b b8       	out	0x0b, r1	; 11
     354:	8b b1       	in	r24, 0x0b	; 11
     356:	88 b9       	out	0x08, r24	; 8
     358:	88 b1       	in	r24, 0x08	; 8
     35a:	85 b9       	out	0x05, r24	; 5
	DDRB = DDRC = DDRD = 0;
     35c:	1a b8       	out	0x0a, r1	; 10
     35e:	8a b1       	in	r24, 0x0a	; 10
     360:	87 b9       	out	0x07, r24	; 7
     362:	87 b1       	in	r24, 0x07	; 7
     364:	84 b9       	out	0x04, r24	; 4
	
	//MPU_VLOGIC = LOW;
	power_all_disable();
     366:	e4 e6       	ldi	r30, 0x64	; 100
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8f 6e       	ori	r24, 0xEF	; 239
     36e:	80 83       	st	Z, r24
	
	//wdt_reset();
	//uint8_t value = (uint8_t)( ((configFlags.wdtSlpEn)<<WDIE) | (interval & 0x08? (1<<WDP3): 0x00) | (interval & 0x07) );
	MCUSR = 0;
     370:	14 be       	out	0x34, r1	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     372:	e0 e6       	ldi	r30, 0x60	; 96
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	88 61       	ori	r24, 0x18	; 24
     37a:	80 83       	st	Z, r24
	WDTCSR = _BV(WDIE) | _BV(WDE) | _BV(WDP3) | _BV(WDP0);
     37c:	89 e6       	ldi	r24, 0x69	; 105
     37e:	80 83       	st	Z, r24
	
	
	// if(stateFlags.systemState == DOWN)			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	// else if(stateFlags.systemState == SLEEP) 	set_sleep_mode(SLEEP_MODE_STANDBY);
	// else										set_sleep_mode(SLEEP_MODE_IDLE);
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     380:	83 b7       	in	r24, 0x33	; 51
     382:	81 7f       	andi	r24, 0xF1	; 241
     384:	84 60       	ori	r24, 0x04	; 4
     386:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     388:	83 b7       	in	r24, 0x33	; 51
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     38e:	85 b7       	in	r24, 0x35	; 53
     390:	80 66       	ori	r24, 0x60	; 96
     392:	85 bf       	out	0x35, r24	; 53
     394:	8f 7d       	andi	r24, 0xDF	; 223
     396:	85 bf       	out	0x35, r24	; 53
	sei();
     398:	78 94       	sei
	sleep_cpu();
     39a:	88 95       	sleep
	
	sleep_disable();
     39c:	83 b7       	in	r24, 0x33	; 51
     39e:	8e 7f       	andi	r24, 0xFE	; 254
     3a0:	83 bf       	out	0x33, r24	; 51
	uint8_t systemReturnState = atMegaInit();
     3a2:	0e 94 4d 01 	call	0x29a	; 0x29a <atMegaInit>
	
	//LED = HIGH;
	
	return systemReturnState;
}
     3a6:	08 95       	ret

000003a8 <radioWriteReg>:

	#endif
}

void radioWriteReg(uint8_t regAddress, uint8_t regValue){
	CS_RFM = LOW;
     3a8:	2a 98       	cbi	0x05, 2	; 5
		transferSPI((RFM_WRITE<<7) | regAddress);
     3aa:	80 68       	ori	r24, 0x80	; 128


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     3ac:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <radioWriteReg+0x6>
	return SPDR;
     3b4:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     3b6:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
     3b8:	0d b4       	in	r0, 0x2d	; 45
     3ba:	07 fe       	sbrs	r0, 7
     3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <radioWriteReg+0x10>
	return SPDR;
     3be:	8e b5       	in	r24, 0x2e	; 46
		transferSPI(regValue);
	CS_RFM = HIGH;
     3c0:	2a 9a       	sbi	0x05, 2	; 5
}
     3c2:	08 95       	ret

000003c4 <radioMode>:
	
	return startupStatus;
}

void radioMode(uint8_t mode){
	radioWriteReg(GPIO_0_CFG, GPIO_TXST);
     3c4:	8b e0       	ldi	r24, 0x0B	; 11
     3c6:	62 e1       	ldi	r22, 0x12	; 18
     3c8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(GPIO_1_CFG, GPIO_RXST);
     3cc:	8c e0       	ldi	r24, 0x0C	; 12
     3ce:	65 e1       	ldi	r22, 0x15	; 21
     3d0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(GPIO_2_CFG, GPIO_PMBLDET);
     3d4:	8d e0       	ldi	r24, 0x0D	; 13
     3d6:	69 e1       	ldi	r22, 0x19	; 25
     3d8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	//																								Add		R/W	Function/Desc		[7]			[6]			[5]			[4]			[3]			[2]			[1]			[0]		Reset Value
	radioWriteReg(0x06, 0x00);		// Disable all interrupts										06		R/W	Interrupt Enable 2	enswdet		enpreaval	enpreainval	enrssi		enwut		enlbd		enchiprdy	enpor	03h
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x07, 0x01);		// Set READY mode
     3e4:	87 e0       	ldi	r24, 0x07	; 7
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x09, 0x7F);		// Cap = 12.5pF
     3ec:	89 e0       	ldi	r24, 0x09	; 9
     3ee:	6f e7       	ldi	r22, 0x7F	; 127
     3f0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x0A, 0x05);		// Clk output is 2MHz
     3f4:	8a e0       	ldi	r24, 0x0A	; 10
     3f6:	65 e0       	ldi	r22, 0x05	; 5
     3f8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x0F, 0x70);		// NO ADC used
     3fc:	8f e0       	ldi	r24, 0x0F	; 15
     3fe:	60 e7       	ldi	r22, 0x70	; 112
     400:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x10, 0x00);		// no ADC used
     404:	80 e1       	ldi	r24, 0x10	; 16
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x12, 0x00);		// No temp sensor used
     40c:	82 e1       	ldi	r24, 0x12	; 18
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x13, 0x00);		// no temp sensor used
     414:	83 e1       	ldi	r24, 0x13	; 19
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x70, 0x20);		// No manchester code, no data whiting, data rate < 30Kbps
     41c:	80 e7       	ldi	r24, 0x70	; 112
     41e:	60 e2       	ldi	r22, 0x20	; 32
     420:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x1C, 0x1D);		// IF filter bandwidth
     424:	8c e1       	ldi	r24, 0x1C	; 28
     426:	6d e1       	ldi	r22, 0x1D	; 29
     428:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x1D, 0x40);		// AFC Loop
     42c:	8d e1       	ldi	r24, 0x1D	; 29
     42e:	60 e4       	ldi	r22, 0x40	; 64
     430:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	// radioWriteReg(0x1E, 0x0A);	// AFC timing

	radioWriteReg(0x20, 0xA1);		// clock recovery
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	61 ea       	ldi	r22, 0xA1	; 161
     438:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x21, 0x20);		// clock recovery
     43c:	81 e2       	ldi	r24, 0x21	; 33
     43e:	60 e2       	ldi	r22, 0x20	; 32
     440:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x22, 0x4E);		// clock recovery
     444:	82 e2       	ldi	r24, 0x22	; 34
     446:	6e e4       	ldi	r22, 0x4E	; 78
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x23, 0xA5);		// clock recovery
     44c:	83 e2       	ldi	r24, 0x23	; 35
     44e:	65 ea       	ldi	r22, 0xA5	; 165
     450:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x24, 0x00);		// clock recovery timing
     454:	84 e2       	ldi	r24, 0x24	; 36
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x25, 0x0A);		// clock recovery timing
     45c:	85 e2       	ldi	r24, 0x25	; 37
     45e:	6a e0       	ldi	r22, 0x0A	; 10
     460:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	// radioWriteReg(0x2A, 0x18);	// AFC Limiter
	radioWriteReg(0x2C, 0x00);		// OOK Counter
     464:	8c e2       	ldi	r24, 0x2C	; 44
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x2D, 0x00);		// OOK Counter
     46c:	8d e2       	ldi	r24, 0x2D	; 45
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x2E, 0x00);		// Slicer Peak Hold
     474:	8e e2       	ldi	r24, 0x2E	; 46
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x6E, 0x4E);		// TX data rate 1 was 0x27
     47c:	8e e6       	ldi	r24, 0x6E	; 110
     47e:	6e e4       	ldi	r22, 0x4E	; 78
     480:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x6F, 0xA5);		// TX data rate 0 was 0x52
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	65 ea       	ldi	r22, 0xA5	; 165
     488:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x30, 0x00);		// Data access control <steve> 0x8C
     48c:	80 e3       	ldi	r24, 0x30	; 48
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x32, 0xFF);		// Header control
     494:	82 e3       	ldi	r24, 0x32	; 50
     496:	6f ef       	ldi	r22, 0xFF	; 255
     498:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x33, 0x42);		// Header 3, 2, 1, 0 used for head length, fixed packet length, synchronize word length 3, 2,
     49c:	83 e3       	ldi	r24, 0x33	; 51
     49e:	62 e4       	ldi	r22, 0x42	; 66
     4a0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x34, 64);		// 64 nibble = 32 byte preamble
     4a4:	84 e3       	ldi	r24, 0x34	; 52
     4a6:	60 e4       	ldi	r22, 0x40	; 64
     4a8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x35, 0x20);		// 0x35 need to detect 20bit preamble
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	60 e2       	ldi	r22, 0x20	; 32
     4b0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x36, 0x2D);		// synchronize word
     4b4:	86 e3       	ldi	r24, 0x36	; 54
     4b6:	6d e2       	ldi	r22, 0x2D	; 45
     4b8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x37, 0xD4);
     4bc:	87 e3       	ldi	r24, 0x37	; 55
     4be:	64 ed       	ldi	r22, 0xD4	; 212
     4c0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x38, 0x00);
     4c4:	88 e3       	ldi	r24, 0x38	; 56
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x39, 0x00);
     4cc:	89 e3       	ldi	r24, 0x39	; 57
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x3A, '*');		// set tx header 3
     4d4:	8a e3       	ldi	r24, 0x3A	; 58
     4d6:	6a e2       	ldi	r22, 0x2A	; 42
     4d8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x3B, 'E');		// set tx header 2
     4dc:	8b e3       	ldi	r24, 0x3B	; 59
     4de:	65 e4       	ldi	r22, 0x45	; 69
     4e0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x3C, 'W');		// set tx header 1
     4e4:	8c e3       	ldi	r24, 0x3C	; 60
     4e6:	67 e5       	ldi	r22, 0x57	; 87
     4e8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x3D, 'S');		// set tx header 0
     4ec:	8d e3       	ldi	r24, 0x3D	; 61
     4ee:	63 e5       	ldi	r22, 0x53	; 83
     4f0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	// radioWriteReg(0x3E, 17);		// set packet length to 17 bytes (max size: 255 bytes)
	radioWriteReg(0x3E, 50);	// set packet length to PKTSIZE bytes (max size: 255 bytes)
     4f4:	8e e3       	ldi	r24, 0x3E	; 62
     4f6:	62 e3       	ldi	r22, 0x32	; 50
     4f8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x3F, '*');		// set rx header
     4fc:	8f e3       	ldi	r24, 0x3F	; 63
     4fe:	6a e2       	ldi	r22, 0x2A	; 42
     500:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x40, 'E');
     504:	80 e4       	ldi	r24, 0x40	; 64
     506:	65 e4       	ldi	r22, 0x45	; 69
     508:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x41, 'W');
     50c:	81 e4       	ldi	r24, 0x41	; 65
     50e:	67 e5       	ldi	r22, 0x57	; 87
     510:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x42, 'S');
     514:	82 e4       	ldi	r24, 0x42	; 66
     516:	63 e5       	ldi	r22, 0x53	; 83
     518:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x43, 0xFF);		// check all bits
     51c:	83 e4       	ldi	r24, 0x43	; 67
     51e:	6f ef       	ldi	r22, 0xFF	; 255
     520:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x44, 0xFF);		// Check all bits
     524:	84 e4       	ldi	r24, 0x44	; 68
     526:	6f ef       	ldi	r22, 0xFF	; 255
     528:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x45, 0xFF);		// check all bits
     52c:	85 e4       	ldi	r24, 0x45	; 69
     52e:	6f ef       	ldi	r22, 0xFF	; 255
     530:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x46, 0xFF);		// Check all bits
     534:	86 e4       	ldi	r24, 0x46	; 70
     536:	6f ef       	ldi	r22, 0xFF	; 255
     538:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	// radioWriteReg(0x56, 0x02);		// <steve> Something to do with I/Q Swapping

	radioWriteReg(0x6D, 0x00);		// Tx power to max
     53c:	8d e6       	ldi	r24, 0x6D	; 109
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x79, 0x00);		// no frequency hopping
     544:	89 e7       	ldi	r24, 0x79	; 121
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x7A, 0x00);		// no frequency hopping
     54c:	8a e7       	ldi	r24, 0x7A	; 122
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x71, 0x12);		// FSK Async Mode, 
     554:	81 e7       	ldi	r24, 0x71	; 113
     556:	62 e1       	ldi	r22, 0x12	; 18
     558:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x72, 8);			// Frequency deviation setting to 5 kHz, total 10 kHz deviation, 5000/625
     55c:	82 e7       	ldi	r24, 0x72	; 114
     55e:	68 e0       	ldi	r22, 0x08	; 8
     560:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x73, 32);		// Frequency offset in 156.25 Hz Increments, Crawls between 4840 and 5040 Hz, 5740 May be a better
     564:	83 e7       	ldi	r24, 0x73	; 115
     566:	60 e2       	ldi	r22, 0x20	; 32
     568:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x74, 0x00);		// Frequency offset
     56c:	84 e7       	ldi	r24, 0x74	; 116
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>

	radioWriteReg(0x75, 0x53);		// frequency set to 434MHz
     574:	85 e7       	ldi	r24, 0x75	; 117
     576:	63 e5       	ldi	r22, 0x53	; 83
     578:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x76, 0x64);		// frequency set to 434MHz
     57c:	86 e7       	ldi	r24, 0x76	; 118
     57e:	64 e6       	ldi	r22, 0x64	; 100
     580:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x77, 0x00);		// frequency set to 434Mhz
     584:	87 e7       	ldi	r24, 0x77	; 119
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	// radioWriteReg(0x59, 0x40);
	// radioWriteReg(0x58, 0x80);		// cpcuu[7:0], whatever this is

	// radioWriteReg(0x6A, 0x0B);
	// radioWriteReg(0x68, 0x04);
	radioWriteReg(0x1F, 0x03);		// Clock Recovery Value
     58c:	8f e1       	ldi	r24, 0x1F	; 31
     58e:	63 e0       	ldi	r22, 0x03	; 3
     590:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	
	
	#if defined(RFM22B)

	#endif
}
     594:	08 95       	ret

00000596 <radioReadReg>:
		transferSPI(regValue);
	CS_RFM = HIGH;
}

uint8_t radioReadReg(uint8_t regAddress){
	CS_RFM = LOW;
     596:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     598:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     59a:	0d b4       	in	r0, 0x2d	; 45
     59c:	07 fe       	sbrs	r0, 7
     59e:	fd cf       	rjmp	.-6      	; 0x59a <radioReadReg+0x4>
	return SPDR;
     5a0:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     5a2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     5a4:	0d b4       	in	r0, 0x2d	; 45
     5a6:	07 fe       	sbrs	r0, 7
     5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <radioReadReg+0xe>
	return SPDR;
     5aa:	8e b5       	in	r24, 0x2e	; 46
		transferSPI(regAddress);
		uint8_t value = transferSPI(0x00);
	CS_RFM = HIGH;
     5ac:	2a 9a       	sbi	0x05, 2	; 5
	return value;
}
     5ae:	08 95       	ret

000005b0 <transmitELT_Beacon>:

void transmitELT_Beacon(void){
     5b0:	2f 92       	push	r2
     5b2:	3f 92       	push	r3
     5b4:	4f 92       	push	r4
     5b6:	5f 92       	push	r5
     5b8:	6f 92       	push	r6
     5ba:	7f 92       	push	r7
     5bc:	8f 92       	push	r8
     5be:	9f 92       	push	r9
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
	if((radioReadReg(0x07)&(1<<RFM_xton)) != (1<<RFM_xton) ){
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	0e 94 cb 02 	call	0x596	; 0x596 <radioReadReg>
     5da:	80 fd       	sbrc	r24, 0
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <transmitELT_Beacon+0x3e>
		radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5e6:	80 e4       	ldi	r24, 0x40	; 64
     5e8:	9f e1       	ldi	r25, 0x1F	; 31
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <transmitELT_Beacon+0x3a>
		//printf("Fail on Preset: Beacon\n");
		_delay_ms(2);
	}
	
	radioWriteReg(0x71, 0x12);		// FSK Async Mode, 
     5ee:	81 e7       	ldi	r24, 0x71	; 113
     5f0:	62 e1       	ldi	r22, 0x12	; 18
     5f2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x72, 7);		// Frequency deviation is 625 Hz * value (Centered, so actual peak-peak deviation is 2x)
     5f6:	82 e7       	ldi	r24, 0x72	; 114
     5f8:	67 e0       	ldi	r22, 0x07	; 7
     5fa:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
     5fe:	87 e0       	ldi	r24, 0x07	; 7
     600:	68 e0       	ldi	r22, 0x08	; 8
     602:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
     606:	80 e8       	ldi	r24, 0x80	; 128
     608:	9e e3       	ldi	r25, 0x3E	; 62
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <transmitELT_Beacon+0x5a>
     60e:	c2 e8       	ldi	r28, 0x82	; 130
     610:	d2 e0       	ldi	r29, 0x02	; 2
		CS_RFM = LOW;
		for(uint16_t d=0; d<beaconNotes[n][1]; d++){
			FORCE_MOSI = d&0x01;
			_delay_us(beaconNotes[n][0]-66); // Getting 416 Hz A4 w/o correction, means its adding 66 uS
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     612:	90 e9       	ldi	r25, 0x90	; 144
     614:	29 2e       	mov	r2, r25
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	39 2e       	mov	r3, r25
     61a:	81 e5       	ldi	r24, 0x51	; 81
     61c:	68 2e       	mov	r6, r24
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
	_delay_ms(4);
	
	for(uint8_t n=0; n<BEACON_NOTES; n++){
		radioWriteReg(0x6D, beaconNotes[n][2]);
     61e:	8d e6       	ldi	r24, 0x6D	; 109
     620:	6c 81       	ldd	r22, Y+4	; 0x04
     622:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	9f e1       	ldi	r25, 0x1F	; 31
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <transmitELT_Beacon+0x7a>
		_delay_ms(2);
		SPCR = 0;
     62e:	1c bc       	out	0x2c, r1	; 44
		CS_RFM = LOW;
     630:	2a 98       	cbi	0x05, 2	; 5
		for(uint16_t d=0; d<beaconNotes[n][1]; d++){
     632:	4a 80       	ldd	r4, Y+2	; 0x02
     634:	5b 80       	ldd	r5, Y+3	; 0x03
     636:	88 24       	eor	r8, r8
     638:	99 24       	eor	r9, r9
     63a:	77 24       	eor	r7, r7
     63c:	7f c0       	rjmp	.+254    	; 0x73c <transmitELT_Beacon+0x18c>
			FORCE_MOSI = d&0x01;
     63e:	97 2d       	mov	r25, r7
     640:	91 70       	andi	r25, 0x01	; 1
     642:	99 0f       	add	r25, r25
     644:	99 0f       	add	r25, r25
     646:	99 0f       	add	r25, r25
     648:	85 b1       	in	r24, 0x05	; 5
     64a:	87 7f       	andi	r24, 0xF7	; 247
     64c:	89 2b       	or	r24, r25
     64e:	85 b9       	out	0x05, r24	; 5
			_delay_us(beaconNotes[n][0]-66); // Getting 416 Hz A4 w/o correction, means its adding 66 uS
     650:	68 81       	ld	r22, Y
     652:	79 81       	ldd	r23, Y+1	; 0x01
     654:	62 54       	subi	r22, 0x42	; 66
     656:	70 40       	sbci	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatunsisf>
     660:	5b 01       	movw	r10, r22
     662:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     664:	2b ea       	ldi	r18, 0xAB	; 171
     666:	3a ea       	ldi	r19, 0xAA	; 170
     668:	4a ea       	ldi	r20, 0xAA	; 170
     66a:	50 e4       	ldi	r21, 0x40	; 64
     66c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     670:	7b 01       	movw	r14, r22
     672:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e8       	ldi	r20, 0x80	; 128
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	0e 94 8b 09 	call	0x1316	; 0x1316 <__cmpsf2>
     680:	88 23       	and	r24, r24
     682:	14 f4       	brge	.+4      	; 0x688 <transmitELT_Beacon+0xd8>
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	52 c0       	rjmp	.+164    	; 0x72c <transmitELT_Beacon+0x17c>
		__ticks = 1;
	else if (__tmp > 255)
     688:	c8 01       	movw	r24, r16
     68a:	b7 01       	movw	r22, r14
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	4f e7       	ldi	r20, 0x7F	; 127
     692:	53 e4       	ldi	r21, 0x43	; 67
     694:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     698:	18 16       	cp	r1, r24
     69a:	0c f0       	brlt	.+2      	; 0x69e <transmitELT_Beacon+0xee>
     69c:	43 c0       	rjmp	.+134    	; 0x724 <transmitELT_Beacon+0x174>
	{
		_delay_ms(__us / 1000.0);
     69e:	c6 01       	movw	r24, r12
     6a0:	b5 01       	movw	r22, r10
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	4a e7       	ldi	r20, 0x7A	; 122
     6a8:	54 e4       	ldi	r21, 0x44	; 68
     6aa:	0e 94 8f 09 	call	0x131e	; 0x131e <__divsf3>
     6ae:	5b 01       	movw	r10, r22
     6b0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4a e7       	ldi	r20, 0x7A	; 122
     6b8:	55 e4       	ldi	r21, 0x45	; 69
     6ba:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     6be:	7b 01       	movw	r14, r22
     6c0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e8       	ldi	r20, 0x80	; 128
     6c8:	5f e3       	ldi	r21, 0x3F	; 63
     6ca:	0e 94 8b 09 	call	0x1316	; 0x1316 <__cmpsf2>
     6ce:	88 23       	and	r24, r24
     6d0:	1c f4       	brge	.+6      	; 0x6d8 <transmitELT_Beacon+0x128>
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	22 c0       	rjmp	.+68     	; 0x71c <transmitELT_Beacon+0x16c>
		__ticks = 1;
	else if (__tmp > 65535)
     6d8:	c8 01       	movw	r24, r16
     6da:	b7 01       	movw	r22, r14
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	4f e7       	ldi	r20, 0x7F	; 127
     6e2:	57 e4       	ldi	r21, 0x47	; 71
     6e4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     6e8:	18 16       	cp	r1, r24
     6ea:	a4 f4       	brge	.+40     	; 0x714 <transmitELT_Beacon+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ec:	c6 01       	movw	r24, r12
     6ee:	b5 01       	movw	r22, r10
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e2       	ldi	r20, 0x20	; 32
     6f6:	51 e4       	ldi	r21, 0x41	; 65
     6f8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     6fc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     700:	05 c0       	rjmp	.+10     	; 0x70c <transmitELT_Beacon+0x15c>
     702:	c1 01       	movw	r24, r2
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <transmitELT_Beacon+0x154>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     708:	61 50       	subi	r22, 0x01	; 1
     70a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	61 15       	cp	r22, r1
     70e:	71 05       	cpc	r23, r1
     710:	c1 f7       	brne	.-16     	; 0x702 <transmitELT_Beacon+0x152>
     712:	0e c0       	rjmp	.+28     	; 0x730 <transmitELT_Beacon+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     714:	c8 01       	movw	r24, r16
     716:	b7 01       	movw	r22, r14
     718:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     71c:	cb 01       	movw	r24, r22
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <transmitELT_Beacon+0x16e>
     722:	06 c0       	rjmp	.+12     	; 0x730 <transmitELT_Beacon+0x180>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     724:	c8 01       	movw	r24, r16
     726:	b7 01       	movw	r22, r14
     728:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     72c:	6a 95       	dec	r22
     72e:	f1 f7       	brne	.-4      	; 0x72c <transmitELT_Beacon+0x17c>
	for(uint8_t n=0; n<BEACON_NOTES; n++){
		radioWriteReg(0x6D, beaconNotes[n][2]);
		_delay_ms(2);
		SPCR = 0;
		CS_RFM = LOW;
		for(uint16_t d=0; d<beaconNotes[n][1]; d++){
     730:	08 94       	sec
     732:	81 1c       	adc	r8, r1
     734:	91 1c       	adc	r9, r1
     736:	73 94       	inc	r7
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	78 22       	and	r7, r24
     73c:	84 14       	cp	r8, r4
     73e:	95 04       	cpc	r9, r5
     740:	08 f4       	brcc	.+2      	; 0x744 <transmitELT_Beacon+0x194>
     742:	7d cf       	rjmp	.-262    	; 0x63e <transmitELT_Beacon+0x8e>
			FORCE_MOSI = d&0x01;
			_delay_us(beaconNotes[n][0]-66); // Getting 416 Hz A4 w/o correction, means its adding 66 uS
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     744:	6c bc       	out	0x2c, r6	; 44
     746:	26 96       	adiw	r28, 0x06	; 6
	radioWriteReg(0x72, 7);		// Frequency deviation is 625 Hz * value (Centered, so actual peak-peak deviation is 2x)
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
	_delay_ms(4);
	
	for(uint8_t n=0; n<BEACON_NOTES; n++){
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	c6 3a       	cpi	r28, 0xA6	; 166
     74c:	d8 07       	cpc	r29, r24
     74e:	09 f0       	breq	.+2      	; 0x752 <transmitELT_Beacon+0x1a2>
     750:	66 cf       	rjmp	.-308    	; 0x61e <transmitELT_Beacon+0x6e>
			FORCE_MOSI = d&0x01;
			_delay_us(beaconNotes[n][0]-66); // Getting 416 Hz A4 w/o correction, means its adding 66 uS
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	}
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	bf 90       	pop	r11
     764:	af 90       	pop	r10
     766:	9f 90       	pop	r9
     768:	8f 90       	pop	r8
     76a:	7f 90       	pop	r7
     76c:	6f 90       	pop	r6
     76e:	5f 90       	pop	r5
     770:	4f 90       	pop	r4
     772:	3f 90       	pop	r3
     774:	2f 90       	pop	r2
     776:	08 95       	ret

00000778 <putUARTchar>:
		"1 to 3\tToggle Config Flags\n"
		"`\tWrite Toggles to EEPROM and Review\n"
		"?\tConsole Useage\n\n");
}

static int putUARTchar(char c, FILE *stream){
     778:	1f 93       	push	r17
     77a:	18 2f       	mov	r17, r24
    if (c == '\n') putUARTchar('\r', stream);
     77c:	8a 30       	cpi	r24, 0x0A	; 10
     77e:	19 f4       	brne	.+6      	; 0x786 <putUARTchar+0xe>
     780:	8d e0       	ldi	r24, 0x0D	; 13
     782:	0e 94 bc 03 	call	0x778	; 0x778 <putUARTchar>
    loop_until_bit_is_set(UCSR0A, UDRE0);
     786:	80 91 c0 00 	lds	r24, 0x00C0
     78a:	85 ff       	sbrs	r24, 5
     78c:	fc cf       	rjmp	.-8      	; 0x786 <putUARTchar+0xe>
    UDR0 = c;
     78e:	10 93 c6 00 	sts	0x00C6, r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     792:	80 ed       	ldi	r24, 0xD0	; 208
     794:	97 e0       	ldi	r25, 0x07	; 7
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <putUARTchar+0x1e>
	_delay_us(500);
	//transferSPI(c);
    return 0;
}
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	1f 91       	pop	r17
     7a0:	08 95       	ret

000007a2 <getUARTchar>:

uint8_t getUARTchar(void){
    while( !(UCSR0A & (1<<RXC0)));
     7a2:	80 91 c0 00 	lds	r24, 0x00C0
     7a6:	87 ff       	sbrs	r24, 7
     7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <getUARTchar>
    return(UDR0);
     7aa:	80 91 c6 00 	lds	r24, 0x00C6
}
     7ae:	08 95       	ret

000007b0 <readADC>:

uint16_t readADC(uint8_t adcChannel){
	ADMUX 	= adcChannel; //(1<<REFS0) |
     7b0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	|= (1<<ADSC);
     7b4:	80 91 7a 00 	lds	r24, 0x007A
     7b8:	80 64       	ori	r24, 0x40	; 64
     7ba:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC));
     7be:	80 91 7a 00 	lds	r24, 0x007A
     7c2:	86 fd       	sbrc	r24, 6
     7c4:	fc cf       	rjmp	.-8      	; 0x7be <readADC+0xe>
	return (ADCL + ((uint16_t) ADCH << 8));
     7c6:	90 91 78 00 	lds	r25, 0x0078
     7ca:	80 91 79 00 	lds	r24, 0x0079
     7ce:	38 2f       	mov	r19, r24
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	29 0f       	add	r18, r25
     7d4:	31 1d       	adc	r19, r1
}
     7d6:	c9 01       	movw	r24, r18
     7d8:	08 95       	ret

000007da <readAdcNoiseReduced>:

uint16_t readAdcNoiseReduced(uint8_t adcChannel){
	ADMUX 	= adcChannel; //(1<<REFS0) |
     7da:	80 93 7c 00 	sts	0x007C, r24
	
	set_sleep_mode(SLEEP_MODE_ADC);
     7de:	83 b7       	in	r24, 0x33	; 51
     7e0:	81 7f       	andi	r24, 0xF1	; 241
     7e2:	82 60       	ori	r24, 0x02	; 2
     7e4:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     7e6:	83 b7       	in	r24, 0x33	; 51
     7e8:	81 60       	ori	r24, 0x01	; 1
     7ea:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     7ec:	85 b7       	in	r24, 0x35	; 53
     7ee:	80 66       	ori	r24, 0x60	; 96
     7f0:	85 bf       	out	0x35, r24	; 53
     7f2:	8f 7d       	andi	r24, 0xDF	; 223
     7f4:	85 bf       	out	0x35, r24	; 53
	sei();
     7f6:	78 94       	sei
	sleep_cpu();
     7f8:	88 95       	sleep
	
	sleep_disable();
     7fa:	83 b7       	in	r24, 0x33	; 51
     7fc:	8e 7f       	andi	r24, 0xFE	; 254
     7fe:	83 bf       	out	0x33, r24	; 51
	return (ADCL + ((uint16_t) ADCH << 8));
     800:	90 91 78 00 	lds	r25, 0x0078
     804:	80 91 79 00 	lds	r24, 0x0079
     808:	38 2f       	mov	r19, r24
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	29 0f       	add	r18, r25
     80e:	31 1d       	adc	r19, r1
}
     810:	c9 01       	movw	r24, r18
     812:	08 95       	ret

00000814 <updateVolts>:
		}
		_delay_ms(1);
	}
}

void updateVolts(void){
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 e0       	ldi	r16, 0x00	; 0
     82a:	aa 24       	eor	r10, r10
     82c:	bb 24       	eor	r11, r11
     82e:	cc 24       	eor	r12, r12
     830:	dd 24       	eor	r13, r13
     832:	c0 e0       	ldi	r28, 0x00	; 0
     834:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t sysVin = 0;
	uint16_t atMegaVolt = 0;
	
	
	for(uint8_t j=0; j<4; j++){
		lipoly += readADC(ADC_VBAT);
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <readADC>
     83c:	a8 0e       	add	r10, r24
     83e:	b9 1e       	adc	r11, r25
		sysVin += readADC(ADC_VIN);
     840:	87 e0       	ldi	r24, 0x07	; 7
     842:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <readADC>
     846:	c8 0e       	add	r12, r24
     848:	d9 1e       	adc	r13, r25
     84a:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0; i<4; i++) readADC(ADC_VSYS); // Pre-heat the VSYS ADC Input
     84c:	8e e0       	ldi	r24, 0x0E	; 14
     84e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <readADC>
     852:	1f 5f       	subi	r17, 0xFF	; 255
     854:	14 30       	cpi	r17, 0x04	; 4
     856:	d1 f7       	brne	.-12     	; 0x84c <updateVolts+0x38>
		atMegaVolt += readAdcNoiseReduced(ADC_VSYS); // [4092:0]
     858:	8e e0       	ldi	r24, 0x0E	; 14
     85a:	0e 94 ed 03 	call	0x7da	; 0x7da <readAdcNoiseReduced>
     85e:	c8 0f       	add	r28, r24
     860:	d9 1f       	adc	r29, r25
	uint16_t lipoly = 0; // An array or struct would be more condusive?
	uint16_t sysVin = 0;
	uint16_t atMegaVolt = 0;
	
	
	for(uint8_t j=0; j<4; j++){
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	04 30       	cpi	r16, 0x04	; 4
     866:	39 f7       	brne	.-50     	; 0x836 <updateVolts+0x22>
		for(uint8_t i=0; i<4; i++) readADC(ADC_VSYS); // Pre-heat the VSYS ADC Input
		atMegaVolt += readAdcNoiseReduced(ADC_VSYS); // [4092:0]
	}
	lipoly >>= 2; // [1023:0]
	sysVin >>= 2;
	atMegaVolt >>= 2;
     868:	9e 01       	movw	r18, r28
     86a:	36 95       	lsr	r19
     86c:	27 95       	ror	r18
     86e:	36 95       	lsr	r19
     870:	27 95       	ror	r18
	// Repeated for sysVin
	// Is this next version more lossy? :
	// BATTv = battADC[1023:0] * ATMEGAv[4999:0] * 2 /1023 (appprox as >> 9) , Max is 5.1 Mil, divide is an easy right shift to within .1% actual
	// Both version require 32-bit ints, so might as well do the one with only one divide and 3 multiplies. First was 3 mult + 3 div
	
	atMegaVolt = (atMegaVolt < 225)? 4999 : (uint16_t)( (1125300)/((uint32_t) atMegaVolt) );
     872:	21 3e       	cpi	r18, 0xE1	; 225
     874:	31 05       	cpc	r19, r1
     876:	18 f4       	brcc	.+6      	; 0x87e <updateVolts+0x6a>
     878:	c7 e8       	ldi	r28, 0x87	; 135
     87a:	d3 e1       	ldi	r29, 0x13	; 19
     87c:	09 c0       	rjmp	.+18     	; 0x890 <updateVolts+0x7c>
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	64 eb       	ldi	r22, 0xB4	; 180
     884:	7b e2       	ldi	r23, 0x2B	; 43
     886:	81 e1       	ldi	r24, 0x11	; 17
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__udivmodsi4>
     88e:	e9 01       	movw	r28, r18
	sysVin = (uint16_t)( (uint32_t)( (uint32_t)sysVin * (uint32_t)atMegaVolt ) >> 9 );
     890:	7e 01       	movw	r14, r28
     892:	00 e0       	ldi	r16, 0x00	; 0
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	d6 94       	lsr	r13
     898:	c7 94       	ror	r12
     89a:	d6 94       	lsr	r13
     89c:	c7 94       	ror	r12
     89e:	96 01       	movw	r18, r12
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	c8 01       	movw	r24, r16
     8a6:	b7 01       	movw	r22, r14
     8a8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__mulsi3>
     8ac:	49 e0       	ldi	r20, 0x09	; 9
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	77 95       	ror	r23
     8b4:	67 95       	ror	r22
     8b6:	4a 95       	dec	r20
     8b8:	d1 f7       	brne	.-12     	; 0x8ae <updateVolts+0x9a>
     8ba:	6b 01       	movw	r12, r22
	lipoly = (uint16_t)( (uint32_t)( (uint32_t)lipoly * (uint32_t)atMegaVolt ) >> 9 );
     8bc:	b6 94       	lsr	r11
     8be:	a7 94       	ror	r10
     8c0:	b6 94       	lsr	r11
     8c2:	a7 94       	ror	r10
     8c4:	95 01       	movw	r18, r10
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	c8 01       	movw	r24, r16
     8cc:	b7 01       	movw	r22, r14
     8ce:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__mulsi3>
     8d2:	29 e0       	ldi	r18, 0x09	; 9
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	77 95       	ror	r23
     8da:	67 95       	ror	r22
     8dc:	2a 95       	dec	r18
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <updateVolts+0xc0>
	
	stateFlags.powerState = (sysVin > VIN_CUTOFF)? 1 : 0;
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	89 ed       	ldi	r24, 0xD9	; 217
     8e4:	c8 16       	cp	r12, r24
     8e6:	8e e0       	ldi	r24, 0x0E	; 14
     8e8:	d8 06       	cpc	r13, r24
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <updateVolts+0xda>
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	22 95       	swap	r18
     8f0:	22 0f       	add	r18, r18
     8f2:	22 0f       	add	r18, r18
     8f4:	20 7c       	andi	r18, 0xC0	; 192
     8f6:	80 91 43 03 	lds	r24, 0x0343
     8fa:	8f 7b       	andi	r24, 0xBF	; 191
     8fc:	82 2b       	or	r24, r18
     8fe:	80 93 43 03 	sts	0x0343, r24
	stateFlags.batteryState = (lipoly > LIPOLY_CUTOFF)? 1 : 0;
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	8d e0       	ldi	r24, 0x0D	; 13
     906:	69 34       	cpi	r22, 0x49	; 73
     908:	78 07       	cpc	r23, r24
     90a:	08 f0       	brcs	.+2      	; 0x90e <__stack+0xf>
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	27 95       	ror	r18
     910:	22 27       	eor	r18, r18
     912:	27 95       	ror	r18
     914:	80 91 43 03 	lds	r24, 0x0343
     918:	8f 77       	andi	r24, 0x7F	; 127
     91a:	82 2b       	or	r24, r18
     91c:	80 93 43 03 	sts	0x0343, r24
	
	// printf("Lipoly: %u\tVoltIn: %u\tATmega: %u\n",lipoly,sysVin,atMegaVolt);
	
	volt.lipoly = lipoly;
     920:	70 93 45 03 	sts	0x0345, r23
     924:	60 93 44 03 	sts	0x0344, r22
	volt.sysVin = sysVin;
     928:	d0 92 47 03 	sts	0x0347, r13
     92c:	c0 92 46 03 	sts	0x0346, r12
	volt.atMega = atMegaVolt;
     930:	d0 93 49 03 	sts	0x0349, r29
     934:	c0 93 48 03 	sts	0x0348, r28
	
	//return ((uint16_t) voltSample);
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	08 95       	ret

0000094e <flashOrangeLED>:
	
	sleep_disable();
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
     94e:	2f 92       	push	r2
     950:	3f 92       	push	r3
     952:	4f 92       	push	r4
     954:	5f 92       	push	r5
     956:	6f 92       	push	r6
     958:	7f 92       	push	r7
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	0f 92       	push	r0
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	89 83       	std	Y+1, r24	; 0x01
	for(;count>0; count--){
		LED_OR = HIGH;
		_delay_ms(high);
     97a:	26 2e       	mov	r2, r22
     97c:	33 24       	eor	r3, r3
     97e:	44 24       	eor	r4, r4
     980:	55 24       	eor	r5, r5
		LED_OR = LOW;
		_delay_ms(low);
     982:	64 2e       	mov	r6, r20
     984:	77 24       	eor	r7, r7
     986:	88 24       	eor	r8, r8
     988:	99 24       	eor	r9, r9
     98a:	83 c0       	rjmp	.+262    	; 0xa92 <flashOrangeLED+0x144>
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
		LED_OR = HIGH;
     98c:	28 9a       	sbi	0x05, 0	; 5
		_delay_ms(high);
     98e:	c2 01       	movw	r24, r4
     990:	b1 01       	movw	r22, r2
     992:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatunsisf>
     996:	5b 01       	movw	r10, r22
     998:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	4a e7       	ldi	r20, 0x7A	; 122
     9a0:	55 e4       	ldi	r21, 0x45	; 69
     9a2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     9a6:	7b 01       	movw	r14, r22
     9a8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	5f e3       	ldi	r21, 0x3F	; 63
     9b2:	0e 94 8b 09 	call	0x1316	; 0x1316 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	1c f4       	brge	.+6      	; 0x9c0 <flashOrangeLED+0x72>
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	23 c0       	rjmp	.+70     	; 0xa06 <flashOrangeLED+0xb8>
		__ticks = 1;
	else if (__tmp > 65535)
     9c0:	c8 01       	movw	r24, r16
     9c2:	b7 01       	movw	r22, r14
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	4f e7       	ldi	r20, 0x7F	; 127
     9ca:	57 e4       	ldi	r21, 0x47	; 71
     9cc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	ac f4       	brge	.+42     	; 0x9fe <flashOrangeLED+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d4:	c6 01       	movw	r24, r12
     9d6:	b5 01       	movw	r22, r10
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e2       	ldi	r20, 0x20	; 32
     9de:	51 e4       	ldi	r21, 0x41	; 65
     9e0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     9e4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <flashOrangeLED+0xa8>
     9ea:	80 e9       	ldi	r24, 0x90	; 144
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <flashOrangeLED+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f2:	61 50       	subi	r22, 0x01	; 1
     9f4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f6:	61 15       	cp	r22, r1
     9f8:	71 05       	cpc	r23, r1
     9fa:	b9 f7       	brne	.-18     	; 0x9ea <flashOrangeLED+0x9c>
     9fc:	07 c0       	rjmp	.+14     	; 0xa0c <flashOrangeLED+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fe:	c8 01       	movw	r24, r16
     a00:	b7 01       	movw	r22, r14
     a02:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     a06:	cb 01       	movw	r24, r22
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <flashOrangeLED+0xba>
		LED_OR = LOW;
     a0c:	28 98       	cbi	0x05, 0	; 5
		_delay_ms(low);
     a0e:	c4 01       	movw	r24, r8
     a10:	b3 01       	movw	r22, r6
     a12:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatunsisf>
     a16:	5b 01       	movw	r10, r22
     a18:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	4a e7       	ldi	r20, 0x7A	; 122
     a20:	55 e4       	ldi	r21, 0x45	; 69
     a22:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     a26:	7b 01       	movw	r14, r22
     a28:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e8       	ldi	r20, 0x80	; 128
     a30:	5f e3       	ldi	r21, 0x3F	; 63
     a32:	0e 94 8b 09 	call	0x1316	; 0x1316 <__cmpsf2>
     a36:	88 23       	and	r24, r24
     a38:	1c f4       	brge	.+6      	; 0xa40 <flashOrangeLED+0xf2>
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	23 c0       	rjmp	.+70     	; 0xa86 <flashOrangeLED+0x138>
		__ticks = 1;
	else if (__tmp > 65535)
     a40:	c8 01       	movw	r24, r16
     a42:	b7 01       	movw	r22, r14
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	3f ef       	ldi	r19, 0xFF	; 255
     a48:	4f e7       	ldi	r20, 0x7F	; 127
     a4a:	57 e4       	ldi	r21, 0x47	; 71
     a4c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     a50:	18 16       	cp	r1, r24
     a52:	ac f4       	brge	.+42     	; 0xa7e <flashOrangeLED+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a54:	c6 01       	movw	r24, r12
     a56:	b5 01       	movw	r22, r10
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e2       	ldi	r20, 0x20	; 32
     a5e:	51 e4       	ldi	r21, 0x41	; 65
     a60:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     a64:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     a68:	06 c0       	rjmp	.+12     	; 0xa76 <flashOrangeLED+0x128>
     a6a:	80 e9       	ldi	r24, 0x90	; 144
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <flashOrangeLED+0x120>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a72:	61 50       	subi	r22, 0x01	; 1
     a74:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a76:	61 15       	cp	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	b9 f7       	brne	.-18     	; 0xa6a <flashOrangeLED+0x11c>
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <flashOrangeLED+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     a86:	cb 01       	movw	r24, r22
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <flashOrangeLED+0x13a>
	sleep_disable();
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	81 50       	subi	r24, 0x01	; 1
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	e9 81       	ldd	r30, Y+1	; 0x01
     a94:	ee 23       	and	r30, r30
     a96:	09 f0       	breq	.+2      	; 0xa9a <flashOrangeLED+0x14c>
     a98:	79 cf       	rjmp	.-270    	; 0x98c <flashOrangeLED+0x3e>
		LED_OR = HIGH;
		_delay_ms(high);
		LED_OR = LOW;
		_delay_ms(low);
	}
}
     a9a:	0f 90       	pop	r0
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	cf 90       	pop	r12
     aac:	bf 90       	pop	r11
     aae:	af 90       	pop	r10
     ab0:	9f 90       	pop	r9
     ab2:	8f 90       	pop	r8
     ab4:	7f 90       	pop	r7
     ab6:	6f 90       	pop	r6
     ab8:	5f 90       	pop	r5
     aba:	4f 90       	pop	r4
     abc:	3f 90       	pop	r3
     abe:	2f 90       	pop	r2
     ac0:	08 95       	ret

00000ac2 <flashBlueLED>:

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
     ac2:	2f 92       	push	r2
     ac4:	3f 92       	push	r3
     ac6:	4f 92       	push	r4
     ac8:	5f 92       	push	r5
     aca:	6f 92       	push	r6
     acc:	7f 92       	push	r7
     ace:	8f 92       	push	r8
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	0f 92       	push	r0
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	89 83       	std	Y+1, r24	; 0x01
	for(;count>0; count--){
		LED_BL = HIGH;
		_delay_ms(high);
     aee:	26 2e       	mov	r2, r22
     af0:	33 24       	eor	r3, r3
     af2:	44 24       	eor	r4, r4
     af4:	55 24       	eor	r5, r5
		LED_BL = LOW;
		_delay_ms(low);
     af6:	64 2e       	mov	r6, r20
     af8:	77 24       	eor	r7, r7
     afa:	88 24       	eor	r8, r8
     afc:	99 24       	eor	r9, r9
     afe:	83 c0       	rjmp	.+262    	; 0xc06 <flashBlueLED+0x144>
	}
}

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
		LED_BL = HIGH;
     b00:	29 9a       	sbi	0x05, 1	; 5
		_delay_ms(high);
     b02:	c2 01       	movw	r24, r4
     b04:	b1 01       	movw	r22, r2
     b06:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatunsisf>
     b0a:	5b 01       	movw	r10, r22
     b0c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	4a e7       	ldi	r20, 0x7A	; 122
     b14:	55 e4       	ldi	r21, 0x45	; 69
     b16:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     b1a:	7b 01       	movw	r14, r22
     b1c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	40 e8       	ldi	r20, 0x80	; 128
     b24:	5f e3       	ldi	r21, 0x3F	; 63
     b26:	0e 94 8b 09 	call	0x1316	; 0x1316 <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	1c f4       	brge	.+6      	; 0xb34 <flashBlueLED+0x72>
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	23 c0       	rjmp	.+70     	; 0xb7a <flashBlueLED+0xb8>
		__ticks = 1;
	else if (__tmp > 65535)
     b34:	c8 01       	movw	r24, r16
     b36:	b7 01       	movw	r22, r14
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     b44:	18 16       	cp	r1, r24
     b46:	ac f4       	brge	.+42     	; 0xb72 <flashBlueLED+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b48:	c6 01       	movw	r24, r12
     b4a:	b5 01       	movw	r22, r10
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e2       	ldi	r20, 0x20	; 32
     b52:	51 e4       	ldi	r21, 0x41	; 65
     b54:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     b58:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <flashBlueLED+0xa8>
     b5e:	80 e9       	ldi	r24, 0x90	; 144
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <flashBlueLED+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b66:	61 50       	subi	r22, 0x01	; 1
     b68:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6a:	61 15       	cp	r22, r1
     b6c:	71 05       	cpc	r23, r1
     b6e:	b9 f7       	brne	.-18     	; 0xb5e <flashBlueLED+0x9c>
     b70:	07 c0       	rjmp	.+14     	; 0xb80 <flashBlueLED+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b72:	c8 01       	movw	r24, r16
     b74:	b7 01       	movw	r22, r14
     b76:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     b7a:	cb 01       	movw	r24, r22
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <flashBlueLED+0xba>
		LED_BL = LOW;
     b80:	29 98       	cbi	0x05, 1	; 5
		_delay_ms(low);
     b82:	c4 01       	movw	r24, r8
     b84:	b3 01       	movw	r22, r6
     b86:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatunsisf>
     b8a:	5b 01       	movw	r10, r22
     b8c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	4a e7       	ldi	r20, 0x7A	; 122
     b94:	55 e4       	ldi	r21, 0x45	; 69
     b96:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     b9a:	7b 01       	movw	r14, r22
     b9c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 8b 09 	call	0x1316	; 0x1316 <__cmpsf2>
     baa:	88 23       	and	r24, r24
     bac:	1c f4       	brge	.+6      	; 0xbb4 <flashBlueLED+0xf2>
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	23 c0       	rjmp	.+70     	; 0xbfa <flashBlueLED+0x138>
		__ticks = 1;
	else if (__tmp > 65535)
     bb4:	c8 01       	movw	r24, r16
     bb6:	b7 01       	movw	r22, r14
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	ac f4       	brge	.+42     	; 0xbf2 <flashBlueLED+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc8:	c6 01       	movw	r24, r12
     bca:	b5 01       	movw	r22, r10
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e2       	ldi	r20, 0x20	; 32
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     bd8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <flashBlueLED+0x128>
     bde:	80 e9       	ldi	r24, 0x90	; 144
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <flashBlueLED+0x120>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be6:	61 50       	subi	r22, 0x01	; 1
     be8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bea:	61 15       	cp	r22, r1
     bec:	71 05       	cpc	r23, r1
     bee:	b9 f7       	brne	.-18     	; 0xbde <flashBlueLED+0x11c>
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <flashBlueLED+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf2:	c8 01       	movw	r24, r16
     bf4:	b7 01       	movw	r22, r14
     bf6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fixunssfsi>
     bfa:	cb 01       	movw	r24, r22
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <flashBlueLED+0x13a>
		_delay_ms(low);
	}
}

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	81 50       	subi	r24, 0x01	; 1
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	e9 81       	ldd	r30, Y+1	; 0x01
     c08:	ee 23       	and	r30, r30
     c0a:	09 f0       	breq	.+2      	; 0xc0e <flashBlueLED+0x14c>
     c0c:	79 cf       	rjmp	.-270    	; 0xb00 <flashBlueLED+0x3e>
		LED_BL = HIGH;
		_delay_ms(high);
		LED_BL = LOW;
		_delay_ms(low);
	}
}
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	08 95       	ret

00000c36 <printHelpInfo>:
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 99 0b 	call	0x1732	; 0x1732 <puts>
		"B\tBattery mV\n"
		"M\tMonitor\n"
		"1 to 3\tToggle Config Flags\n"
		"`\tWrite Toggles to EEPROM and Review\n"
		"?\tConsole Useage\n\n");
}
     c3e:	08 95       	ret

00000c40 <deviceIdCheck>:
	volt.atMega = atMegaVolt;
	
	//return ((uint16_t) voltSample);
}

char deviceIdCheck(void){
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
	// printRegisters();
	CS_RFM = LOW;
     c44:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     c46:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     c48:	0d b4       	in	r0, 0x2d	; 45
     c4a:	07 fe       	sbrs	r0, 7
     c4c:	fd cf       	rjmp	.-6      	; 0xc48 <deviceIdCheck+0x8>
	return SPDR;
     c4e:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     c50:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     c52:	0d b4       	in	r0, 0x2d	; 45
     c54:	07 fe       	sbrs	r0, 7
     c56:	fd cf       	rjmp	.-6      	; 0xc52 <deviceIdCheck+0x12>
	return SPDR;
     c58:	0e b5       	in	r16, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     c5a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     c5c:	0d b4       	in	r0, 0x2d	; 45
     c5e:	07 fe       	sbrs	r0, 7
     c60:	fd cf       	rjmp	.-6      	; 0xc5c <deviceIdCheck+0x1c>
	return SPDR;
     c62:	1e b5       	in	r17, 0x2e	; 46
		transferSPI(0x00);
		uint8_t rfmDevType = transferSPI(0x00);
		uint8_t rfmVerCode = transferSPI(0x00);
	CS_RFM = HIGH;
     c64:	2a 9a       	sbi	0x05, 2	; 5
	
	printf("\n%X\t%X\n",rfmDevType,rfmVerCode);
     c66:	00 d0       	rcall	.+0      	; 0xc68 <deviceIdCheck+0x28>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <deviceIdCheck+0x2a>
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <deviceIdCheck+0x2c>
     c6c:	ed b7       	in	r30, 0x3d	; 61
     c6e:	fe b7       	in	r31, 0x3e	; 62
     c70:	31 96       	adiw	r30, 0x01	; 1
     c72:	8a e7       	ldi	r24, 0x7A	; 122
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	ad b7       	in	r26, 0x3d	; 61
     c78:	be b7       	in	r27, 0x3e	; 62
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	9c 93       	st	X, r25
     c7e:	8e 93       	st	-X, r24
     c80:	11 97       	sbiw	r26, 0x01	; 1
     c82:	02 83       	std	Z+2, r16	; 0x02
     c84:	13 82       	std	Z+3, r1	; 0x03
     c86:	14 83       	std	Z+4, r17	; 0x04
     c88:	15 82       	std	Z+5, r1	; 0x05
     c8a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
	
	
	rfmDevType ^= 0b00001000;
	rfmVerCode ^= 0b00000110;
	
	if(rfmDevType==0 && rfmVerCode==0) return (1);
     c8e:	8d b7       	in	r24, 0x3d	; 61
     c90:	9e b7       	in	r25, 0x3e	; 62
     c92:	06 96       	adiw	r24, 0x06	; 6
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	9e bf       	out	0x3e, r25	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	8d bf       	out	0x3d, r24	; 61
     c9e:	08 30       	cpi	r16, 0x08	; 8
     ca0:	11 f0       	breq	.+4      	; 0xca6 <deviceIdCheck+0x66>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <deviceIdCheck+0x6e>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	16 30       	cpi	r17, 0x06	; 6
     caa:	09 f4       	brne	.+2      	; 0xcae <deviceIdCheck+0x6e>
     cac:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <transmitELT_Packet>:
		}
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	}
}

void transmitELT_Packet(void){ //uint8_t *targetArray, uint8_t count){
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
	
	
	radioWriteReg(0x08,0x01);
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
     cc4:	80 ea       	ldi	r24, 0xA0	; 160
     cc6:	9f e0       	ldi	r25, 0x0F	; 15
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <transmitELT_Packet+0x14>
	_delay_ms(1);
	radioWriteReg(0x08,0x00);
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x71, 0x23);
     cd4:	81 e7       	ldi	r24, 0x71	; 113
     cd6:	63 e2       	ldi	r22, 0x23	; 35
     cd8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x72, 16);
     cdc:	82 e7       	ldi	r24, 0x72	; 114
     cde:	60 e1       	ldi	r22, 0x10	; 16
     ce0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	radioWriteReg(0x6D, 7);
     ce4:	8d e6       	ldi	r24, 0x6D	; 109
     ce6:	67 e0       	ldi	r22, 0x07	; 7
     ce8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
	
	if((radioReadReg(0x07)&(1<<RFM_xton)) != (1<<RFM_xton) ){
     cec:	87 e0       	ldi	r24, 0x07	; 7
     cee:	0e 94 cb 02 	call	0x596	; 0x596 <radioReadReg>
     cf2:	80 fd       	sbrc	r24, 0
     cf4:	08 c0       	rjmp	.+16     	; 0xd06 <transmitELT_Packet+0x52>
		radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
     cfe:	80 e4       	ldi	r24, 0x40	; 64
     d00:	9f e1       	ldi	r25, 0x1F	; 31
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <transmitELT_Packet+0x4e>
	}
	
	//uint8_t targetArray[] = "KE7ZLH,040396417,111758380,235959,08,11,1465,3836,4597,3041\0";
	//				FCC ID, Lat, Long, UTC Fix, # Sat's, HDOP, Altitude, LiPoly, System In, AtMega
	//				Slightly Reordered from $GPGGA. Want Lat/Long in front, incase of clock skew, battery lag
	snprintf(dataBufferA,BUFFER_SIZE,"KE7ZLH,%+09li,%+09li,%06lu,%u,%u,%+04i,%u,%u,%u\n", 
     d06:	8d b7       	in	r24, 0x3d	; 61
     d08:	9e b7       	in	r25, 0x3e	; 62
     d0a:	4e 97       	sbiw	r24, 0x1e	; 30
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	9e bf       	out	0x3e, r25	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	8d bf       	out	0x3d, r24	; 61
     d16:	ed b7       	in	r30, 0x3d	; 61
     d18:	fe b7       	in	r31, 0x3e	; 62
     d1a:	31 96       	adiw	r30, 0x01	; 1
     d1c:	04 eb       	ldi	r16, 0xB4	; 180
     d1e:	12 e0       	ldi	r17, 0x02	; 2
     d20:	ad b7       	in	r26, 0x3d	; 61
     d22:	be b7       	in	r27, 0x3e	; 62
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	1c 93       	st	X, r17
     d28:	0e 93       	st	-X, r16
     d2a:	11 97       	sbiw	r26, 0x01	; 1
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	93 83       	std	Z+3, r25	; 0x03
     d32:	82 83       	std	Z+2, r24	; 0x02
     d34:	82 e8       	ldi	r24, 0x82	; 130
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	95 83       	std	Z+5, r25	; 0x05
     d3a:	84 83       	std	Z+4, r24	; 0x04
     d3c:	20 91 34 03 	lds	r18, 0x0334
     d40:	30 91 35 03 	lds	r19, 0x0335
     d44:	40 91 36 03 	lds	r20, 0x0336
     d48:	90 91 37 03 	lds	r25, 0x0337
     d4c:	89 2f       	mov	r24, r25
     d4e:	8f 73       	andi	r24, 0x3F	; 63
     d50:	26 83       	std	Z+6, r18	; 0x06
     d52:	37 83       	std	Z+7, r19	; 0x07
     d54:	40 87       	std	Z+8, r20	; 0x08
     d56:	81 87       	std	Z+9, r24	; 0x09
     d58:	92 95       	swap	r25
     d5a:	96 95       	lsr	r25
     d5c:	96 95       	lsr	r25
     d5e:	93 70       	andi	r25, 0x03	; 3
     d60:	80 91 38 03 	lds	r24, 0x0338
     d64:	68 2f       	mov	r22, r24
     d66:	66 0f       	add	r22, r22
     d68:	66 0f       	add	r22, r22
     d6a:	69 2b       	or	r22, r25
     d6c:	82 95       	swap	r24
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	83 70       	andi	r24, 0x03	; 3
     d74:	90 91 39 03 	lds	r25, 0x0339
     d78:	59 2f       	mov	r21, r25
     d7a:	55 0f       	add	r21, r21
     d7c:	55 0f       	add	r21, r21
     d7e:	58 2b       	or	r21, r24
     d80:	92 95       	swap	r25
     d82:	96 95       	lsr	r25
     d84:	96 95       	lsr	r25
     d86:	93 70       	andi	r25, 0x03	; 3
     d88:	20 91 3a 03 	lds	r18, 0x033A
     d8c:	32 2f       	mov	r19, r18
     d8e:	33 0f       	add	r19, r19
     d90:	33 0f       	add	r19, r19
     d92:	39 2b       	or	r19, r25
     d94:	22 95       	swap	r18
     d96:	26 95       	lsr	r18
     d98:	26 95       	lsr	r18
     d9a:	23 70       	andi	r18, 0x03	; 3
     d9c:	40 91 3b 03 	lds	r20, 0x033B
     da0:	84 2f       	mov	r24, r20
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	88 0f       	add	r24, r24
     da6:	88 0f       	add	r24, r24
     da8:	82 2b       	or	r24, r18
     daa:	62 87       	std	Z+10, r22	; 0x0a
     dac:	53 87       	std	Z+11, r21	; 0x0b
     dae:	34 87       	std	Z+12, r19	; 0x0c
     db0:	85 87       	std	Z+13, r24	; 0x0d
     db2:	42 95       	swap	r20
     db4:	4f 70       	andi	r20, 0x0F	; 15
     db6:	90 91 3c 03 	lds	r25, 0x033C
     dba:	39 2f       	mov	r19, r25
     dbc:	32 95       	swap	r19
     dbe:	30 7f       	andi	r19, 0xF0	; 240
     dc0:	34 2b       	or	r19, r20
     dc2:	92 95       	swap	r25
     dc4:	9f 70       	andi	r25, 0x0F	; 15
     dc6:	20 91 3d 03 	lds	r18, 0x033D
     dca:	82 2f       	mov	r24, r18
     dcc:	82 95       	swap	r24
     dce:	80 7f       	andi	r24, 0xF0	; 240
     dd0:	89 2b       	or	r24, r25
     dd2:	22 95       	swap	r18
     dd4:	2f 70       	andi	r18, 0x0F	; 15
     dd6:	36 87       	std	Z+14, r19	; 0x0e
     dd8:	87 87       	std	Z+15, r24	; 0x0f
     dda:	20 8b       	std	Z+16, r18	; 0x10
     ddc:	11 8a       	std	Z+17, r1	; 0x11
     dde:	80 91 40 03 	lds	r24, 0x0340
     de2:	82 8b       	std	Z+18, r24	; 0x12
     de4:	13 8a       	std	Z+19, r1	; 0x13
     de6:	80 91 41 03 	lds	r24, 0x0341
     dea:	84 8b       	std	Z+20, r24	; 0x14
     dec:	15 8a       	std	Z+21, r1	; 0x15
     dee:	80 91 3e 03 	lds	r24, 0x033E
     df2:	90 91 3f 03 	lds	r25, 0x033F
     df6:	97 8b       	std	Z+23, r25	; 0x17
     df8:	86 8b       	std	Z+22, r24	; 0x16
     dfa:	80 91 44 03 	lds	r24, 0x0344
     dfe:	90 91 45 03 	lds	r25, 0x0345
     e02:	91 8f       	std	Z+25, r25	; 0x19
     e04:	80 8f       	std	Z+24, r24	; 0x18
     e06:	80 91 46 03 	lds	r24, 0x0346
     e0a:	90 91 47 03 	lds	r25, 0x0347
     e0e:	93 8f       	std	Z+27, r25	; 0x1b
     e10:	82 8f       	std	Z+26, r24	; 0x1a
     e12:	80 91 48 03 	lds	r24, 0x0348
     e16:	90 91 49 03 	lds	r25, 0x0349
     e1a:	95 8f       	std	Z+29, r25	; 0x1d
     e1c:	84 8f       	std	Z+28, r24	; 0x1c
     e1e:	0e 94 ce 0b 	call	0x179c	; 0x179c <snprintf>
		(int32_t)gps.lat,(int32_t)gps.lon,(uint32_t)gps.time,gps.sats,gps.hdop,gps.alt,volt.lipoly,volt.sysVin,volt.atMega);
	
	printf("%s",dataBufferA);
     e22:	ed b7       	in	r30, 0x3d	; 61
     e24:	fe b7       	in	r31, 0x3e	; 62
     e26:	7a 96       	adiw	r30, 0x1a	; 26
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	fe bf       	out	0x3e, r31	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	ed bf       	out	0x3d, r30	; 61
     e32:	83 eb       	ldi	r24, 0xB3	; 179
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	92 83       	std	Z+2, r25	; 0x02
     e38:	81 83       	std	Z+1, r24	; 0x01
     e3a:	14 83       	std	Z+4, r17	; 0x04
     e3c:	03 83       	std	Z+3, r16	; 0x03
     e3e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
	
	CS_RFM = LOW;
     e42:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	8e bd       	out	0x2e, r24	; 46
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
	while(!(SPSR & _BV(SPIF)));
     e50:	0d b4       	in	r0, 0x2d	; 45
     e52:	07 fe       	sbrs	r0, 7
     e54:	fd cf       	rjmp	.-6      	; 0xe50 <transmitELT_Packet+0x19c>
	return SPDR;
     e56:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     e58:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     e5a:	0d b4       	in	r0, 0x2d	; 45
     e5c:	07 fe       	sbrs	r0, 7
     e5e:	fd cf       	rjmp	.-6      	; 0xe5a <transmitELT_Packet+0x1a6>
	return SPDR;
     e60:	8e b5       	in	r24, 0x2e	; 46
     e62:	80 e0       	ldi	r24, 0x00	; 0


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     e64:	9a ea       	ldi	r25, 0xAA	; 170
     e66:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
     e68:	0d b4       	in	r0, 0x2d	; 45
     e6a:	07 fe       	sbrs	r0, 7
     e6c:	fd cf       	rjmp	.-6      	; 0xe68 <transmitELT_Packet+0x1b4>
	return SPDR;
     e6e:	2e b5       	in	r18, 0x2e	; 46
		transferSPI((RFM_WRITE<<7) | 0x7F);
		transferSPI(0x00);
		for(uint8_t i=0; i<4; i++){
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	84 30       	cpi	r24, 0x04	; 4
     e74:	c1 f7       	brne	.-16     	; 0xe66 <transmitELT_Packet+0x1b2>


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     e76:	89 e0       	ldi	r24, 0x09	; 9
     e78:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     e7a:	0d b4       	in	r0, 0x2d	; 45
     e7c:	07 fe       	sbrs	r0, 7
     e7e:	fd cf       	rjmp	.-6      	; 0xe7a <transmitELT_Packet+0x1c6>
	return SPDR;
     e80:	8e b5       	in	r24, 0x2e	; 46
     e82:	80 e0       	ldi	r24, 0x00	; 0
			transferSPI(0xAA);
		}
		transferSPI(0x09);
		for(uint8_t i=0; i<BUFFER_SIZE; i++){ // String, obvious consequences if there is no \0 present
			if(dataBufferA[i] == '\0') break;
     e84:	e8 2f       	mov	r30, r24
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	ec 54       	subi	r30, 0x4C	; 76
     e8a:	fd 4f       	sbci	r31, 0xFD	; 253
     e8c:	e0 81       	ld	r30, Z
     e8e:	ee 23       	and	r30, r30
     e90:	41 f0       	breq	.+16     	; 0xea2 <transmitELT_Packet+0x1ee>


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     e92:	ee bd       	out	0x2e, r30	; 46
	while(!(SPSR & _BV(SPIF)));
     e94:	0d b4       	in	r0, 0x2d	; 45
     e96:	07 fe       	sbrs	r0, 7
     e98:	fd cf       	rjmp	.-6      	; 0xe94 <transmitELT_Packet+0x1e0>
	return SPDR;
     e9a:	9e b5       	in	r25, 0x2e	; 46
		transferSPI(0x00);
		for(uint8_t i=0; i<4; i++){
			transferSPI(0xAA);
		}
		transferSPI(0x09);
		for(uint8_t i=0; i<BUFFER_SIZE; i++){ // String, obvious consequences if there is no \0 present
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 38       	cpi	r24, 0x80	; 128
     ea0:	89 f7       	brne	.-30     	; 0xe84 <transmitELT_Packet+0x1d0>
			if(dataBufferA[i] == '\0') break;
			transferSPI(dataBufferA[i]);
			//if(i == BUFFER_SIZE) printf("Fail on String\n");
		}
	CS_RFM = HIGH;
     ea2:	2a 9a       	sbi	0x05, 2	; 5
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));
     ea4:	87 e0       	ldi	r24, 0x07	; 7
     ea6:	68 e0       	ldi	r22, 0x08	; 8
     ea8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
     eac:	00 e0       	ldi	r16, 0x00	; 0
     eae:	c0 ea       	ldi	r28, 0xA0	; 160
     eb0:	df e0       	ldi	r29, 0x0F	; 15

	for(uint8_t i=0; i<255; i++){
		if((radioReadReg(0x07)&0x08) == 0){
     eb2:	87 e0       	ldi	r24, 0x07	; 7
     eb4:	0e 94 cb 02 	call	0x596	; 0x596 <radioReadReg>
     eb8:	83 ff       	sbrs	r24, 3
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <transmitELT_Packet+0x214>
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <transmitELT_Packet+0x20a>
		}
	CS_RFM = HIGH;
	
	radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon));

	for(uint8_t i=0; i<255; i++){
     ec2:	0f 5f       	subi	r16, 0xFF	; 255
     ec4:	0f 3f       	cpi	r16, 0xFF	; 255
     ec6:	a9 f7       	brne	.-22     	; 0xeb2 <transmitELT_Packet+0x1fe>
			//printf("Break@ %u\n",i);
			break;
		}
		_delay_ms(1);
	}
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <loop>:
	
	// Console Usage Hints
	printHelpInfo();
}

void loop(void){
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
	if(stateFlags.intSource == INT_SRC_WDT){
     ed6:	80 91 43 03 	lds	r24, 0x0343
     eda:	8c 71       	andi	r24, 0x1C	; 28
     edc:	88 30       	cpi	r24, 0x08	; 8
     ede:	09 f0       	breq	.+2      	; 0xee2 <loop+0x10>
     ee0:	69 c0       	rjmp	.+210    	; 0xfb4 <loop+0xe2>
		stateFlags.intSource = INT_SRC_CLEAR;
     ee2:	80 91 43 03 	lds	r24, 0x0343
     ee6:	83 7e       	andi	r24, 0xE3	; 227
     ee8:	80 93 43 03 	sts	0x0343, r24
		
		updateVolts();
     eec:	0e 94 0a 04 	call	0x814	; 0x814 <updateVolts>
		
		stateFlags.monitorMode = 1;
     ef0:	80 91 43 03 	lds	r24, 0x0343
     ef4:	80 62       	ori	r24, 0x20	; 32
     ef6:	80 93 43 03 	sts	0x0343, r24
			flashOrangeLED(2,5,5);
			printf("Lipoly: %u\tVoltIn: %u\tATmega: %u\n",volt.lipoly,volt.sysVin,volt.atMega);
		}
		#endif // TRANSMITTER
		#ifdef RFM22B
		if(stateFlags.monitorMode==1 && stateFlags.batteryState==1){
     efa:	80 91 43 03 	lds	r24, 0x0343
     efe:	85 ff       	sbrs	r24, 5
     f00:	4b c0       	rjmp	.+150    	; 0xf98 <loop+0xc6>
     f02:	80 91 43 03 	lds	r24, 0x0343
     f06:	87 ff       	sbrs	r24, 7
     f08:	47 c0       	rjmp	.+142    	; 0xf98 <loop+0xc6>
			flashOrangeLED(2,5,5);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	65 e0       	ldi	r22, 0x05	; 5
     f0e:	45 e0       	ldi	r20, 0x05	; 5
     f10:	0e 94 a7 04 	call	0x94e	; 0x94e <flashOrangeLED>
			printf("Lipoly: %u\tVoltIn: %u\tATmega: %u\n",volt.lipoly,volt.sysVin,volt.atMega);
     f14:	8d b7       	in	r24, 0x3d	; 61
     f16:	9e b7       	in	r25, 0x3e	; 62
     f18:	08 97       	sbiw	r24, 0x08	; 8
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	9e bf       	out	0x3e, r25	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	8d bf       	out	0x3d, r24	; 61
     f24:	ed b7       	in	r30, 0x3d	; 61
     f26:	fe b7       	in	r31, 0x3e	; 62
     f28:	31 96       	adiw	r30, 0x01	; 1
     f2a:	86 eb       	ldi	r24, 0xB6	; 182
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	ad b7       	in	r26, 0x3d	; 61
     f30:	be b7       	in	r27, 0x3e	; 62
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	9c 93       	st	X, r25
     f36:	8e 93       	st	-X, r24
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	80 91 44 03 	lds	r24, 0x0344
     f3e:	90 91 45 03 	lds	r25, 0x0345
     f42:	93 83       	std	Z+3, r25	; 0x03
     f44:	82 83       	std	Z+2, r24	; 0x02
     f46:	80 91 46 03 	lds	r24, 0x0346
     f4a:	90 91 47 03 	lds	r25, 0x0347
     f4e:	95 83       	std	Z+5, r25	; 0x05
     f50:	84 83       	std	Z+4, r24	; 0x04
     f52:	80 91 48 03 	lds	r24, 0x0348
     f56:	90 91 49 03 	lds	r25, 0x0349
     f5a:	97 83       	std	Z+7, r25	; 0x07
     f5c:	86 83       	std	Z+6, r24	; 0x06
     f5e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
			

			radioWriteReg(OPCONTROL1_REG, (1<<RFM_xton));
     f62:	8d b7       	in	r24, 0x3d	; 61
     f64:	9e b7       	in	r25, 0x3e	; 62
     f66:	08 96       	adiw	r24, 0x08	; 8
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	9e bf       	out	0x3e, r25	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	8d bf       	out	0x3d, r24	; 61
     f72:	87 e0       	ldi	r24, 0x07	; 7
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
     f7a:	00 ea       	ldi	r16, 0xA0	; 160
     f7c:	1f e0       	ldi	r17, 0x0F	; 15
     f7e:	c8 01       	movw	r24, r16
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <loop+0xae>
			_delay_ms(1);
			// radioWriteReg(OPCONTROL1_REG, (1<<RFM_txon) | (1<<RFM_xton));
			// _delay_ms(10);
			
			transmitELT_Packet(); // Want to send packet before battery sags in worst case
     f84:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <transmitELT_Packet>
     f88:	c8 01       	movw	r24, r16
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <loop+0xb8>
			_delay_ms(1);
			transmitELT_Beacon();
     f8e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <transmitELT_Beacon>
     f92:	c8 01       	movw	r24, r16
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <loop+0xc2>
			_delay_ms(1);
			
			
			radioWriteReg(OPCONTROL1_REG, 0x00);
		} else {
			radioWriteReg(OPCONTROL1_REG, 0x00);
     f98:	87 e0       	ldi	r24, 0x07	; 7
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
		}
		#endif // RFM22B
		
		uint8_t tempReg = WDTCSR;
     fa0:	90 91 60 00 	lds	r25, 0x0060
		tempReg |= _BV(WDIE);
     fa4:	90 64       	ori	r25, 0x40	; 64
		WDTCSR |= (1<<WDCE)|(1<<WDE);
     fa6:	80 91 60 00 	lds	r24, 0x0060
     faa:	88 61       	ori	r24, 0x18	; 24
     fac:	80 93 60 00 	sts	0x0060, r24
		WDTCSR = tempReg;
     fb0:	90 93 60 00 	sts	0x0060, r25
	}
	if(stateFlags.intSource == INT_SRC_TIMER){
     fb4:	80 91 43 03 	lds	r24, 0x0343
	}
	
	#ifdef RECEIVER
	if(stateFlags.powerState){
     fb8:	80 91 43 03 	lds	r24, 0x0343
     fbc:	86 ff       	sbrs	r24, 6
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <loop+0x100>
		OCR1A = volt.lipoly;
     fc0:	80 91 44 03 	lds	r24, 0x0344
     fc4:	90 91 45 03 	lds	r25, 0x0345
     fc8:	90 93 89 00 	sts	0x0089, r25
     fcc:	80 93 88 00 	sts	0x0088, r24
     fd0:	07 c0       	rjmp	.+14     	; 0xfe0 <loop+0x10e>
	} else{
		OCR1A = 0;
     fd2:	10 92 89 00 	sts	0x0089, r1
     fd6:	10 92 88 00 	sts	0x0088, r1
		systemSleep(8);
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	0e 94 95 01 	call	0x32a	; 0x32a <systemSleep>
	}
	#endif // RECEIVER
}
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <printRegisters>:

void printRegisters(void){
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
	
	
	printf("\n\t");
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <printRegisters+0xe>
     ff4:	88 ed       	ldi	r24, 0xD8	; 216
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	ad b7       	in	r26, 0x3d	; 61
     ffa:	be b7       	in	r27, 0x3e	; 62
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
    1008:	c0 e0       	ldi	r28, 0x00	; 0
    100a:	d0 e0       	ldi	r29, 0x00	; 0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
	for(uint8_t c=0; c<16; c++)	printf("%X\t",c);
    1010:	7b ed       	ldi	r23, 0xDB	; 219
    1012:	e7 2e       	mov	r14, r23
    1014:	71 e0       	ldi	r23, 0x01	; 1
    1016:	f7 2e       	mov	r15, r23
    1018:	00 d0       	rcall	.+0      	; 0x101a <printRegisters+0x34>
    101a:	00 d0       	rcall	.+0      	; 0x101c <printRegisters+0x36>
    101c:	ed b7       	in	r30, 0x3d	; 61
    101e:	fe b7       	in	r31, 0x3e	; 62
    1020:	f2 82       	std	Z+2, r15	; 0x02
    1022:	e1 82       	std	Z+1, r14	; 0x01
    1024:	d4 83       	std	Z+4, r29	; 0x04
    1026:	c3 83       	std	Z+3, r28	; 0x03
    1028:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
    102c:	21 96       	adiw	r28, 0x01	; 1
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	c0 31       	cpi	r28, 0x10	; 16
    1038:	d1 05       	cpc	r29, r1
    103a:	71 f7       	brne	.-36     	; 0x1018 <printRegisters+0x32>
	printf("\n");
    103c:	8a e0       	ldi	r24, 0x0A	; 10
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 92 0b 	call	0x1724	; 0x1724 <putchar>
    1044:	c0 e0       	ldi	r28, 0x00	; 0
    1046:	d0 e0       	ldi	r29, 0x00	; 0
    1048:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8_t j=0; j<8; j++){
		printf("%X\t",j);
    104a:	00 d0       	rcall	.+0      	; 0x104c <printRegisters+0x66>
    104c:	00 d0       	rcall	.+0      	; 0x104e <printRegisters+0x68>
    104e:	ad b7       	in	r26, 0x3d	; 61
    1050:	be b7       	in	r27, 0x3e	; 62
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	ec 92       	st	X, r14
    1056:	11 97       	sbiw	r26, 0x01	; 1
    1058:	12 96       	adiw	r26, 0x02	; 2
    105a:	fc 92       	st	X, r15
    105c:	12 97       	sbiw	r26, 0x02	; 2
    105e:	14 96       	adiw	r26, 0x04	; 4
    1060:	dc 93       	st	X, r29
    1062:	ce 93       	st	-X, r28
    1064:	13 97       	sbiw	r26, 0x03	; 3
    1066:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
		CS_RFM = LOW;
    106a:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    106c:	0e bd       	out	0x2e, r16	; 46
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
	while(!(SPSR & _BV(SPIF)));
    1076:	0d b4       	in	r0, 0x2d	; 45
    1078:	07 fe       	sbrs	r0, 7
    107a:	fd cf       	rjmp	.-6      	; 0x1076 <printRegisters+0x90>
	return SPDR;
    107c:	8e b5       	in	r24, 0x2e	; 46
    107e:	10 e0       	ldi	r17, 0x00	; 0


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
    1080:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    1082:	0d b4       	in	r0, 0x2d	; 45
    1084:	07 fe       	sbrs	r0, 7
    1086:	fd cf       	rjmp	.-6      	; 0x1082 <printRegisters+0x9c>
	return SPDR;
    1088:	8e b5       	in	r24, 0x2e	; 46
			transferSPI(16*j);
			for(uint8_t k=0; k<16; k++){
				uint8_t response = transferSPI(0x00);
				printf("%X\t",response);
    108a:	00 d0       	rcall	.+0      	; 0x108c <printRegisters+0xa6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <printRegisters+0xa8>
    108e:	ed b7       	in	r30, 0x3d	; 61
    1090:	fe b7       	in	r31, 0x3e	; 62
    1092:	31 96       	adiw	r30, 0x01	; 1
    1094:	ad b7       	in	r26, 0x3d	; 61
    1096:	be b7       	in	r27, 0x3e	; 62
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	ec 92       	st	X, r14
    109c:	11 97       	sbiw	r26, 0x01	; 1
    109e:	12 96       	adiw	r26, 0x02	; 2
    10a0:	fc 92       	st	X, r15
    10a2:	82 83       	std	Z+2, r24	; 0x02
    10a4:	13 82       	std	Z+3, r1	; 0x03
    10a6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
	printf("\n");
	for(uint8_t j=0; j<8; j++){
		printf("%X\t",j);
		CS_RFM = LOW;
			transferSPI(16*j);
			for(uint8_t k=0; k<16; k++){
    10aa:	1f 5f       	subi	r17, 0xFF	; 255
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	10 31       	cpi	r17, 0x10	; 16
    10b6:	21 f7       	brne	.-56     	; 0x1080 <printRegisters+0x9a>
				uint8_t response = transferSPI(0x00);
				printf("%X\t",response);
			}
		CS_RFM = HIGH;
    10b8:	2a 9a       	sbi	0x05, 2	; 5
		printf("\n");
    10ba:	8a e0       	ldi	r24, 0x0A	; 10
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 92 0b 	call	0x1724	; 0x1724 <putchar>
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	00 5f       	subi	r16, 0xF0	; 240
	
	
	printf("\n\t");
	for(uint8_t c=0; c<16; c++)	printf("%X\t",c);
	printf("\n");
	for(uint8_t j=0; j<8; j++){
    10c6:	00 38       	cpi	r16, 0x80	; 128
    10c8:	09 f0       	breq	.+2      	; 0x10cc <printRegisters+0xe6>
    10ca:	bf cf       	rjmp	.-130    	; 0x104a <printRegisters+0x64>
	//printf("\n");
	
	//printf("_T\t%u",TCNT1);


}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <setup>:
	while(1){		
		loop();
	}
}

void setup(void){
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
	uint8_t startStatus = atMegaInit();
    10e2:	0e 94 4d 01 	call	0x29a	; 0x29a <atMegaInit>
    10e6:	08 2f       	mov	r16, r24
	stateFlags.systemState = ACTIVE;
    10e8:	80 91 43 03 	lds	r24, 0x0343
    10ec:	83 60       	ori	r24, 0x03	; 3
    10ee:	80 93 43 03 	sts	0x0343, r24
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	c0 ea       	ldi	r28, 0xA0	; 160
    10f6:	df e0       	ldi	r29, 0x0F	; 15
	
	for(uint8_t i=0; i<5; i++){
		radioWriteReg(0x07, 0x80);		// Reset the Chip
    10f8:	87 e0       	ldi	r24, 0x07	; 7
    10fa:	60 e8       	ldi	r22, 0x80	; 128
    10fc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <radioWriteReg>
    1100:	ce 01       	movw	r24, r28
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <setup+0x28>

void setup(void){
	uint8_t startStatus = atMegaInit();
	stateFlags.systemState = ACTIVE;
	
	for(uint8_t i=0; i<5; i++){
    1106:	1f 5f       	subi	r17, 0xFF	; 255
    1108:	15 30       	cpi	r17, 0x05	; 5
    110a:	b1 f7       	brne	.-20     	; 0x10f8 <setup+0x1e>
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	c0 ea       	ldi	r28, 0xA0	; 160
    1110:	df e0       	ldi	r29, 0x0F	; 15
		radioWriteReg(0x07, 0x80);		// Reset the Chip
		_delay_ms(1);
	}
	for(uint8_t i=0; i<0xFF; i++){
		if((radioReadReg(0x05)&0x02) == 0x02) break;
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	0e 94 cb 02 	call	0x596	; 0x596 <radioReadReg>
    1118:	81 fd       	sbrc	r24, 1
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <setup+0x4e>
    111c:	ce 01       	movw	r24, r28
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <setup+0x44>
	
	for(uint8_t i=0; i<5; i++){
		radioWriteReg(0x07, 0x80);		// Reset the Chip
		_delay_ms(1);
	}
	for(uint8_t i=0; i<0xFF; i++){
    1122:	1f 5f       	subi	r17, 0xFF	; 255
    1124:	1f 3f       	cpi	r17, 0xFF	; 255
    1126:	a9 f7       	brne	.-22     	; 0x1112 <setup+0x38>
		if((radioReadReg(0x05)&0x02) == 0x02) break;
		_delay_ms(1);
	}
	
	radioMode(ACTIVE);
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <radioMode>
	
	// Tasks and Routines
	printf("\n\nKatanaLRS v1\nBy Steve Carlson May 2013\n\n");
    112e:	8f ed       	ldi	r24, 0xDF	; 223
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 99 0b 	call	0x1732	; 0x1732 <puts>
	printf("Reset Source: "); //%X\n",startStatus); //%X\n", startStatus);
    1136:	00 d0       	rcall	.+0      	; 0x1138 <setup+0x5e>
    1138:	89 e0       	ldi	r24, 0x09	; 9
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	ed b7       	in	r30, 0x3d	; 61
    113e:	fe b7       	in	r31, 0x3e	; 62
    1140:	92 83       	std	Z+2, r25	; 0x02
    1142:	81 83       	std	Z+1, r24	; 0x01
    1144:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
	if(startStatus&WDRF) printf("WatchDog\t"); // From iom328p.h in AVR Include Folder
    1148:	c0 2f       	mov	r28, r16
    114a:	d0 e0       	ldi	r29, 0x00	; 0
    114c:	ce 01       	movw	r24, r28
    114e:	83 70       	andi	r24, 0x03	; 3
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	89 2b       	or	r24, r25
    1158:	59 f0       	breq	.+22     	; 0x1170 <setup+0x96>
    115a:	00 d0       	rcall	.+0      	; 0x115c <setup+0x82>
    115c:	88 e1       	ldi	r24, 0x18	; 24
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	ed b7       	in	r30, 0x3d	; 61
    1162:	fe b7       	in	r31, 0x3e	; 62
    1164:	92 83       	std	Z+2, r25	; 0x02
    1166:	81 83       	std	Z+1, r24	; 0x01
    1168:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
	if(startStatus&BORF) printf("BrownOut\t");
    1170:	c1 ff       	sbrs	r28, 1
    1172:	0b c0       	rjmp	.+22     	; 0x118a <setup+0xb0>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <setup+0x9c>
    1176:	82 e2       	ldi	r24, 0x22	; 34
    1178:	92 e0       	ldi	r25, 0x02	; 2
    117a:	ed b7       	in	r30, 0x3d	; 61
    117c:	fe b7       	in	r31, 0x3e	; 62
    117e:	92 83       	std	Z+2, r25	; 0x02
    1180:	81 83       	std	Z+1, r24	; 0x01
    1182:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
	if(startStatus&EXTRF) printf("External\t");
    118a:	c0 ff       	sbrs	r28, 0
    118c:	0b c0       	rjmp	.+22     	; 0x11a4 <setup+0xca>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <setup+0xb6>
    1190:	8c e2       	ldi	r24, 0x2C	; 44
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	ed b7       	in	r30, 0x3d	; 61
    1196:	fe b7       	in	r31, 0x3e	; 62
    1198:	92 83       	std	Z+2, r25	; 0x02
    119a:	81 83       	std	Z+1, r24	; 0x01
    119c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
	if(startStatus&PORF) printf("PowerOn\t");
	printf("\n\n");
    11a4:	86 e3       	ldi	r24, 0x36	; 54
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	0e 94 99 0b 	call	0x1732	; 0x1732 <puts>
	//	WDRF BORF EXTRF PORF
	
	flashOrangeLED(10,10,40);
    11ac:	8a e0       	ldi	r24, 0x0A	; 10
    11ae:	6a e0       	ldi	r22, 0x0A	; 10
    11b0:	48 e2       	ldi	r20, 0x28	; 40
    11b2:	0e 94 a7 04 	call	0x94e	; 0x94e <flashOrangeLED>
	
	printf("Device ID Check: ");
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <setup+0xde>
    11b8:	88 e3       	ldi	r24, 0x38	; 56
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	ed b7       	in	r30, 0x3d	; 61
    11be:	fe b7       	in	r31, 0x3e	; 62
    11c0:	92 83       	std	Z+2, r25	; 0x02
    11c2:	81 83       	std	Z+1, r24	; 0x01
    11c4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
	if(deviceIdCheck()){
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0e 94 20 06 	call	0xc40	; 0xc40 <deviceIdCheck>
    11d0:	88 23       	and	r24, r24
    11d2:	19 f0       	breq	.+6      	; 0x11da <setup+0x100>
		printf("OK\n");
    11d4:	8a e4       	ldi	r24, 0x4A	; 74
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <setup+0x104>
	} else{
		printf("FAILED!\n");
    11da:	8d e4       	ldi	r24, 0x4D	; 77
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 99 0b 	call	0x1732	; 0x1732 <puts>
	}	
	
	*((uint8_t*) &configFlags) = eeprom_read_byte((const uint8_t*) EEPROM_START);
    11e2:	8a e0       	ldi	r24, 0x0A	; 10
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__eerd_byte_m328p>
    11ea:	80 93 42 03 	sts	0x0342, r24
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 99 0b 	call	0x1732	; 0x1732 <puts>
	
	*((uint8_t*) &configFlags) = eeprom_read_byte((const uint8_t*) EEPROM_START);
	
	// Console Usage Hints
	printHelpInfo();
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	08 95       	ret

00001200 <main>:
}


// Main Program
int main(void){
	setup();
    1200:	0e 94 6d 08 	call	0x10da	; 0x10da <setup>

	while(1){		
		loop();
    1204:	0e 94 69 07 	call	0xed2	; 0xed2 <loop>
    1208:	fd cf       	rjmp	.-6      	; 0x1204 <main+0x4>

0000120a <__vector_18>:
}

ISR(TIMER0_OVF_vect){
}

ISR(USART_RX_vect){
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
	stateFlags.intSource = INT_SRC_UART;
    122c:	80 91 43 03 	lds	r24, 0x0343
    1230:	83 7e       	andi	r24, 0xE3	; 227
    1232:	8c 60       	ori	r24, 0x0C	; 12
    1234:	80 93 43 03 	sts	0x0343, r24
	stateFlags.monitorMode = 0;
    1238:	80 91 43 03 	lds	r24, 0x0343
    123c:	8f 7d       	andi	r24, 0xDF	; 223
    123e:	80 93 43 03 	sts	0x0343, r24
	
	uint8_t command = UDR0;
    1242:	80 91 c6 00 	lds	r24, 0x00C6
	
	switch(command){
    1246:	82 34       	cpi	r24, 0x42	; 66
    1248:	89 f0       	breq	.+34     	; 0x126c <__vector_18+0x62>
    124a:	83 34       	cpi	r24, 0x43	; 67
    124c:	30 f4       	brcc	.+12     	; 0x125a <__vector_18+0x50>
    124e:	81 33       	cpi	r24, 0x31	; 49
    1250:	71 f1       	breq	.+92     	; 0x12ae <__vector_18+0xa4>
    1252:	8f 33       	cpi	r24, 0x3F	; 63
    1254:	09 f0       	breq	.+2      	; 0x1258 <__vector_18+0x4e>
    1256:	4e c0       	rjmp	.+156    	; 0x12f4 <__vector_18+0xea>
    1258:	24 c0       	rjmp	.+72     	; 0x12a2 <__vector_18+0x98>
    125a:	8d 34       	cpi	r24, 0x4D	; 77
    125c:	e1 f0       	breq	.+56     	; 0x1296 <__vector_18+0x8c>
    125e:	80 36       	cpi	r24, 0x60	; 96
    1260:	09 f4       	brne	.+2      	; 0x1264 <__vector_18+0x5a>
    1262:	42 c0       	rjmp	.+132    	; 0x12e8 <__vector_18+0xde>
    1264:	8a 34       	cpi	r24, 0x4A	; 74
    1266:	09 f0       	breq	.+2      	; 0x126a <__vector_18+0x60>
    1268:	45 c0       	rjmp	.+138    	; 0x12f4 <__vector_18+0xea>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <__vector_18+0x9e>
		case 'B':
			printf("Battery: %u\n", volt.atMega);
    126c:	00 d0       	rcall	.+0      	; 0x126e <__vector_18+0x64>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <__vector_18+0x66>
    1270:	85 e5       	ldi	r24, 0x55	; 85
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	ed b7       	in	r30, 0x3d	; 61
    1276:	fe b7       	in	r31, 0x3e	; 62
    1278:	92 83       	std	Z+2, r25	; 0x02
    127a:	81 83       	std	Z+1, r24	; 0x01
    127c:	80 91 48 03 	lds	r24, 0x0348
    1280:	90 91 49 03 	lds	r25, 0x0349
    1284:	94 83       	std	Z+4, r25	; 0x04
    1286:	83 83       	std	Z+3, r24	; 0x03
    1288:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	2f c0       	rjmp	.+94     	; 0x12f4 <__vector_18+0xea>
			break;
		case 'M':
			stateFlags.monitorMode = 1;
    1296:	80 91 43 03 	lds	r24, 0x0343
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	80 93 43 03 	sts	0x0343, r24
    12a0:	29 c0       	rjmp	.+82     	; 0x12f4 <__vector_18+0xea>
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	1d c0       	rjmp	.+58     	; 0x12e2 <__vector_18+0xd8>
			break;
		case '?':
			printHelpInfo();
			break;
		case 'J':
			printRegisters();
    12a8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <printRegisters>
    12ac:	23 c0       	rjmp	.+70     	; 0x12f4 <__vector_18+0xea>
			break;
		case '1':
			configFlags.wdtSlpEn ^= 1;
    12ae:	80 91 42 03 	lds	r24, 0x0342
    12b2:	98 e0       	ldi	r25, 0x08	; 8
    12b4:	89 27       	eor	r24, r25
    12b6:	80 93 42 03 	sts	0x0342, r24
			printf("Sleep: ");
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <__vector_18+0xb2>
    12bc:	82 e6       	ldi	r24, 0x62	; 98
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	ed b7       	in	r30, 0x3d	; 61
    12c2:	fe b7       	in	r31, 0x3e	; 62
    12c4:	92 83       	std	Z+2, r25	; 0x02
    12c6:	81 83       	std	Z+1, r24	; 0x01
    12c8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <printf>
			if(configFlags.wdtSlpEn) printf("Enabled\n");
    12cc:	80 91 42 03 	lds	r24, 0x0342
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	83 ff       	sbrs	r24, 3
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <__vector_18+0xd4>
    12d8:	8a e6       	ldi	r24, 0x6A	; 106
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <__vector_18+0xd8>
			else printf("Disabled\n");
    12de:	82 e7       	ldi	r24, 0x72	; 114
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	0e 94 99 0b 	call	0x1732	; 0x1732 <puts>
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <__vector_18+0xea>
			break;
		case '`':
			eeprom_update_byte((uint8_t*)EEPROM_START,(*(uint8_t*) &configFlags));
    12e8:	8a e0       	ldi	r24, 0x0A	; 10
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	60 91 42 03 	lds	r22, 0x0342
    12f0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__eeupd_byte_m328p>
			break;
		default:
			break;
	}	
}
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__cmpsf2>:
    1316:	d4 d0       	rcall	.+424    	; 0x14c0 <__fp_cmp>
    1318:	08 f4       	brcc	.+2      	; 0x131c <__cmpsf2+0x6>
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	08 95       	ret

0000131e <__divsf3>:
    131e:	0c d0       	rcall	.+24     	; 0x1338 <__divsf3x>
    1320:	0a c1       	rjmp	.+532    	; 0x1536 <__fp_round>
    1322:	02 d1       	rcall	.+516    	; 0x1528 <__fp_pscB>
    1324:	40 f0       	brcs	.+16     	; 0x1336 <__divsf3+0x18>
    1326:	f9 d0       	rcall	.+498    	; 0x151a <__fp_pscA>
    1328:	30 f0       	brcs	.+12     	; 0x1336 <__divsf3+0x18>
    132a:	21 f4       	brne	.+8      	; 0x1334 <__divsf3+0x16>
    132c:	5f 3f       	cpi	r21, 0xFF	; 255
    132e:	19 f0       	breq	.+6      	; 0x1336 <__divsf3+0x18>
    1330:	eb c0       	rjmp	.+470    	; 0x1508 <__fp_inf>
    1332:	51 11       	cpse	r21, r1
    1334:	34 c1       	rjmp	.+616    	; 0x159e <__fp_szero>
    1336:	ee c0       	rjmp	.+476    	; 0x1514 <__fp_nan>

00001338 <__divsf3x>:
    1338:	0f d1       	rcall	.+542    	; 0x1558 <__fp_split3>
    133a:	98 f3       	brcs	.-26     	; 0x1322 <__divsf3+0x4>

0000133c <__divsf3_pse>:
    133c:	99 23       	and	r25, r25
    133e:	c9 f3       	breq	.-14     	; 0x1332 <__divsf3+0x14>
    1340:	55 23       	and	r21, r21
    1342:	b1 f3       	breq	.-20     	; 0x1330 <__divsf3+0x12>
    1344:	95 1b       	sub	r25, r21
    1346:	55 0b       	sbc	r21, r21
    1348:	bb 27       	eor	r27, r27
    134a:	aa 27       	eor	r26, r26
    134c:	62 17       	cp	r22, r18
    134e:	73 07       	cpc	r23, r19
    1350:	84 07       	cpc	r24, r20
    1352:	38 f0       	brcs	.+14     	; 0x1362 <__divsf3_pse+0x26>
    1354:	9f 5f       	subi	r25, 0xFF	; 255
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	44 1f       	adc	r20, r20
    135e:	aa 1f       	adc	r26, r26
    1360:	a9 f3       	breq	.-22     	; 0x134c <__divsf3_pse+0x10>
    1362:	33 d0       	rcall	.+102    	; 0x13ca <__divsf3_pse+0x8e>
    1364:	0e 2e       	mov	r0, r30
    1366:	3a f0       	brmi	.+14     	; 0x1376 <__divsf3_pse+0x3a>
    1368:	e0 e8       	ldi	r30, 0x80	; 128
    136a:	30 d0       	rcall	.+96     	; 0x13cc <__divsf3_pse+0x90>
    136c:	91 50       	subi	r25, 0x01	; 1
    136e:	50 40       	sbci	r21, 0x00	; 0
    1370:	e6 95       	lsr	r30
    1372:	00 1c       	adc	r0, r0
    1374:	ca f7       	brpl	.-14     	; 0x1368 <__divsf3_pse+0x2c>
    1376:	29 d0       	rcall	.+82     	; 0x13ca <__divsf3_pse+0x8e>
    1378:	fe 2f       	mov	r31, r30
    137a:	27 d0       	rcall	.+78     	; 0x13ca <__divsf3_pse+0x8e>
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	bb 1f       	adc	r27, r27
    1384:	26 17       	cp	r18, r22
    1386:	37 07       	cpc	r19, r23
    1388:	48 07       	cpc	r20, r24
    138a:	ab 07       	cpc	r26, r27
    138c:	b0 e8       	ldi	r27, 0x80	; 128
    138e:	09 f0       	breq	.+2      	; 0x1392 <__divsf3_pse+0x56>
    1390:	bb 0b       	sbc	r27, r27
    1392:	80 2d       	mov	r24, r0
    1394:	bf 01       	movw	r22, r30
    1396:	ff 27       	eor	r31, r31
    1398:	93 58       	subi	r25, 0x83	; 131
    139a:	5f 4f       	sbci	r21, 0xFF	; 255
    139c:	2a f0       	brmi	.+10     	; 0x13a8 <__divsf3_pse+0x6c>
    139e:	9e 3f       	cpi	r25, 0xFE	; 254
    13a0:	51 05       	cpc	r21, r1
    13a2:	68 f0       	brcs	.+26     	; 0x13be <__divsf3_pse+0x82>
    13a4:	b1 c0       	rjmp	.+354    	; 0x1508 <__fp_inf>
    13a6:	fb c0       	rjmp	.+502    	; 0x159e <__fp_szero>
    13a8:	5f 3f       	cpi	r21, 0xFF	; 255
    13aa:	ec f3       	brlt	.-6      	; 0x13a6 <__divsf3_pse+0x6a>
    13ac:	98 3e       	cpi	r25, 0xE8	; 232
    13ae:	dc f3       	brlt	.-10     	; 0x13a6 <__divsf3_pse+0x6a>
    13b0:	86 95       	lsr	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	b7 95       	ror	r27
    13b8:	f7 95       	ror	r31
    13ba:	9f 5f       	subi	r25, 0xFF	; 255
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <__divsf3_pse+0x74>
    13be:	88 0f       	add	r24, r24
    13c0:	91 1d       	adc	r25, r1
    13c2:	96 95       	lsr	r25
    13c4:	87 95       	ror	r24
    13c6:	97 f9       	bld	r25, 7
    13c8:	08 95       	ret
    13ca:	e1 e0       	ldi	r30, 0x01	; 1
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	bb 1f       	adc	r27, r27
    13d4:	62 17       	cp	r22, r18
    13d6:	73 07       	cpc	r23, r19
    13d8:	84 07       	cpc	r24, r20
    13da:	ba 07       	cpc	r27, r26
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <__divsf3_pse+0xaa>
    13de:	62 1b       	sub	r22, r18
    13e0:	73 0b       	sbc	r23, r19
    13e2:	84 0b       	sbc	r24, r20
    13e4:	ba 0b       	sbc	r27, r26
    13e6:	ee 1f       	adc	r30, r30
    13e8:	88 f7       	brcc	.-30     	; 0x13cc <__divsf3_pse+0x90>
    13ea:	e0 95       	com	r30
    13ec:	08 95       	ret

000013ee <__fixunssfsi>:
    13ee:	bc d0       	rcall	.+376    	; 0x1568 <__fp_splitA>
    13f0:	88 f0       	brcs	.+34     	; 0x1414 <__fixunssfsi+0x26>
    13f2:	9f 57       	subi	r25, 0x7F	; 127
    13f4:	90 f0       	brcs	.+36     	; 0x141a <__fixunssfsi+0x2c>
    13f6:	b9 2f       	mov	r27, r25
    13f8:	99 27       	eor	r25, r25
    13fa:	b7 51       	subi	r27, 0x17	; 23
    13fc:	a0 f0       	brcs	.+40     	; 0x1426 <__fixunssfsi+0x38>
    13fe:	d1 f0       	breq	.+52     	; 0x1434 <__fixunssfsi+0x46>
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	1a f0       	brmi	.+6      	; 0x1410 <__fixunssfsi+0x22>
    140a:	ba 95       	dec	r27
    140c:	c9 f7       	brne	.-14     	; 0x1400 <__fixunssfsi+0x12>
    140e:	12 c0       	rjmp	.+36     	; 0x1434 <__fixunssfsi+0x46>
    1410:	b1 30       	cpi	r27, 0x01	; 1
    1412:	81 f0       	breq	.+32     	; 0x1434 <__fixunssfsi+0x46>
    1414:	c3 d0       	rcall	.+390    	; 0x159c <__fp_zero>
    1416:	b1 e0       	ldi	r27, 0x01	; 1
    1418:	08 95       	ret
    141a:	c0 c0       	rjmp	.+384    	; 0x159c <__fp_zero>
    141c:	67 2f       	mov	r22, r23
    141e:	78 2f       	mov	r23, r24
    1420:	88 27       	eor	r24, r24
    1422:	b8 5f       	subi	r27, 0xF8	; 248
    1424:	39 f0       	breq	.+14     	; 0x1434 <__fixunssfsi+0x46>
    1426:	b9 3f       	cpi	r27, 0xF9	; 249
    1428:	cc f3       	brlt	.-14     	; 0x141c <__fixunssfsi+0x2e>
    142a:	86 95       	lsr	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b3 95       	inc	r27
    1432:	d9 f7       	brne	.-10     	; 0x142a <__fixunssfsi+0x3c>
    1434:	3e f4       	brtc	.+14     	; 0x1444 <__fixunssfsi+0x56>
    1436:	90 95       	com	r25
    1438:	80 95       	com	r24
    143a:	70 95       	com	r23
    143c:	61 95       	neg	r22
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	8f 4f       	sbci	r24, 0xFF	; 255
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	08 95       	ret

00001446 <__floatunsisf>:
    1446:	e8 94       	clt
    1448:	09 c0       	rjmp	.+18     	; 0x145c <__floatsisf+0x12>

0000144a <__floatsisf>:
    144a:	97 fb       	bst	r25, 7
    144c:	3e f4       	brtc	.+14     	; 0x145c <__floatsisf+0x12>
    144e:	90 95       	com	r25
    1450:	80 95       	com	r24
    1452:	70 95       	com	r23
    1454:	61 95       	neg	r22
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	8f 4f       	sbci	r24, 0xFF	; 255
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	99 23       	and	r25, r25
    145e:	a9 f0       	breq	.+42     	; 0x148a <__floatsisf+0x40>
    1460:	f9 2f       	mov	r31, r25
    1462:	96 e9       	ldi	r25, 0x96	; 150
    1464:	bb 27       	eor	r27, r27
    1466:	93 95       	inc	r25
    1468:	f6 95       	lsr	r31
    146a:	87 95       	ror	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b7 95       	ror	r27
    1472:	f1 11       	cpse	r31, r1
    1474:	f8 cf       	rjmp	.-16     	; 0x1466 <__floatsisf+0x1c>
    1476:	fa f4       	brpl	.+62     	; 0x14b6 <__floatsisf+0x6c>
    1478:	bb 0f       	add	r27, r27
    147a:	11 f4       	brne	.+4      	; 0x1480 <__floatsisf+0x36>
    147c:	60 ff       	sbrs	r22, 0
    147e:	1b c0       	rjmp	.+54     	; 0x14b6 <__floatsisf+0x6c>
    1480:	6f 5f       	subi	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	8f 4f       	sbci	r24, 0xFF	; 255
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	16 c0       	rjmp	.+44     	; 0x14b6 <__floatsisf+0x6c>
    148a:	88 23       	and	r24, r24
    148c:	11 f0       	breq	.+4      	; 0x1492 <__floatsisf+0x48>
    148e:	96 e9       	ldi	r25, 0x96	; 150
    1490:	11 c0       	rjmp	.+34     	; 0x14b4 <__floatsisf+0x6a>
    1492:	77 23       	and	r23, r23
    1494:	21 f0       	breq	.+8      	; 0x149e <__floatsisf+0x54>
    1496:	9e e8       	ldi	r25, 0x8E	; 142
    1498:	87 2f       	mov	r24, r23
    149a:	76 2f       	mov	r23, r22
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <__floatsisf+0x5e>
    149e:	66 23       	and	r22, r22
    14a0:	71 f0       	breq	.+28     	; 0x14be <__floatsisf+0x74>
    14a2:	96 e8       	ldi	r25, 0x86	; 134
    14a4:	86 2f       	mov	r24, r22
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	2a f0       	brmi	.+10     	; 0x14b6 <__floatsisf+0x6c>
    14ac:	9a 95       	dec	r25
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	da f7       	brpl	.-10     	; 0x14ac <__floatsisf+0x62>
    14b6:	88 0f       	add	r24, r24
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret

000014c0 <__fp_cmp>:
    14c0:	99 0f       	add	r25, r25
    14c2:	00 08       	sbc	r0, r0
    14c4:	55 0f       	add	r21, r21
    14c6:	aa 0b       	sbc	r26, r26
    14c8:	e0 e8       	ldi	r30, 0x80	; 128
    14ca:	fe ef       	ldi	r31, 0xFE	; 254
    14cc:	16 16       	cp	r1, r22
    14ce:	17 06       	cpc	r1, r23
    14d0:	e8 07       	cpc	r30, r24
    14d2:	f9 07       	cpc	r31, r25
    14d4:	c0 f0       	brcs	.+48     	; 0x1506 <__fp_cmp+0x46>
    14d6:	12 16       	cp	r1, r18
    14d8:	13 06       	cpc	r1, r19
    14da:	e4 07       	cpc	r30, r20
    14dc:	f5 07       	cpc	r31, r21
    14de:	98 f0       	brcs	.+38     	; 0x1506 <__fp_cmp+0x46>
    14e0:	62 1b       	sub	r22, r18
    14e2:	73 0b       	sbc	r23, r19
    14e4:	84 0b       	sbc	r24, r20
    14e6:	95 0b       	sbc	r25, r21
    14e8:	39 f4       	brne	.+14     	; 0x14f8 <__fp_cmp+0x38>
    14ea:	0a 26       	eor	r0, r26
    14ec:	61 f0       	breq	.+24     	; 0x1506 <__fp_cmp+0x46>
    14ee:	23 2b       	or	r18, r19
    14f0:	24 2b       	or	r18, r20
    14f2:	25 2b       	or	r18, r21
    14f4:	21 f4       	brne	.+8      	; 0x14fe <__fp_cmp+0x3e>
    14f6:	08 95       	ret
    14f8:	0a 26       	eor	r0, r26
    14fa:	09 f4       	brne	.+2      	; 0x14fe <__fp_cmp+0x3e>
    14fc:	a1 40       	sbci	r26, 0x01	; 1
    14fe:	a6 95       	lsr	r26
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	81 1d       	adc	r24, r1
    1504:	81 1d       	adc	r24, r1
    1506:	08 95       	ret

00001508 <__fp_inf>:
    1508:	97 f9       	bld	r25, 7
    150a:	9f 67       	ori	r25, 0x7F	; 127
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	08 95       	ret

00001514 <__fp_nan>:
    1514:	9f ef       	ldi	r25, 0xFF	; 255
    1516:	80 ec       	ldi	r24, 0xC0	; 192
    1518:	08 95       	ret

0000151a <__fp_pscA>:
    151a:	00 24       	eor	r0, r0
    151c:	0a 94       	dec	r0
    151e:	16 16       	cp	r1, r22
    1520:	17 06       	cpc	r1, r23
    1522:	18 06       	cpc	r1, r24
    1524:	09 06       	cpc	r0, r25
    1526:	08 95       	ret

00001528 <__fp_pscB>:
    1528:	00 24       	eor	r0, r0
    152a:	0a 94       	dec	r0
    152c:	12 16       	cp	r1, r18
    152e:	13 06       	cpc	r1, r19
    1530:	14 06       	cpc	r1, r20
    1532:	05 06       	cpc	r0, r21
    1534:	08 95       	ret

00001536 <__fp_round>:
    1536:	09 2e       	mov	r0, r25
    1538:	03 94       	inc	r0
    153a:	00 0c       	add	r0, r0
    153c:	11 f4       	brne	.+4      	; 0x1542 <__fp_round+0xc>
    153e:	88 23       	and	r24, r24
    1540:	52 f0       	brmi	.+20     	; 0x1556 <__fp_round+0x20>
    1542:	bb 0f       	add	r27, r27
    1544:	40 f4       	brcc	.+16     	; 0x1556 <__fp_round+0x20>
    1546:	bf 2b       	or	r27, r31
    1548:	11 f4       	brne	.+4      	; 0x154e <__fp_round+0x18>
    154a:	60 ff       	sbrs	r22, 0
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <__fp_round+0x20>
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__fp_split3>:
    1558:	57 fd       	sbrc	r21, 7
    155a:	90 58       	subi	r25, 0x80	; 128
    155c:	44 0f       	add	r20, r20
    155e:	55 1f       	adc	r21, r21
    1560:	59 f0       	breq	.+22     	; 0x1578 <__fp_splitA+0x10>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	71 f0       	breq	.+28     	; 0x1582 <__fp_splitA+0x1a>
    1566:	47 95       	ror	r20

00001568 <__fp_splitA>:
    1568:	88 0f       	add	r24, r24
    156a:	97 fb       	bst	r25, 7
    156c:	99 1f       	adc	r25, r25
    156e:	61 f0       	breq	.+24     	; 0x1588 <__fp_splitA+0x20>
    1570:	9f 3f       	cpi	r25, 0xFF	; 255
    1572:	79 f0       	breq	.+30     	; 0x1592 <__fp_splitA+0x2a>
    1574:	87 95       	ror	r24
    1576:	08 95       	ret
    1578:	12 16       	cp	r1, r18
    157a:	13 06       	cpc	r1, r19
    157c:	14 06       	cpc	r1, r20
    157e:	55 1f       	adc	r21, r21
    1580:	f2 cf       	rjmp	.-28     	; 0x1566 <__fp_split3+0xe>
    1582:	46 95       	lsr	r20
    1584:	f1 df       	rcall	.-30     	; 0x1568 <__fp_splitA>
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <__fp_splitA+0x30>
    1588:	16 16       	cp	r1, r22
    158a:	17 06       	cpc	r1, r23
    158c:	18 06       	cpc	r1, r24
    158e:	99 1f       	adc	r25, r25
    1590:	f1 cf       	rjmp	.-30     	; 0x1574 <__fp_splitA+0xc>
    1592:	86 95       	lsr	r24
    1594:	71 05       	cpc	r23, r1
    1596:	61 05       	cpc	r22, r1
    1598:	08 94       	sec
    159a:	08 95       	ret

0000159c <__fp_zero>:
    159c:	e8 94       	clt

0000159e <__fp_szero>:
    159e:	bb 27       	eor	r27, r27
    15a0:	66 27       	eor	r22, r22
    15a2:	77 27       	eor	r23, r23
    15a4:	cb 01       	movw	r24, r22
    15a6:	97 f9       	bld	r25, 7
    15a8:	08 95       	ret

000015aa <__gesf2>:
    15aa:	8a df       	rcall	.-236    	; 0x14c0 <__fp_cmp>
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <__gesf2+0x6>
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <__mulsf3>:
    15b2:	0b d0       	rcall	.+22     	; 0x15ca <__mulsf3x>
    15b4:	c0 cf       	rjmp	.-128    	; 0x1536 <__fp_round>
    15b6:	b1 df       	rcall	.-158    	; 0x151a <__fp_pscA>
    15b8:	28 f0       	brcs	.+10     	; 0x15c4 <__mulsf3+0x12>
    15ba:	b6 df       	rcall	.-148    	; 0x1528 <__fp_pscB>
    15bc:	18 f0       	brcs	.+6      	; 0x15c4 <__mulsf3+0x12>
    15be:	95 23       	and	r25, r21
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <__mulsf3+0x12>
    15c2:	a2 cf       	rjmp	.-188    	; 0x1508 <__fp_inf>
    15c4:	a7 cf       	rjmp	.-178    	; 0x1514 <__fp_nan>
    15c6:	11 24       	eor	r1, r1
    15c8:	ea cf       	rjmp	.-44     	; 0x159e <__fp_szero>

000015ca <__mulsf3x>:
    15ca:	c6 df       	rcall	.-116    	; 0x1558 <__fp_split3>
    15cc:	a0 f3       	brcs	.-24     	; 0x15b6 <__mulsf3+0x4>

000015ce <__mulsf3_pse>:
    15ce:	95 9f       	mul	r25, r21
    15d0:	d1 f3       	breq	.-12     	; 0x15c6 <__mulsf3+0x14>
    15d2:	95 0f       	add	r25, r21
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	55 1f       	adc	r21, r21
    15d8:	62 9f       	mul	r22, r18
    15da:	f0 01       	movw	r30, r0
    15dc:	72 9f       	mul	r23, r18
    15de:	bb 27       	eor	r27, r27
    15e0:	f0 0d       	add	r31, r0
    15e2:	b1 1d       	adc	r27, r1
    15e4:	63 9f       	mul	r22, r19
    15e6:	aa 27       	eor	r26, r26
    15e8:	f0 0d       	add	r31, r0
    15ea:	b1 1d       	adc	r27, r1
    15ec:	aa 1f       	adc	r26, r26
    15ee:	64 9f       	mul	r22, r20
    15f0:	66 27       	eor	r22, r22
    15f2:	b0 0d       	add	r27, r0
    15f4:	a1 1d       	adc	r26, r1
    15f6:	66 1f       	adc	r22, r22
    15f8:	82 9f       	mul	r24, r18
    15fa:	22 27       	eor	r18, r18
    15fc:	b0 0d       	add	r27, r0
    15fe:	a1 1d       	adc	r26, r1
    1600:	62 1f       	adc	r22, r18
    1602:	73 9f       	mul	r23, r19
    1604:	b0 0d       	add	r27, r0
    1606:	a1 1d       	adc	r26, r1
    1608:	62 1f       	adc	r22, r18
    160a:	83 9f       	mul	r24, r19
    160c:	a0 0d       	add	r26, r0
    160e:	61 1d       	adc	r22, r1
    1610:	22 1f       	adc	r18, r18
    1612:	74 9f       	mul	r23, r20
    1614:	33 27       	eor	r19, r19
    1616:	a0 0d       	add	r26, r0
    1618:	61 1d       	adc	r22, r1
    161a:	23 1f       	adc	r18, r19
    161c:	84 9f       	mul	r24, r20
    161e:	60 0d       	add	r22, r0
    1620:	21 1d       	adc	r18, r1
    1622:	82 2f       	mov	r24, r18
    1624:	76 2f       	mov	r23, r22
    1626:	6a 2f       	mov	r22, r26
    1628:	11 24       	eor	r1, r1
    162a:	9f 57       	subi	r25, 0x7F	; 127
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	8a f0       	brmi	.+34     	; 0x1652 <__mulsf3_pse+0x84>
    1630:	e1 f0       	breq	.+56     	; 0x166a <__mulsf3_pse+0x9c>
    1632:	88 23       	and	r24, r24
    1634:	4a f0       	brmi	.+18     	; 0x1648 <__mulsf3_pse+0x7a>
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	bb 1f       	adc	r27, r27
    163c:	66 1f       	adc	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	91 50       	subi	r25, 0x01	; 1
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	a9 f7       	brne	.-22     	; 0x1632 <__mulsf3_pse+0x64>
    1648:	9e 3f       	cpi	r25, 0xFE	; 254
    164a:	51 05       	cpc	r21, r1
    164c:	70 f0       	brcs	.+28     	; 0x166a <__mulsf3_pse+0x9c>
    164e:	5c cf       	rjmp	.-328    	; 0x1508 <__fp_inf>
    1650:	a6 cf       	rjmp	.-180    	; 0x159e <__fp_szero>
    1652:	5f 3f       	cpi	r21, 0xFF	; 255
    1654:	ec f3       	brlt	.-6      	; 0x1650 <__mulsf3_pse+0x82>
    1656:	98 3e       	cpi	r25, 0xE8	; 232
    1658:	dc f3       	brlt	.-10     	; 0x1650 <__mulsf3_pse+0x82>
    165a:	86 95       	lsr	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	b7 95       	ror	r27
    1662:	f7 95       	ror	r31
    1664:	e7 95       	ror	r30
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	c1 f7       	brne	.-16     	; 0x165a <__mulsf3_pse+0x8c>
    166a:	fe 2b       	or	r31, r30
    166c:	88 0f       	add	r24, r24
    166e:	91 1d       	adc	r25, r1
    1670:	96 95       	lsr	r25
    1672:	87 95       	ror	r24
    1674:	97 f9       	bld	r25, 7
    1676:	08 95       	ret

00001678 <__mulsi3>:
    1678:	62 9f       	mul	r22, r18
    167a:	d0 01       	movw	r26, r0
    167c:	73 9f       	mul	r23, r19
    167e:	f0 01       	movw	r30, r0
    1680:	82 9f       	mul	r24, r18
    1682:	e0 0d       	add	r30, r0
    1684:	f1 1d       	adc	r31, r1
    1686:	64 9f       	mul	r22, r20
    1688:	e0 0d       	add	r30, r0
    168a:	f1 1d       	adc	r31, r1
    168c:	92 9f       	mul	r25, r18
    168e:	f0 0d       	add	r31, r0
    1690:	83 9f       	mul	r24, r19
    1692:	f0 0d       	add	r31, r0
    1694:	74 9f       	mul	r23, r20
    1696:	f0 0d       	add	r31, r0
    1698:	65 9f       	mul	r22, r21
    169a:	f0 0d       	add	r31, r0
    169c:	99 27       	eor	r25, r25
    169e:	72 9f       	mul	r23, r18
    16a0:	b0 0d       	add	r27, r0
    16a2:	e1 1d       	adc	r30, r1
    16a4:	f9 1f       	adc	r31, r25
    16a6:	63 9f       	mul	r22, r19
    16a8:	b0 0d       	add	r27, r0
    16aa:	e1 1d       	adc	r30, r1
    16ac:	f9 1f       	adc	r31, r25
    16ae:	bd 01       	movw	r22, r26
    16b0:	cf 01       	movw	r24, r30
    16b2:	11 24       	eor	r1, r1
    16b4:	08 95       	ret

000016b6 <__udivmodsi4>:
    16b6:	a1 e2       	ldi	r26, 0x21	; 33
    16b8:	1a 2e       	mov	r1, r26
    16ba:	aa 1b       	sub	r26, r26
    16bc:	bb 1b       	sub	r27, r27
    16be:	fd 01       	movw	r30, r26
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <__udivmodsi4_ep>

000016c2 <__udivmodsi4_loop>:
    16c2:	aa 1f       	adc	r26, r26
    16c4:	bb 1f       	adc	r27, r27
    16c6:	ee 1f       	adc	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	a2 17       	cp	r26, r18
    16cc:	b3 07       	cpc	r27, r19
    16ce:	e4 07       	cpc	r30, r20
    16d0:	f5 07       	cpc	r31, r21
    16d2:	20 f0       	brcs	.+8      	; 0x16dc <__udivmodsi4_ep>
    16d4:	a2 1b       	sub	r26, r18
    16d6:	b3 0b       	sbc	r27, r19
    16d8:	e4 0b       	sbc	r30, r20
    16da:	f5 0b       	sbc	r31, r21

000016dc <__udivmodsi4_ep>:
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	1a 94       	dec	r1
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <__udivmodsi4_loop>
    16e8:	60 95       	com	r22
    16ea:	70 95       	com	r23
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	bd 01       	movw	r22, r26
    16f6:	cf 01       	movw	r24, r30
    16f8:	08 95       	ret

000016fa <printf>:
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e3 e8       	ldi	r30, 0x83	; 131
    1700:	fb e0       	ldi	r31, 0x0B	; 11
    1702:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x20>
    1706:	fe 01       	movw	r30, r28
    1708:	35 96       	adiw	r30, 0x05	; 5
    170a:	61 91       	ld	r22, Z+
    170c:	71 91       	ld	r23, Z+
    170e:	80 91 4c 03 	lds	r24, 0x034C
    1712:	90 91 4d 03 	lds	r25, 0x034D
    1716:	af 01       	movw	r20, r30
    1718:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vfprintf>
    171c:	20 96       	adiw	r28, 0x00	; 0
    171e:	e2 e0       	ldi	r30, 0x02	; 2
    1720:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x20>

00001724 <putchar>:
    1724:	60 91 4c 03 	lds	r22, 0x034C
    1728:	70 91 4d 03 	lds	r23, 0x034D
    172c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1730:	08 95       	ret

00001732 <puts>:
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	8c 01       	movw	r16, r24
    173c:	e0 91 4c 03 	lds	r30, 0x034C
    1740:	f0 91 4d 03 	lds	r31, 0x034D
    1744:	83 81       	ldd	r24, Z+3	; 0x03
    1746:	81 ff       	sbrs	r24, 1
    1748:	21 c0       	rjmp	.+66     	; 0x178c <puts+0x5a>
    174a:	c0 e0       	ldi	r28, 0x00	; 0
    174c:	d0 e0       	ldi	r29, 0x00	; 0
    174e:	0d c0       	rjmp	.+26     	; 0x176a <puts+0x38>
    1750:	e0 91 4c 03 	lds	r30, 0x034C
    1754:	f0 91 4d 03 	lds	r31, 0x034D
    1758:	20 85       	ldd	r18, Z+8	; 0x08
    175a:	31 85       	ldd	r19, Z+9	; 0x09
    175c:	bf 01       	movw	r22, r30
    175e:	f9 01       	movw	r30, r18
    1760:	09 95       	icall
    1762:	89 2b       	or	r24, r25
    1764:	11 f0       	breq	.+4      	; 0x176a <puts+0x38>
    1766:	cf ef       	ldi	r28, 0xFF	; 255
    1768:	df ef       	ldi	r29, 0xFF	; 255
    176a:	f8 01       	movw	r30, r16
    176c:	81 91       	ld	r24, Z+
    176e:	8f 01       	movw	r16, r30
    1770:	88 23       	and	r24, r24
    1772:	71 f7       	brne	.-36     	; 0x1750 <puts+0x1e>
    1774:	e0 91 4c 03 	lds	r30, 0x034C
    1778:	f0 91 4d 03 	lds	r31, 0x034D
    177c:	20 85       	ldd	r18, Z+8	; 0x08
    177e:	31 85       	ldd	r19, Z+9	; 0x09
    1780:	8a e0       	ldi	r24, 0x0A	; 10
    1782:	bf 01       	movw	r22, r30
    1784:	f9 01       	movw	r30, r18
    1786:	09 95       	icall
    1788:	89 2b       	or	r24, r25
    178a:	11 f0       	breq	.+4      	; 0x1790 <puts+0x5e>
    178c:	cf ef       	ldi	r28, 0xFF	; 255
    178e:	df ef       	ldi	r29, 0xFF	; 255
    1790:	ce 01       	movw	r24, r28
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <snprintf>:
    179c:	ae e0       	ldi	r26, 0x0E	; 14
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 ed       	ldi	r30, 0xD4	; 212
    17a2:	fb e0       	ldi	r31, 0x0B	; 11
    17a4:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x1c>
    17a8:	0d 89       	ldd	r16, Y+21	; 0x15
    17aa:	1e 89       	ldd	r17, Y+22	; 0x16
    17ac:	8f 89       	ldd	r24, Y+23	; 0x17
    17ae:	98 8d       	ldd	r25, Y+24	; 0x18
    17b0:	97 ff       	sbrs	r25, 7
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <snprintf+0x1c>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e8       	ldi	r25, 0x80	; 128
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	1a 83       	std	Y+2, r17	; 0x02
    17c0:	09 83       	std	Y+1, r16	; 0x01
    17c2:	86 e0       	ldi	r24, 0x06	; 6
    17c4:	8c 83       	std	Y+4, r24	; 0x04
    17c6:	9e 01       	movw	r18, r28
    17c8:	25 5e       	subi	r18, 0xE5	; 229
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	69 8d       	ldd	r22, Y+25	; 0x19
    17d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d4:	a9 01       	movw	r20, r18
    17d6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <vfprintf>
    17da:	4d 81       	ldd	r20, Y+5	; 0x05
    17dc:	5e 81       	ldd	r21, Y+6	; 0x06
    17de:	57 fd       	sbrc	r21, 7
    17e0:	0a c0       	rjmp	.+20     	; 0x17f6 <snprintf+0x5a>
    17e2:	2f 81       	ldd	r18, Y+7	; 0x07
    17e4:	38 85       	ldd	r19, Y+8	; 0x08
    17e6:	42 17       	cp	r20, r18
    17e8:	53 07       	cpc	r21, r19
    17ea:	0c f4       	brge	.+2      	; 0x17ee <snprintf+0x52>
    17ec:	9a 01       	movw	r18, r20
    17ee:	02 0f       	add	r16, r18
    17f0:	13 1f       	adc	r17, r19
    17f2:	f8 01       	movw	r30, r16
    17f4:	10 82       	st	Z, r1
    17f6:	2e 96       	adiw	r28, 0x0e	; 14
    17f8:	e4 e0       	ldi	r30, 0x04	; 4
    17fa:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x1c>

000017fe <vfprintf>:
    17fe:	ab e0       	ldi	r26, 0x0B	; 11
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e0       	ldi	r30, 0x05	; 5
    1804:	fc e0       	ldi	r31, 0x0C	; 12
    1806:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__>
    180a:	3c 01       	movw	r6, r24
    180c:	2b 01       	movw	r4, r22
    180e:	5a 01       	movw	r10, r20
    1810:	fc 01       	movw	r30, r24
    1812:	17 82       	std	Z+7, r1	; 0x07
    1814:	16 82       	std	Z+6, r1	; 0x06
    1816:	83 81       	ldd	r24, Z+3	; 0x03
    1818:	81 fd       	sbrc	r24, 1
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x24>
    181c:	6f ef       	ldi	r22, 0xFF	; 255
    181e:	7f ef       	ldi	r23, 0xFF	; 255
    1820:	c6 c1       	rjmp	.+908    	; 0x1bae <vfprintf+0x3b0>
    1822:	9a e0       	ldi	r25, 0x0A	; 10
    1824:	89 2e       	mov	r8, r25
    1826:	1e 01       	movw	r2, r28
    1828:	08 94       	sec
    182a:	21 1c       	adc	r2, r1
    182c:	31 1c       	adc	r3, r1
    182e:	f3 01       	movw	r30, r6
    1830:	23 81       	ldd	r18, Z+3	; 0x03
    1832:	f2 01       	movw	r30, r4
    1834:	23 fd       	sbrc	r18, 3
    1836:	85 91       	lpm	r24, Z+
    1838:	23 ff       	sbrs	r18, 3
    183a:	81 91       	ld	r24, Z+
    183c:	2f 01       	movw	r4, r30
    183e:	88 23       	and	r24, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <vfprintf+0x46>
    1842:	b2 c1       	rjmp	.+868    	; 0x1ba8 <vfprintf+0x3aa>
    1844:	85 32       	cpi	r24, 0x25	; 37
    1846:	39 f4       	brne	.+14     	; 0x1856 <vfprintf+0x58>
    1848:	23 fd       	sbrc	r18, 3
    184a:	85 91       	lpm	r24, Z+
    184c:	23 ff       	sbrs	r18, 3
    184e:	81 91       	ld	r24, Z+
    1850:	2f 01       	movw	r4, r30
    1852:	85 32       	cpi	r24, 0x25	; 37
    1854:	29 f4       	brne	.+10     	; 0x1860 <vfprintf+0x62>
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	b3 01       	movw	r22, r6
    185a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    185e:	e7 cf       	rjmp	.-50     	; 0x182e <vfprintf+0x30>
    1860:	98 2f       	mov	r25, r24
    1862:	ff 24       	eor	r15, r15
    1864:	ee 24       	eor	r14, r14
    1866:	99 24       	eor	r9, r9
    1868:	ff e1       	ldi	r31, 0x1F	; 31
    186a:	ff 15       	cp	r31, r15
    186c:	d0 f0       	brcs	.+52     	; 0x18a2 <vfprintf+0xa4>
    186e:	9b 32       	cpi	r25, 0x2B	; 43
    1870:	69 f0       	breq	.+26     	; 0x188c <vfprintf+0x8e>
    1872:	9c 32       	cpi	r25, 0x2C	; 44
    1874:	28 f4       	brcc	.+10     	; 0x1880 <vfprintf+0x82>
    1876:	90 32       	cpi	r25, 0x20	; 32
    1878:	59 f0       	breq	.+22     	; 0x1890 <vfprintf+0x92>
    187a:	93 32       	cpi	r25, 0x23	; 35
    187c:	91 f4       	brne	.+36     	; 0x18a2 <vfprintf+0xa4>
    187e:	0e c0       	rjmp	.+28     	; 0x189c <vfprintf+0x9e>
    1880:	9d 32       	cpi	r25, 0x2D	; 45
    1882:	49 f0       	breq	.+18     	; 0x1896 <vfprintf+0x98>
    1884:	90 33       	cpi	r25, 0x30	; 48
    1886:	69 f4       	brne	.+26     	; 0x18a2 <vfprintf+0xa4>
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	24 c0       	rjmp	.+72     	; 0x18d4 <vfprintf+0xd6>
    188c:	52 e0       	ldi	r21, 0x02	; 2
    188e:	f5 2a       	or	r15, r21
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	f8 2a       	or	r15, r24
    1894:	28 c0       	rjmp	.+80     	; 0x18e6 <vfprintf+0xe8>
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	f9 2a       	or	r15, r25
    189a:	25 c0       	rjmp	.+74     	; 0x18e6 <vfprintf+0xe8>
    189c:	e0 e1       	ldi	r30, 0x10	; 16
    189e:	fe 2a       	or	r15, r30
    18a0:	22 c0       	rjmp	.+68     	; 0x18e6 <vfprintf+0xe8>
    18a2:	f7 fc       	sbrc	r15, 7
    18a4:	29 c0       	rjmp	.+82     	; 0x18f8 <vfprintf+0xfa>
    18a6:	89 2f       	mov	r24, r25
    18a8:	80 53       	subi	r24, 0x30	; 48
    18aa:	8a 30       	cpi	r24, 0x0A	; 10
    18ac:	70 f4       	brcc	.+28     	; 0x18ca <vfprintf+0xcc>
    18ae:	f6 fe       	sbrs	r15, 6
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <vfprintf+0xbe>
    18b2:	98 9c       	mul	r9, r8
    18b4:	90 2c       	mov	r9, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	98 0e       	add	r9, r24
    18ba:	15 c0       	rjmp	.+42     	; 0x18e6 <vfprintf+0xe8>
    18bc:	e8 9c       	mul	r14, r8
    18be:	e0 2c       	mov	r14, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	e8 0e       	add	r14, r24
    18c4:	f0 e2       	ldi	r31, 0x20	; 32
    18c6:	ff 2a       	or	r15, r31
    18c8:	0e c0       	rjmp	.+28     	; 0x18e6 <vfprintf+0xe8>
    18ca:	9e 32       	cpi	r25, 0x2E	; 46
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <vfprintf+0xda>
    18ce:	f6 fc       	sbrc	r15, 6
    18d0:	6b c1       	rjmp	.+726    	; 0x1ba8 <vfprintf+0x3aa>
    18d2:	40 e4       	ldi	r20, 0x40	; 64
    18d4:	f4 2a       	or	r15, r20
    18d6:	07 c0       	rjmp	.+14     	; 0x18e6 <vfprintf+0xe8>
    18d8:	9c 36       	cpi	r25, 0x6C	; 108
    18da:	19 f4       	brne	.+6      	; 0x18e2 <vfprintf+0xe4>
    18dc:	50 e8       	ldi	r21, 0x80	; 128
    18de:	f5 2a       	or	r15, r21
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <vfprintf+0xe8>
    18e2:	98 36       	cpi	r25, 0x68	; 104
    18e4:	49 f4       	brne	.+18     	; 0x18f8 <vfprintf+0xfa>
    18e6:	f2 01       	movw	r30, r4
    18e8:	23 fd       	sbrc	r18, 3
    18ea:	95 91       	lpm	r25, Z+
    18ec:	23 ff       	sbrs	r18, 3
    18ee:	91 91       	ld	r25, Z+
    18f0:	2f 01       	movw	r4, r30
    18f2:	99 23       	and	r25, r25
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <vfprintf+0xfa>
    18f6:	b8 cf       	rjmp	.-144    	; 0x1868 <vfprintf+0x6a>
    18f8:	89 2f       	mov	r24, r25
    18fa:	85 54       	subi	r24, 0x45	; 69
    18fc:	83 30       	cpi	r24, 0x03	; 3
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <vfprintf+0x108>
    1900:	80 52       	subi	r24, 0x20	; 32
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	38 f4       	brcc	.+14     	; 0x1914 <vfprintf+0x116>
    1906:	44 e0       	ldi	r20, 0x04	; 4
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	a4 0e       	add	r10, r20
    190c:	b5 1e       	adc	r11, r21
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	59 83       	std	Y+1, r21	; 0x01
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <vfprintf+0x134>
    1914:	93 36       	cpi	r25, 0x63	; 99
    1916:	31 f0       	breq	.+12     	; 0x1924 <vfprintf+0x126>
    1918:	93 37       	cpi	r25, 0x73	; 115
    191a:	79 f0       	breq	.+30     	; 0x193a <vfprintf+0x13c>
    191c:	93 35       	cpi	r25, 0x53	; 83
    191e:	09 f0       	breq	.+2      	; 0x1922 <vfprintf+0x124>
    1920:	56 c0       	rjmp	.+172    	; 0x19ce <vfprintf+0x1d0>
    1922:	20 c0       	rjmp	.+64     	; 0x1964 <vfprintf+0x166>
    1924:	f5 01       	movw	r30, r10
    1926:	80 81       	ld	r24, Z
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	42 e0       	ldi	r20, 0x02	; 2
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	a4 0e       	add	r10, r20
    1930:	b5 1e       	adc	r11, r21
    1932:	61 01       	movw	r12, r2
    1934:	01 e0       	ldi	r16, 0x01	; 1
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	12 c0       	rjmp	.+36     	; 0x195e <vfprintf+0x160>
    193a:	f5 01       	movw	r30, r10
    193c:	c0 80       	ld	r12, Z
    193e:	d1 80       	ldd	r13, Z+1	; 0x01
    1940:	f6 fc       	sbrc	r15, 6
    1942:	03 c0       	rjmp	.+6      	; 0x194a <vfprintf+0x14c>
    1944:	6f ef       	ldi	r22, 0xFF	; 255
    1946:	7f ef       	ldi	r23, 0xFF	; 255
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x150>
    194a:	69 2d       	mov	r22, r9
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	42 e0       	ldi	r20, 0x02	; 2
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	a4 0e       	add	r10, r20
    1954:	b5 1e       	adc	r11, r21
    1956:	c6 01       	movw	r24, r12
    1958:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <strnlen>
    195c:	8c 01       	movw	r16, r24
    195e:	5f e7       	ldi	r21, 0x7F	; 127
    1960:	f5 22       	and	r15, r21
    1962:	14 c0       	rjmp	.+40     	; 0x198c <vfprintf+0x18e>
    1964:	f5 01       	movw	r30, r10
    1966:	c0 80       	ld	r12, Z
    1968:	d1 80       	ldd	r13, Z+1	; 0x01
    196a:	f6 fc       	sbrc	r15, 6
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <vfprintf+0x176>
    196e:	6f ef       	ldi	r22, 0xFF	; 255
    1970:	7f ef       	ldi	r23, 0xFF	; 255
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x17a>
    1974:	69 2d       	mov	r22, r9
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	42 e0       	ldi	r20, 0x02	; 2
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	a4 0e       	add	r10, r20
    197e:	b5 1e       	adc	r11, r21
    1980:	c6 01       	movw	r24, r12
    1982:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <strnlen_P>
    1986:	8c 01       	movw	r16, r24
    1988:	50 e8       	ldi	r21, 0x80	; 128
    198a:	f5 2a       	or	r15, r21
    198c:	f3 fe       	sbrs	r15, 3
    198e:	07 c0       	rjmp	.+14     	; 0x199e <vfprintf+0x1a0>
    1990:	1a c0       	rjmp	.+52     	; 0x19c6 <vfprintf+0x1c8>
    1992:	80 e2       	ldi	r24, 0x20	; 32
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	b3 01       	movw	r22, r6
    1998:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    199c:	ea 94       	dec	r14
    199e:	8e 2d       	mov	r24, r14
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	08 17       	cp	r16, r24
    19a4:	19 07       	cpc	r17, r25
    19a6:	a8 f3       	brcs	.-22     	; 0x1992 <vfprintf+0x194>
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0x1c8>
    19aa:	f6 01       	movw	r30, r12
    19ac:	f7 fc       	sbrc	r15, 7
    19ae:	85 91       	lpm	r24, Z+
    19b0:	f7 fe       	sbrs	r15, 7
    19b2:	81 91       	ld	r24, Z+
    19b4:	6f 01       	movw	r12, r30
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	b3 01       	movw	r22, r6
    19ba:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    19be:	e1 10       	cpse	r14, r1
    19c0:	ea 94       	dec	r14
    19c2:	01 50       	subi	r16, 0x01	; 1
    19c4:	10 40       	sbci	r17, 0x00	; 0
    19c6:	01 15       	cp	r16, r1
    19c8:	11 05       	cpc	r17, r1
    19ca:	79 f7       	brne	.-34     	; 0x19aa <vfprintf+0x1ac>
    19cc:	ea c0       	rjmp	.+468    	; 0x1ba2 <vfprintf+0x3a4>
    19ce:	94 36       	cpi	r25, 0x64	; 100
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <vfprintf+0x1d8>
    19d2:	99 36       	cpi	r25, 0x69	; 105
    19d4:	69 f5       	brne	.+90     	; 0x1a30 <vfprintf+0x232>
    19d6:	f7 fe       	sbrs	r15, 7
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <vfprintf+0x1ec>
    19da:	f5 01       	movw	r30, r10
    19dc:	20 81       	ld	r18, Z
    19de:	31 81       	ldd	r19, Z+1	; 0x01
    19e0:	42 81       	ldd	r20, Z+2	; 0x02
    19e2:	53 81       	ldd	r21, Z+3	; 0x03
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0a c0       	rjmp	.+20     	; 0x19fe <vfprintf+0x200>
    19ea:	f5 01       	movw	r30, r10
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	9c 01       	movw	r18, r24
    19f2:	44 27       	eor	r20, r20
    19f4:	37 fd       	sbrc	r19, 7
    19f6:	40 95       	com	r20
    19f8:	54 2f       	mov	r21, r20
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a8 0e       	add	r10, r24
    1a00:	b9 1e       	adc	r11, r25
    1a02:	9f e6       	ldi	r25, 0x6F	; 111
    1a04:	f9 22       	and	r15, r25
    1a06:	57 ff       	sbrs	r21, 7
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <vfprintf+0x21e>
    1a0a:	50 95       	com	r21
    1a0c:	40 95       	com	r20
    1a0e:	30 95       	com	r19
    1a10:	21 95       	neg	r18
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	4f 4f       	sbci	r20, 0xFF	; 255
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	e0 e8       	ldi	r30, 0x80	; 128
    1a1a:	fe 2a       	or	r15, r30
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	b9 01       	movw	r22, r18
    1a20:	a1 01       	movw	r20, r2
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__ultoa_invert>
    1a2a:	d8 2e       	mov	r13, r24
    1a2c:	d2 18       	sub	r13, r2
    1a2e:	40 c0       	rjmp	.+128    	; 0x1ab0 <vfprintf+0x2b2>
    1a30:	95 37       	cpi	r25, 0x75	; 117
    1a32:	29 f4       	brne	.+10     	; 0x1a3e <vfprintf+0x240>
    1a34:	1f 2d       	mov	r17, r15
    1a36:	1f 7e       	andi	r17, 0xEF	; 239
    1a38:	2a e0       	ldi	r18, 0x0A	; 10
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	1d c0       	rjmp	.+58     	; 0x1a78 <vfprintf+0x27a>
    1a3e:	1f 2d       	mov	r17, r15
    1a40:	19 7f       	andi	r17, 0xF9	; 249
    1a42:	9f 36       	cpi	r25, 0x6F	; 111
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <vfprintf+0x260>
    1a46:	90 37       	cpi	r25, 0x70	; 112
    1a48:	20 f4       	brcc	.+8      	; 0x1a52 <vfprintf+0x254>
    1a4a:	98 35       	cpi	r25, 0x58	; 88
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <vfprintf+0x252>
    1a4e:	ac c0       	rjmp	.+344    	; 0x1ba8 <vfprintf+0x3aa>
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <vfprintf+0x272>
    1a52:	90 37       	cpi	r25, 0x70	; 112
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <vfprintf+0x266>
    1a56:	98 37       	cpi	r25, 0x78	; 120
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <vfprintf+0x25e>
    1a5a:	a6 c0       	rjmp	.+332    	; 0x1ba8 <vfprintf+0x3aa>
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <vfprintf+0x268>
    1a5e:	28 e0       	ldi	r18, 0x08	; 8
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <vfprintf+0x27a>
    1a64:	10 61       	ori	r17, 0x10	; 16
    1a66:	14 fd       	sbrc	r17, 4
    1a68:	14 60       	ori	r17, 0x04	; 4
    1a6a:	20 e1       	ldi	r18, 0x10	; 16
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <vfprintf+0x27a>
    1a70:	14 fd       	sbrc	r17, 4
    1a72:	16 60       	ori	r17, 0x06	; 6
    1a74:	20 e1       	ldi	r18, 0x10	; 16
    1a76:	32 e0       	ldi	r19, 0x02	; 2
    1a78:	17 ff       	sbrs	r17, 7
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <vfprintf+0x28e>
    1a7c:	f5 01       	movw	r30, r10
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	44 e0       	ldi	r20, 0x04	; 4
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	08 c0       	rjmp	.+16     	; 0x1a9c <vfprintf+0x29e>
    1a8c:	f5 01       	movw	r30, r10
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	bc 01       	movw	r22, r24
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	42 e0       	ldi	r20, 0x02	; 2
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	a4 0e       	add	r10, r20
    1a9e:	b5 1e       	adc	r11, r21
    1aa0:	a1 01       	movw	r20, r2
    1aa2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__ultoa_invert>
    1aa6:	d8 2e       	mov	r13, r24
    1aa8:	d2 18       	sub	r13, r2
    1aaa:	8f e7       	ldi	r24, 0x7F	; 127
    1aac:	f8 2e       	mov	r15, r24
    1aae:	f1 22       	and	r15, r17
    1ab0:	f6 fe       	sbrs	r15, 6
    1ab2:	0b c0       	rjmp	.+22     	; 0x1aca <vfprintf+0x2cc>
    1ab4:	5e ef       	ldi	r21, 0xFE	; 254
    1ab6:	f5 22       	and	r15, r21
    1ab8:	d9 14       	cp	r13, r9
    1aba:	38 f4       	brcc	.+14     	; 0x1aca <vfprintf+0x2cc>
    1abc:	f4 fe       	sbrs	r15, 4
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <vfprintf+0x2d0>
    1ac0:	f2 fc       	sbrc	r15, 2
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <vfprintf+0x2d0>
    1ac4:	8f ee       	ldi	r24, 0xEF	; 239
    1ac6:	f8 22       	and	r15, r24
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <vfprintf+0x2d0>
    1aca:	1d 2d       	mov	r17, r13
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <vfprintf+0x2d2>
    1ace:	19 2d       	mov	r17, r9
    1ad0:	f4 fe       	sbrs	r15, 4
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <vfprintf+0x2f0>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ed 0d       	add	r30, r13
    1ad8:	f1 1d       	adc	r31, r1
    1ada:	80 81       	ld	r24, Z
    1adc:	80 33       	cpi	r24, 0x30	; 48
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <vfprintf+0x2e8>
    1ae0:	99 ee       	ldi	r25, 0xE9	; 233
    1ae2:	f9 22       	and	r15, r25
    1ae4:	08 c0       	rjmp	.+16     	; 0x1af6 <vfprintf+0x2f8>
    1ae6:	1f 5f       	subi	r17, 0xFF	; 255
    1ae8:	f2 fe       	sbrs	r15, 2
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <vfprintf+0x2f8>
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <vfprintf+0x2f6>
    1aee:	8f 2d       	mov	r24, r15
    1af0:	86 78       	andi	r24, 0x86	; 134
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <vfprintf+0x2f8>
    1af4:	1f 5f       	subi	r17, 0xFF	; 255
    1af6:	0f 2d       	mov	r16, r15
    1af8:	f3 fc       	sbrc	r15, 3
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <vfprintf+0x326>
    1afc:	f0 fe       	sbrs	r15, 0
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <vfprintf+0x320>
    1b00:	1e 15       	cp	r17, r14
    1b02:	10 f0       	brcs	.+4      	; 0x1b08 <vfprintf+0x30a>
    1b04:	9d 2c       	mov	r9, r13
    1b06:	0b c0       	rjmp	.+22     	; 0x1b1e <vfprintf+0x320>
    1b08:	9d 2c       	mov	r9, r13
    1b0a:	9e 0c       	add	r9, r14
    1b0c:	91 1a       	sub	r9, r17
    1b0e:	1e 2d       	mov	r17, r14
    1b10:	06 c0       	rjmp	.+12     	; 0x1b1e <vfprintf+0x320>
    1b12:	80 e2       	ldi	r24, 0x20	; 32
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	b3 01       	movw	r22, r6
    1b18:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b1c:	1f 5f       	subi	r17, 0xFF	; 255
    1b1e:	1e 15       	cp	r17, r14
    1b20:	c0 f3       	brcs	.-16     	; 0x1b12 <vfprintf+0x314>
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <vfprintf+0x32e>
    1b24:	1e 15       	cp	r17, r14
    1b26:	10 f4       	brcc	.+4      	; 0x1b2c <vfprintf+0x32e>
    1b28:	e1 1a       	sub	r14, r17
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <vfprintf+0x330>
    1b2c:	ee 24       	eor	r14, r14
    1b2e:	04 ff       	sbrs	r16, 4
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <vfprintf+0x352>
    1b32:	80 e3       	ldi	r24, 0x30	; 48
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	b3 01       	movw	r22, r6
    1b38:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b3c:	02 ff       	sbrs	r16, 2
    1b3e:	1d c0       	rjmp	.+58     	; 0x1b7a <vfprintf+0x37c>
    1b40:	01 fd       	sbrc	r16, 1
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <vfprintf+0x34c>
    1b44:	88 e7       	ldi	r24, 0x78	; 120
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <vfprintf+0x368>
    1b4a:	88 e5       	ldi	r24, 0x58	; 88
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0b c0       	rjmp	.+22     	; 0x1b66 <vfprintf+0x368>
    1b50:	80 2f       	mov	r24, r16
    1b52:	86 78       	andi	r24, 0x86	; 134
    1b54:	91 f0       	breq	.+36     	; 0x1b7a <vfprintf+0x37c>
    1b56:	01 ff       	sbrs	r16, 1
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <vfprintf+0x360>
    1b5a:	8b e2       	ldi	r24, 0x2B	; 43
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <vfprintf+0x362>
    1b5e:	80 e2       	ldi	r24, 0x20	; 32
    1b60:	f7 fc       	sbrc	r15, 7
    1b62:	8d e2       	ldi	r24, 0x2D	; 45
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	b3 01       	movw	r22, r6
    1b68:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <vfprintf+0x37c>
    1b6e:	80 e3       	ldi	r24, 0x30	; 48
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	b3 01       	movw	r22, r6
    1b74:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b78:	9a 94       	dec	r9
    1b7a:	d9 14       	cp	r13, r9
    1b7c:	c0 f3       	brcs	.-16     	; 0x1b6e <vfprintf+0x370>
    1b7e:	da 94       	dec	r13
    1b80:	f1 01       	movw	r30, r2
    1b82:	ed 0d       	add	r30, r13
    1b84:	f1 1d       	adc	r31, r1
    1b86:	80 81       	ld	r24, Z
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	b3 01       	movw	r22, r6
    1b8c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1b90:	dd 20       	and	r13, r13
    1b92:	a9 f7       	brne	.-22     	; 0x1b7e <vfprintf+0x380>
    1b94:	06 c0       	rjmp	.+12     	; 0x1ba2 <vfprintf+0x3a4>
    1b96:	80 e2       	ldi	r24, 0x20	; 32
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	b3 01       	movw	r22, r6
    1b9c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <fputc>
    1ba0:	ea 94       	dec	r14
    1ba2:	ee 20       	and	r14, r14
    1ba4:	c1 f7       	brne	.-16     	; 0x1b96 <vfprintf+0x398>
    1ba6:	43 ce       	rjmp	.-890    	; 0x182e <vfprintf+0x30>
    1ba8:	f3 01       	movw	r30, r6
    1baa:	66 81       	ldd	r22, Z+6	; 0x06
    1bac:	77 81       	ldd	r23, Z+7	; 0x07
    1bae:	cb 01       	movw	r24, r22
    1bb0:	2b 96       	adiw	r28, 0x0b	; 11
    1bb2:	e2 e1       	ldi	r30, 0x12	; 18
    1bb4:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__>

00001bb8 <__eerd_byte_m328p>:
    1bb8:	f9 99       	sbic	0x1f, 1	; 31
    1bba:	fe cf       	rjmp	.-4      	; 0x1bb8 <__eerd_byte_m328p>
    1bbc:	92 bd       	out	0x22, r25	; 34
    1bbe:	81 bd       	out	0x21, r24	; 33
    1bc0:	f8 9a       	sbi	0x1f, 0	; 31
    1bc2:	99 27       	eor	r25, r25
    1bc4:	80 b5       	in	r24, 0x20	; 32
    1bc6:	08 95       	ret

00001bc8 <__eeupd_byte_m328p>:
    1bc8:	26 2f       	mov	r18, r22

00001bca <__eeupd_r18_m328p>:
    1bca:	f9 99       	sbic	0x1f, 1	; 31
    1bcc:	fe cf       	rjmp	.-4      	; 0x1bca <__eeupd_r18_m328p>
    1bce:	92 bd       	out	0x22, r25	; 34
    1bd0:	81 bd       	out	0x21, r24	; 33
    1bd2:	f8 9a       	sbi	0x1f, 0	; 31
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	00 b4       	in	r0, 0x20	; 32
    1bd8:	02 16       	cp	r0, r18
    1bda:	39 f0       	breq	.+14     	; 0x1bea <__eeupd_r18_m328p+0x20>
    1bdc:	1f ba       	out	0x1f, r1	; 31
    1bde:	20 bd       	out	0x20, r18	; 32
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	fa 9a       	sbi	0x1f, 2	; 31
    1be6:	f9 9a       	sbi	0x1f, 1	; 31
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	08 95       	ret

00001bec <strnlen_P>:
    1bec:	fc 01       	movw	r30, r24
    1bee:	05 90       	lpm	r0, Z+
    1bf0:	61 50       	subi	r22, 0x01	; 1
    1bf2:	70 40       	sbci	r23, 0x00	; 0
    1bf4:	01 10       	cpse	r0, r1
    1bf6:	d8 f7       	brcc	.-10     	; 0x1bee <strnlen_P+0x2>
    1bf8:	80 95       	com	r24
    1bfa:	90 95       	com	r25
    1bfc:	8e 0f       	add	r24, r30
    1bfe:	9f 1f       	adc	r25, r31
    1c00:	08 95       	ret

00001c02 <strnlen>:
    1c02:	fc 01       	movw	r30, r24
    1c04:	61 50       	subi	r22, 0x01	; 1
    1c06:	70 40       	sbci	r23, 0x00	; 0
    1c08:	01 90       	ld	r0, Z+
    1c0a:	01 10       	cpse	r0, r1
    1c0c:	d8 f7       	brcc	.-10     	; 0x1c04 <strnlen+0x2>
    1c0e:	80 95       	com	r24
    1c10:	90 95       	com	r25
    1c12:	8e 0f       	add	r24, r30
    1c14:	9f 1f       	adc	r25, r31
    1c16:	08 95       	ret

00001c18 <fputc>:
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	8c 01       	movw	r16, r24
    1c22:	eb 01       	movw	r28, r22
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	81 ff       	sbrs	r24, 1
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <fputc+0x48>
    1c2a:	82 ff       	sbrs	r24, 2
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <fputc+0x30>
    1c2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c30:	3f 81       	ldd	r19, Y+7	; 0x07
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	28 17       	cp	r18, r24
    1c38:	39 07       	cpc	r19, r25
    1c3a:	64 f4       	brge	.+24     	; 0x1c54 <fputc+0x3c>
    1c3c:	e8 81       	ld	r30, Y
    1c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c40:	01 93       	st	Z+, r16
    1c42:	f9 83       	std	Y+1, r31	; 0x01
    1c44:	e8 83       	st	Y, r30
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <fputc+0x3c>
    1c48:	e8 85       	ldd	r30, Y+8	; 0x08
    1c4a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c4c:	80 2f       	mov	r24, r16
    1c4e:	09 95       	icall
    1c50:	89 2b       	or	r24, r25
    1c52:	31 f4       	brne	.+12     	; 0x1c60 <fputc+0x48>
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
    1c56:	9f 81       	ldd	r25, Y+7	; 0x07
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	9f 83       	std	Y+7, r25	; 0x07
    1c5c:	8e 83       	std	Y+6, r24	; 0x06
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <fputc+0x4c>
    1c60:	0f ef       	ldi	r16, 0xFF	; 255
    1c62:	1f ef       	ldi	r17, 0xFF	; 255
    1c64:	c8 01       	movw	r24, r16
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <__ultoa_invert>:
    1c70:	fa 01       	movw	r30, r20
    1c72:	aa 27       	eor	r26, r26
    1c74:	28 30       	cpi	r18, 0x08	; 8
    1c76:	51 f1       	breq	.+84     	; 0x1ccc <__ultoa_invert+0x5c>
    1c78:	20 31       	cpi	r18, 0x10	; 16
    1c7a:	81 f1       	breq	.+96     	; 0x1cdc <__ultoa_invert+0x6c>
    1c7c:	e8 94       	clt
    1c7e:	6f 93       	push	r22
    1c80:	6e 7f       	andi	r22, 0xFE	; 254
    1c82:	6e 5f       	subi	r22, 0xFE	; 254
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	8f 4f       	sbci	r24, 0xFF	; 255
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	af 4f       	sbci	r26, 0xFF	; 255
    1c8c:	b1 e0       	ldi	r27, 0x01	; 1
    1c8e:	3e d0       	rcall	.+124    	; 0x1d0c <__ultoa_invert+0x9c>
    1c90:	b4 e0       	ldi	r27, 0x04	; 4
    1c92:	3c d0       	rcall	.+120    	; 0x1d0c <__ultoa_invert+0x9c>
    1c94:	67 0f       	add	r22, r23
    1c96:	78 1f       	adc	r23, r24
    1c98:	89 1f       	adc	r24, r25
    1c9a:	9a 1f       	adc	r25, r26
    1c9c:	a1 1d       	adc	r26, r1
    1c9e:	68 0f       	add	r22, r24
    1ca0:	79 1f       	adc	r23, r25
    1ca2:	8a 1f       	adc	r24, r26
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	a1 1d       	adc	r26, r1
    1ca8:	6a 0f       	add	r22, r26
    1caa:	71 1d       	adc	r23, r1
    1cac:	81 1d       	adc	r24, r1
    1cae:	91 1d       	adc	r25, r1
    1cb0:	a1 1d       	adc	r26, r1
    1cb2:	20 d0       	rcall	.+64     	; 0x1cf4 <__ultoa_invert+0x84>
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <__ultoa_invert+0x48>
    1cb6:	68 94       	set
    1cb8:	3f 91       	pop	r19
    1cba:	2a e0       	ldi	r18, 0x0A	; 10
    1cbc:	26 9f       	mul	r18, r22
    1cbe:	11 24       	eor	r1, r1
    1cc0:	30 19       	sub	r19, r0
    1cc2:	30 5d       	subi	r19, 0xD0	; 208
    1cc4:	31 93       	st	Z+, r19
    1cc6:	de f6       	brtc	.-74     	; 0x1c7e <__ultoa_invert+0xe>
    1cc8:	cf 01       	movw	r24, r30
    1cca:	08 95       	ret
    1ccc:	46 2f       	mov	r20, r22
    1cce:	47 70       	andi	r20, 0x07	; 7
    1cd0:	40 5d       	subi	r20, 0xD0	; 208
    1cd2:	41 93       	st	Z+, r20
    1cd4:	b3 e0       	ldi	r27, 0x03	; 3
    1cd6:	0f d0       	rcall	.+30     	; 0x1cf6 <__ultoa_invert+0x86>
    1cd8:	c9 f7       	brne	.-14     	; 0x1ccc <__ultoa_invert+0x5c>
    1cda:	f6 cf       	rjmp	.-20     	; 0x1cc8 <__ultoa_invert+0x58>
    1cdc:	46 2f       	mov	r20, r22
    1cde:	4f 70       	andi	r20, 0x0F	; 15
    1ce0:	40 5d       	subi	r20, 0xD0	; 208
    1ce2:	4a 33       	cpi	r20, 0x3A	; 58
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <__ultoa_invert+0x7c>
    1ce6:	49 5d       	subi	r20, 0xD9	; 217
    1ce8:	31 fd       	sbrc	r19, 1
    1cea:	40 52       	subi	r20, 0x20	; 32
    1cec:	41 93       	st	Z+, r20
    1cee:	02 d0       	rcall	.+4      	; 0x1cf4 <__ultoa_invert+0x84>
    1cf0:	a9 f7       	brne	.-22     	; 0x1cdc <__ultoa_invert+0x6c>
    1cf2:	ea cf       	rjmp	.-44     	; 0x1cc8 <__ultoa_invert+0x58>
    1cf4:	b4 e0       	ldi	r27, 0x04	; 4
    1cf6:	a6 95       	lsr	r26
    1cf8:	97 95       	ror	r25
    1cfa:	87 95       	ror	r24
    1cfc:	77 95       	ror	r23
    1cfe:	67 95       	ror	r22
    1d00:	ba 95       	dec	r27
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__ultoa_invert+0x86>
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	61 05       	cpc	r22, r1
    1d08:	71 05       	cpc	r23, r1
    1d0a:	08 95       	ret
    1d0c:	9b 01       	movw	r18, r22
    1d0e:	ac 01       	movw	r20, r24
    1d10:	0a 2e       	mov	r0, r26
    1d12:	06 94       	lsr	r0
    1d14:	57 95       	ror	r21
    1d16:	47 95       	ror	r20
    1d18:	37 95       	ror	r19
    1d1a:	27 95       	ror	r18
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__ultoa_invert+0xa2>
    1d20:	62 0f       	add	r22, r18
    1d22:	73 1f       	adc	r23, r19
    1d24:	84 1f       	adc	r24, r20
    1d26:	95 1f       	adc	r25, r21
    1d28:	a0 1d       	adc	r26, r0
    1d2a:	08 95       	ret

00001d2c <__prologue_saves__>:
    1d2c:	2f 92       	push	r2
    1d2e:	3f 92       	push	r3
    1d30:	4f 92       	push	r4
    1d32:	5f 92       	push	r5
    1d34:	6f 92       	push	r6
    1d36:	7f 92       	push	r7
    1d38:	8f 92       	push	r8
    1d3a:	9f 92       	push	r9
    1d3c:	af 92       	push	r10
    1d3e:	bf 92       	push	r11
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	ca 1b       	sub	r28, r26
    1d56:	db 0b       	sbc	r29, r27
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	09 94       	ijmp

00001d64 <__epilogue_restores__>:
    1d64:	2a 88       	ldd	r2, Y+18	; 0x12
    1d66:	39 88       	ldd	r3, Y+17	; 0x11
    1d68:	48 88       	ldd	r4, Y+16	; 0x10
    1d6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d70:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d72:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d74:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d76:	b9 84       	ldd	r11, Y+9	; 0x09
    1d78:	c8 84       	ldd	r12, Y+8	; 0x08
    1d7a:	df 80       	ldd	r13, Y+7	; 0x07
    1d7c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d7e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d80:	0c 81       	ldd	r16, Y+4	; 0x04
    1d82:	1b 81       	ldd	r17, Y+3	; 0x03
    1d84:	aa 81       	ldd	r26, Y+2	; 0x02
    1d86:	b9 81       	ldd	r27, Y+1	; 0x01
    1d88:	ce 0f       	add	r28, r30
    1d8a:	d1 1d       	adc	r29, r1
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	ed 01       	movw	r28, r26
    1d98:	08 95       	ret

00001d9a <_exit>:
    1d9a:	f8 94       	cli

00001d9c <__stop_program>:
    1d9c:	ff cf       	rjmp	.-2      	; 0x1d9c <__stop_program>
