
KatanaLRS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  000018e0  00001974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800256  00800256  00001aca  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001aa  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000efd  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037a  00000000  00000000  00002b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eed  00000000  00000000  00002f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00003df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000843  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_1>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_5>
      18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ee       	ldi	r30, 0xE0	; 224
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 36       	cpi	r26, 0x64	; 100
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3b 07 	call	0xe76	; 0xe76 <main>
      9e:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <startI2C>:
void stopI2C(void);
uint8_t writeI2C(uint8_t);
uint8_t readI2C(uint8_t);


uint8_t startI2C(uint8_t address, uint8_t intent){ // i.e. ITG3200ADDR, WRITE
      a6:	28 2f       	mov	r18, r24
	uint16_t time = TCNT1;
      a8:	e0 91 84 00 	lds	r30, 0x0084
      ac:	f0 91 85 00 	lds	r31, 0x0085
	//while( !(TWCR &(1<<TWINT)));			// Avoid Crashing
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Send Start
      b0:	84 ea       	ldi	r24, 0xA4	; 164
      b2:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
      b6:	af 01       	movw	r20, r30
      b8:	4e 5c       	subi	r20, 0xCE	; 206
      ba:	5f 4f       	sbci	r21, 0xFF	; 255
      bc:	07 c0       	rjmp	.+14     	; 0xcc <startI2C+0x26>
      be:	80 91 84 00 	lds	r24, 0x0084
      c2:	90 91 85 00 	lds	r25, 0x0085
      c6:	84 17       	cp	r24, r20
      c8:	95 07       	cpc	r25, r21
      ca:	21 f0       	breq	.+8      	; 0xd4 <startI2C+0x2e>

uint8_t startI2C(uint8_t address, uint8_t intent){ // i.e. ITG3200ADDR, WRITE
	uint16_t time = TCNT1;
	//while( !(TWCR &(1<<TWINT)));			// Avoid Crashing
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);	// Send Start
	while( !(TWCR &(1<<TWINT))){
      cc:	80 91 bc 00 	lds	r24, 0x00BC
      d0:	87 ff       	sbrs	r24, 7
      d2:	f5 cf       	rjmp	.-22     	; 0xbe <startI2C+0x18>
		if(TCNT1== (time+50)) break;
	} //printf("ST1: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_START) printf("BadStart\n");
#endif
	TWDR = ((address<<1) | (intent & 0x01));			// Hail Slave Device
      d4:	61 70       	andi	r22, 0x01	; 1
      d6:	22 0f       	add	r18, r18
      d8:	26 2b       	or	r18, r22
      da:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT)|(1<<TWEN);			// Engage
      de:	84 e8       	ldi	r24, 0x84	; 132
      e0:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
      e4:	9f 01       	movw	r18, r30
      e6:	2e 5c       	subi	r18, 0xCE	; 206
      e8:	3f 4f       	sbci	r19, 0xFF	; 255
      ea:	07 c0       	rjmp	.+14     	; 0xfa <startI2C+0x54>
      ec:	80 91 84 00 	lds	r24, 0x0084
      f0:	90 91 85 00 	lds	r25, 0x0085
      f4:	82 17       	cp	r24, r18
      f6:	93 07       	cpc	r25, r19
      f8:	21 f0       	breq	.+8      	; 0x102 <startI2C+0x5c>
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_START) printf("BadStart\n");
#endif
	TWDR = ((address<<1) | (intent & 0x01));			// Hail Slave Device
	TWCR = (1<<TWINT)|(1<<TWEN);			// Engage
	while( !(TWCR &(1<<TWINT))){
      fa:	80 91 bc 00 	lds	r24, 0x00BC
      fe:	87 ff       	sbrs	r24, 7
     100:	f5 cf       	rjmp	.-22     	; 0xec <startI2C+0x46>
		if(TCNT1== (time+50)) break;
	} //; //printf("ST2: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS == TW_NO_INFO || TW_STATUS == TW_BUS_ERROR) printf("BadHold\n");
#endif
	return TW_STATUS;
     102:	80 91 b9 00 	lds	r24, 0x00B9
}
     106:	88 7f       	andi	r24, 0xF8	; 248
     108:	08 95       	ret

0000010a <stopI2C>:

void stopI2C(void){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Send Stop
     10a:	84 e9       	ldi	r24, 0x94	; 148
     10c:	80 93 bc 00 	sts	0x00BC, r24
	while(TWCR &(1<<TWSTO)); //printf("SP: %X\n",TWSR);
     110:	80 91 bc 00 	lds	r24, 0x00BC
     114:	84 fd       	sbrc	r24, 4
     116:	fc cf       	rjmp	.-8      	; 0x110 <stopI2C+0x6>
}
     118:	08 95       	ret

0000011a <writeI2C>:

uint8_t writeI2C(uint8_t data){
	uint16_t time = TCNT1;
     11a:	20 91 84 00 	lds	r18, 0x0084
     11e:	30 91 85 00 	lds	r19, 0x0085
	TWDR = data;							// Data
     122:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);			// Enable
     126:	84 e8       	ldi	r24, 0x84	; 132
     128:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
     12c:	2e 5c       	subi	r18, 0xCE	; 206
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	07 c0       	rjmp	.+14     	; 0x140 <writeI2C+0x26>
     132:	80 91 84 00 	lds	r24, 0x0084
     136:	90 91 85 00 	lds	r25, 0x0085
     13a:	82 17       	cp	r24, r18
     13c:	93 07       	cpc	r25, r19
     13e:	21 f0       	breq	.+8      	; 0x148 <writeI2C+0x2e>

uint8_t writeI2C(uint8_t data){
	uint16_t time = TCNT1;
	TWDR = data;							// Data
	TWCR = (1<<TWINT)|(1<<TWEN);			// Enable
	while( !(TWCR &(1<<TWINT))){
     140:	80 91 bc 00 	lds	r24, 0x00BC
     144:	87 ff       	sbrs	r24, 7
     146:	f5 cf       	rjmp	.-22     	; 0x132 <writeI2C+0x18>
		if(TCNT1== (time+50)) break;
	} //; //printf("WT: %X\n",TWSR);			// Wait
#if defined(DEBUG_I2C)
	if(TW_STATUS != TW_MT_DATA_ACK) printf("BadFrame\n");
#endif
	return TW_STATUS;
     148:	80 91 b9 00 	lds	r24, 0x00B9
}
     14c:	88 7f       	andi	r24, 0xF8	; 248
     14e:	08 95       	ret

00000150 <readI2C>:

uint8_t readI2C(uint8_t ackType){
	uint16_t time = TCNT1;
     150:	20 91 84 00 	lds	r18, 0x0084
     154:	30 91 85 00 	lds	r19, 0x0085
	//printf("TWCR: %X", (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA));
	TWCR = (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA);
     158:	82 95       	swap	r24
     15a:	88 0f       	add	r24, r24
     15c:	88 0f       	add	r24, r24
     15e:	80 7c       	andi	r24, 0xC0	; 192
     160:	84 68       	ori	r24, 0x84	; 132
     162:	80 93 bc 00 	sts	0x00BC, r24
	while( !(TWCR &(1<<TWINT))){
		if(TCNT1== (time+50)) break;
     166:	2e 5c       	subi	r18, 0xCE	; 206
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	07 c0       	rjmp	.+14     	; 0x17a <readI2C+0x2a>
     16c:	80 91 84 00 	lds	r24, 0x0084
     170:	90 91 85 00 	lds	r25, 0x0085
     174:	82 17       	cp	r24, r18
     176:	93 07       	cpc	r25, r19
     178:	21 f0       	breq	.+8      	; 0x182 <readI2C+0x32>

uint8_t readI2C(uint8_t ackType){
	uint16_t time = TCNT1;
	//printf("TWCR: %X", (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA));
	TWCR = (1<<TWINT)|(1<<TWEN)|(ackType<<TWEA);
	while( !(TWCR &(1<<TWINT))){
     17a:	80 91 bc 00 	lds	r24, 0x00BC
     17e:	87 ff       	sbrs	r24, 7
     180:	f5 cf       	rjmp	.-22     	; 0x16c <readI2C+0x1c>
		if(TCNT1== (time+50)) break;
	} //; //printf("RV: %X\n",TWSR);
	return TWDR;
     182:	80 91 bb 00 	lds	r24, 0x00BB
}
     186:	08 95       	ret

00000188 <transferSPI>:


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     188:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     18a:	0d b4       	in	r0, 0x2d	; 45
     18c:	07 fe       	sbrs	r0, 7
     18e:	fd cf       	rjmp	.-6      	; 0x18a <transferSPI+0x2>
	return SPDR;
     190:	8e b5       	in	r24, 0x2e	; 46
}
     192:	08 95       	ret

00000194 <__vector_6>:
	uint16_t sysVin;
	uint16_t atMega;
} volt;

// Interrupt Vectors
ISR(WDT_vect){
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	11 24       	eor	r1, r1
     19e:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_WDT;
     1a0:	80 91 57 02 	lds	r24, 0x0257
     1a4:	83 7f       	andi	r24, 0xF3	; 243
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 93 57 02 	sts	0x0257, r24
}
     1ac:	8f 91       	pop	r24
     1ae:	0f 90       	pop	r0
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	0f 90       	pop	r0
     1b4:	1f 90       	pop	r1
     1b6:	18 95       	reti

000001b8 <__vector_21>:

ISR(ADC_vect){
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	8f 93       	push	r24
	sleep_disable();
     1c4:	83 b7       	in	r24, 0x33	; 51
     1c6:	8e 7f       	andi	r24, 0xFE	; 254
     1c8:	83 bf       	out	0x33, r24	; 51
}
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <__vector_5>:

ISR(PCINT2_vect){
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_UART;
     1e2:	80 91 57 02 	lds	r24, 0x0257
     1e6:	8c 60       	ori	r24, 0x0C	; 12
     1e8:	80 93 57 02 	sts	0x0257, r24
	PCICR = 0;
     1ec:	10 92 68 00 	sts	0x0068, r1
	PCMSK2 = 0;
     1f0:	10 92 6d 00 	sts	0x006D, r1
}
     1f4:	8f 91       	pop	r24
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <__vector_1>:

ISR(INT0_vect){
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	11 24       	eor	r1, r1
     20a:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_INTx;
     20c:	80 91 57 02 	lds	r24, 0x0257
     210:	83 7f       	andi	r24, 0xF3	; 243
     212:	84 60       	ori	r24, 0x04	; 4
     214:	80 93 57 02 	sts	0x0257, r24
	EIMSK = 0;
     218:	1d ba       	out	0x1d, r1	; 29
}
     21a:	8f 91       	pop	r24
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <__vector_2>:

ISR(INT1_vect){
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	8f 93       	push	r24
	stateFlags.intSource = INT_SRC_INTx;
     232:	80 91 57 02 	lds	r24, 0x0257
     236:	83 7f       	andi	r24, 0xF3	; 243
     238:	84 60       	ori	r24, 0x04	; 4
     23a:	80 93 57 02 	sts	0x0257, r24
	EIMSK = 0;
     23e:	1d ba       	out	0x1d, r1	; 29
}
     240:	8f 91       	pop	r24
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <atMegaInit>:
	
	return systemReturnState;
}

uint8_t atMegaInit(void){
	uint8_t startupStatus = MCUSR; //wdt_init(); //
     24c:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
     24e:	14 be       	out	0x34, r1	; 52
	WDTCSR |= _BV(WDCE) | _BV(WDE); // Three Options Below:
     250:	e0 e6       	ldi	r30, 0x60	; 96
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	90 81       	ld	r25, Z
     256:	98 61       	ori	r25, 0x18	; 24
     258:	90 83       	st	Z, r25
	// Was this WDTCSR = _BV(WDIE) | _BV(WDP2) | _BV(WDP1) | _BV(WDE); // Hardwire the WDT for 1 Sec
	//WDTCSR = _BV(WDE) | _BV(WDP3) | _BV(WDP0);
	//WDTCSR = 0;
	WDTCSR = _BV(WDIE) | _BV(WDE) | _BV(WDP3) | _BV(WDP0);
     25a:	99 e6       	ldi	r25, 0x69	; 105
     25c:	90 83       	st	Z, r25
	wdt_reset();
     25e:	a8 95       	wdr
	
	// System
	//MCUCR |= (1<<PUD);		// Pull-up Disable
	MCUCR = 0;
     260:	15 be       	out	0x35, r1	; 53
	PRR = 0;
     262:	10 92 64 00 	sts	0x0064, r1

	// Timers
	TCCR1A = _BV(COM1A1)|_BV(WGM11)|_BV(WGM13);
     266:	92 e9       	ldi	r25, 0x92	; 146
     268:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1<<CS12); //(1<<CS11)|(1<<CS10); //
     26c:	94 e0       	ldi	r25, 0x04	; 4
     26e:	90 93 81 00 	sts	0x0081, r25
	ICR1 = 0xFFFF;
     272:	2f ef       	ldi	r18, 0xFF	; 255
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	30 93 87 00 	sts	0x0087, r19
     27a:	20 93 86 00 	sts	0x0086, r18
	
	// IO Ports
	// 0: Input (Hi-Z) 1: Output
	//        76543210		7		6		5		4		3		2		1		0
	DDRB |= 0b00101111; //	XTAL2	XTAL1	SCK		MISO	MOSI	CS_RFM	LED_BL	LED_OR
     27e:	94 b1       	in	r25, 0x04	; 4
     280:	9f 62       	ori	r25, 0x2F	; 47
     282:	94 b9       	out	0x04, r25	; 4
    DDRC |= 0b00001111; //	--		Reset	SCL		SDA		P4		P3		P2		P1
     284:	97 b1       	in	r25, 0x07	; 7
     286:	9f 60       	ori	r25, 0x0F	; 15
     288:	97 b9       	out	0x07, r25	; 7
    DDRD |= 0b00000010; //	P8		P7		P6		P5		RFM_PBL	RF_INT	TXD		RXD
     28a:	51 9a       	sbi	0x0a, 1	; 10
	// PORTC |=0b00000000;
	
	// Serial Port
	UBRR0H = UART_UBRR >> 8;
     28c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UART_UBRR;
     290:	98 e0       	ldi	r25, 0x08	; 8
     292:	90 93 c4 00 	sts	0x00C4, r25
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     296:	98 e9       	ldi	r25, 0x98	; 152
     298:	90 93 c1 00 	sts	0x00C1, r25
    stdout = &uart_io; //= stdin 
     29c:	27 e4       	ldi	r18, 0x47	; 71
     29e:	32 e0       	ldi	r19, 0x02	; 2
     2a0:	30 93 61 02 	sts	0x0261, r19
     2a4:	20 93 60 02 	sts	0x0260, r18
	
	//SPI
	SPCR	= (1<<SPE)|(1<<MSTR)|(1<<SPR0); // |(1<<CPOL)|(1<<CPHA)
     2a8:	91 e5       	ldi	r25, 0x51	; 81
     2aa:	9c bd       	out	0x2c, r25	; 44
	
	//I2C
	TWCR = (1<<TWEN) | (1<<TWEA);
     2ac:	94 e4       	ldi	r25, 0x44	; 68
     2ae:	90 93 bc 00 	sts	0x00BC, r25
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0));
     2b2:	e9 eb       	ldi	r30, 0xB9	; 185
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	90 81       	ld	r25, Z
     2b8:	9c 7f       	andi	r25, 0xFC	; 252
     2ba:	90 83       	st	Z, r25
	TWBR = ((F_CPU / I2C_FREQ) - 16) / 2;
     2bc:	9c e0       	ldi	r25, 0x0C	; 12
     2be:	90 93 b8 00 	sts	0x00B8, r25
	
	// ADC
	ADMUX 	= 0; //(1<<REFS0);	// AVcc Connected
     2c2:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
     2c6:	9f e8       	ldi	r25, 0x8F	; 143
     2c8:	90 93 7a 00 	sts	0x007A, r25
	DIDR0 	= (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     2cc:	9f e3       	ldi	r25, 0x3F	; 63
     2ce:	90 93 7e 00 	sts	0x007E, r25

	//PCICR = 0; //(1<<PCIE2);
	//PCMSK2 = 0; //(1<<PCINT16);
	
	EICRA = 0;
     2d2:	10 92 69 00 	sts	0x0069, r1
	EIMSK = 0; //(1<<INT1)|(1<<INT0);
     2d6:	1d ba       	out	0x1d, r1	; 29
	
	sei();
     2d8:	78 94       	sei
	
	return startupStatus;
}
     2da:	08 95       	ret

000002dc <systemSleep>:
	//	Interval	0	1	2	3	4	5	6	7	8	9
	//	Time in ms	16	32	64	128	256	512	1k	2k	4k	8k
	
	//LED = LOW;
	
	cli();
     2dc:	f8 94       	cli
	
	TWCR = 0;
     2de:	10 92 bc 00 	sts	0x00BC, r1
	TWSR = 0;
     2e2:	10 92 b9 00 	sts	0x00B9, r1
	SPCR = 0;
     2e6:	1c bc       	out	0x2c, r1	; 44
	ADMUX = 0;
     2e8:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     2ec:	10 92 7a 00 	sts	0x007A, r1
	DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     2f0:	8f e3       	ldi	r24, 0x3F	; 63
     2f2:	80 93 7e 00 	sts	0x007E, r24
	DIDR1 = (1<<AIN1D)|(1<<AIN0D);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	80 93 7f 00 	sts	0x007F, r24
	UCSR0B =0;
     2fc:	10 92 c1 00 	sts	0x00C1, r1
	TCCR1B = 0;
     300:	10 92 81 00 	sts	0x0081, r1
	PORTB = PORTC = PORTD = 0; // 
     304:	1b b8       	out	0x0b, r1	; 11
     306:	8b b1       	in	r24, 0x0b	; 11
     308:	88 b9       	out	0x08, r24	; 8
     30a:	88 b1       	in	r24, 0x08	; 8
     30c:	85 b9       	out	0x05, r24	; 5
	DDRB = DDRC = DDRD = 0;
     30e:	1a b8       	out	0x0a, r1	; 10
     310:	8a b1       	in	r24, 0x0a	; 10
     312:	87 b9       	out	0x07, r24	; 7
     314:	87 b1       	in	r24, 0x07	; 7
     316:	84 b9       	out	0x04, r24	; 4
	
	//MPU_VLOGIC = LOW;
	power_all_disable();
     318:	e4 e6       	ldi	r30, 0x64	; 100
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8f 6e       	ori	r24, 0xEF	; 239
     320:	80 83       	st	Z, r24
	
	//wdt_reset();
	//uint8_t value = (uint8_t)( ((configFlags.wdtSlpEn)<<WDIE) | (interval & 0x08? (1<<WDP3): 0x00) | (interval & 0x07) );
	MCUSR = 0;
     322:	14 be       	out	0x34, r1	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     324:	e0 e6       	ldi	r30, 0x60	; 96
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	88 61       	ori	r24, 0x18	; 24
     32c:	80 83       	st	Z, r24
	WDTCSR = _BV(WDIE) | _BV(WDE) | _BV(WDP3) | _BV(WDP0);
     32e:	89 e6       	ldi	r24, 0x69	; 105
     330:	80 83       	st	Z, r24
	
	
	// if(stateFlags.systemState == DOWN)			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	// else if(stateFlags.systemState == SLEEP) 	set_sleep_mode(SLEEP_MODE_STANDBY);
	// else										set_sleep_mode(SLEEP_MODE_IDLE);
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     332:	83 b7       	in	r24, 0x33	; 51
     334:	81 7f       	andi	r24, 0xF1	; 241
     336:	84 60       	ori	r24, 0x04	; 4
     338:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     33a:	83 b7       	in	r24, 0x33	; 51
     33c:	81 60       	ori	r24, 0x01	; 1
     33e:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     340:	85 b7       	in	r24, 0x35	; 53
     342:	80 66       	ori	r24, 0x60	; 96
     344:	85 bf       	out	0x35, r24	; 53
     346:	8f 7d       	andi	r24, 0xDF	; 223
     348:	85 bf       	out	0x35, r24	; 53
	sei();
     34a:	78 94       	sei
	sleep_cpu();
     34c:	88 95       	sleep
	
	sleep_disable();
     34e:	83 b7       	in	r24, 0x33	; 51
     350:	8e 7f       	andi	r24, 0xFE	; 254
     352:	83 bf       	out	0x33, r24	; 51
	uint8_t systemReturnState = atMegaInit();
     354:	0e 94 26 01 	call	0x24c	; 0x24c <atMegaInit>
	
	//LED = HIGH;
	
	return systemReturnState;
}
     358:	08 95       	ret

0000035a <radioWriteReg>:

	#endif
}

void radioWriteReg(uint8_t regAddress, uint8_t regValue){
	CS_RFM = LOW;
     35a:	2a 98       	cbi	0x05, 2	; 5
		transferSPI((RFM_WRITE<<7) | regAddress);
     35c:	80 68       	ori	r24, 0x80	; 128


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     35e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     360:	0d b4       	in	r0, 0x2d	; 45
     362:	07 fe       	sbrs	r0, 7
     364:	fd cf       	rjmp	.-6      	; 0x360 <radioWriteReg+0x6>
	return SPDR;
     366:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     368:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
     36a:	0d b4       	in	r0, 0x2d	; 45
     36c:	07 fe       	sbrs	r0, 7
     36e:	fd cf       	rjmp	.-6      	; 0x36a <radioWriteReg+0x10>
	return SPDR;
     370:	8e b5       	in	r24, 0x2e	; 46
		transferSPI(regValue);
	CS_RFM = HIGH;
     372:	2a 9a       	sbi	0x05, 2	; 5
}
     374:	08 95       	ret

00000376 <radioMode>:
	
	return startupStatus;
}

void radioMode(uint8_t mode){
	radioWriteReg(GPIO_0_CFG, GPIO_TXST);
     376:	8b e0       	ldi	r24, 0x0B	; 11
     378:	62 e1       	ldi	r22, 0x12	; 18
     37a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(GPIO_1_CFG, GPIO_RXST);
     37e:	8c e0       	ldi	r24, 0x0C	; 12
     380:	65 e1       	ldi	r22, 0x15	; 21
     382:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(GPIO_2_CFG, GPIO_PMBLDET);
     386:	8d e0       	ldi	r24, 0x0D	; 13
     388:	69 e1       	ldi	r22, 0x19	; 25
     38a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	
	radioWriteReg(0x06, 0x00);		// Disable all interrupts
     38e:	86 e0       	ldi	r24, 0x06	; 6
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x07, 0x01);		// Set READY mode
     396:	87 e0       	ldi	r24, 0x07	; 7
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x09, 0x7F);		// Cap = 12.5pF
     39e:	89 e0       	ldi	r24, 0x09	; 9
     3a0:	6f e7       	ldi	r22, 0x7F	; 127
     3a2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x0A, 0x05);		// Clk output is 2MHz
     3a6:	8a e0       	ldi	r24, 0x0A	; 10
     3a8:	65 e0       	ldi	r22, 0x05	; 5
     3aa:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x0F, 0x70);		// NO ADC used
     3ae:	8f e0       	ldi	r24, 0x0F	; 15
     3b0:	60 e7       	ldi	r22, 0x70	; 112
     3b2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x10, 0x00);		// no ADC used
     3b6:	80 e1       	ldi	r24, 0x10	; 16
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x12, 0x00);		// No temp sensor used
     3be:	82 e1       	ldi	r24, 0x12	; 18
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x13, 0x00);		// no temp sensor used
     3c6:	83 e1       	ldi	r24, 0x13	; 19
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x70, 0x20);		// No manchester code, no data whiting, data rate < 30Kbps
     3ce:	80 e7       	ldi	r24, 0x70	; 112
     3d0:	60 e2       	ldi	r22, 0x20	; 32
     3d2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x1C, 0x1D);		// IF filter bandwidth
     3d6:	8c e1       	ldi	r24, 0x1C	; 28
     3d8:	6d e1       	ldi	r22, 0x1D	; 29
     3da:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x1D, 0x40);		// AFC Loop
     3de:	8d e1       	ldi	r24, 0x1D	; 29
     3e0:	60 e4       	ldi	r22, 0x40	; 64
     3e2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	//radioWriteReg(0x1E, 0x0A);	// AFC timing

	radioWriteReg(0x20, 0xA1);		// clock recovery
     3e6:	80 e2       	ldi	r24, 0x20	; 32
     3e8:	61 ea       	ldi	r22, 0xA1	; 161
     3ea:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x21, 0x20);		// clock recovery
     3ee:	81 e2       	ldi	r24, 0x21	; 33
     3f0:	60 e2       	ldi	r22, 0x20	; 32
     3f2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x22, 0x4E);		// clock recovery
     3f6:	82 e2       	ldi	r24, 0x22	; 34
     3f8:	6e e4       	ldi	r22, 0x4E	; 78
     3fa:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x23, 0xA5);		// clock recovery
     3fe:	83 e2       	ldi	r24, 0x23	; 35
     400:	65 ea       	ldi	r22, 0xA5	; 165
     402:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x24, 0x00);		// clock recovery timing
     406:	84 e2       	ldi	r24, 0x24	; 36
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x25, 0x0A);		// clock recovery timing
     40e:	85 e2       	ldi	r24, 0x25	; 37
     410:	6a e0       	ldi	r22, 0x0A	; 10
     412:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	//radioWriteReg(0x2A, 0x18);
	radioWriteReg(0x2C, 0x00);
     416:	8c e2       	ldi	r24, 0x2C	; 44
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x2D, 0x00);
     41e:	8d e2       	ldi	r24, 0x2D	; 45
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x2E, 0x00);
     426:	8e e2       	ldi	r24, 0x2E	; 46
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x6E, 0x27);		// TX data rate 1
     42e:	8e e6       	ldi	r24, 0x6E	; 110
     430:	67 e2       	ldi	r22, 0x27	; 39
     432:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x6F, 0x52);		// TX data rate 0
     436:	8f e6       	ldi	r24, 0x6F	; 111
     438:	62 e5       	ldi	r22, 0x52	; 82
     43a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x30, 0x00);		// Data access control <steve> 0x8C
     43e:	80 e3       	ldi	r24, 0x30	; 48
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x32, 0xFF);		// Header control
     446:	82 e3       	ldi	r24, 0x32	; 50
     448:	6f ef       	ldi	r22, 0xFF	; 255
     44a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x33, 0x42);		// Header 3, 2, 1, 0 used for head length, fixed packet length, synchronize word length 3, 2,
     44e:	83 e3       	ldi	r24, 0x33	; 51
     450:	62 e4       	ldi	r22, 0x42	; 66
     452:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x34, 64);		// 64 nibble = 32 byte preamble
     456:	84 e3       	ldi	r24, 0x34	; 52
     458:	60 e4       	ldi	r22, 0x40	; 64
     45a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x35, 0x20);		// 0x35 need to detect 20bit preamble
     45e:	85 e3       	ldi	r24, 0x35	; 53
     460:	60 e2       	ldi	r22, 0x20	; 32
     462:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x36, 0x2D);		// synchronize word
     466:	86 e3       	ldi	r24, 0x36	; 54
     468:	6d e2       	ldi	r22, 0x2D	; 45
     46a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x37, 0xD4);
     46e:	87 e3       	ldi	r24, 0x37	; 55
     470:	64 ed       	ldi	r22, 0xD4	; 212
     472:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x38, 0x00);
     476:	88 e3       	ldi	r24, 0x38	; 56
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x39, 0x00);
     47e:	89 e3       	ldi	r24, 0x39	; 57
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x3A, '*');		// set tx header 3
     486:	8a e3       	ldi	r24, 0x3A	; 58
     488:	6a e2       	ldi	r22, 0x2A	; 42
     48a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x3B, 'E');		// set tx header 2
     48e:	8b e3       	ldi	r24, 0x3B	; 59
     490:	65 e4       	ldi	r22, 0x45	; 69
     492:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x3C, 'W');		// set tx header 1
     496:	8c e3       	ldi	r24, 0x3C	; 60
     498:	67 e5       	ldi	r22, 0x57	; 87
     49a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x3D, 'S');		// set tx header 0
     49e:	8d e3       	ldi	r24, 0x3D	; 61
     4a0:	63 e5       	ldi	r22, 0x53	; 83
     4a2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	//radioWriteReg(0x3E, 17);		// set packet length to 17 bytes (max size: 255 bytes)
	radioWriteReg(0x3E, 50);	// set packet length to PKTSIZE bytes (max size: 255 bytes)
     4a6:	8e e3       	ldi	r24, 0x3E	; 62
     4a8:	62 e3       	ldi	r22, 0x32	; 50
     4aa:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x3F, '*');		// set rx header
     4ae:	8f e3       	ldi	r24, 0x3F	; 63
     4b0:	6a e2       	ldi	r22, 0x2A	; 42
     4b2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x40, 'E');
     4b6:	80 e4       	ldi	r24, 0x40	; 64
     4b8:	65 e4       	ldi	r22, 0x45	; 69
     4ba:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x41, 'W');
     4be:	81 e4       	ldi	r24, 0x41	; 65
     4c0:	67 e5       	ldi	r22, 0x57	; 87
     4c2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x42, 'S');
     4c6:	82 e4       	ldi	r24, 0x42	; 66
     4c8:	63 e5       	ldi	r22, 0x53	; 83
     4ca:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x43, 0xFF);		// check all bits
     4ce:	83 e4       	ldi	r24, 0x43	; 67
     4d0:	6f ef       	ldi	r22, 0xFF	; 255
     4d2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x44, 0xFF);		// Check all bits
     4d6:	84 e4       	ldi	r24, 0x44	; 68
     4d8:	6f ef       	ldi	r22, 0xFF	; 255
     4da:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x45, 0xFF);		// check all bits
     4de:	85 e4       	ldi	r24, 0x45	; 69
     4e0:	6f ef       	ldi	r22, 0xFF	; 255
     4e2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x46, 0xFF);		// Check all bits
     4e6:	86 e4       	ldi	r24, 0x46	; 70
     4e8:	6f ef       	ldi	r22, 0xFF	; 255
     4ea:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x56, 0x02);		// <steve> Something to do with I/Q Swapping
     4ee:	86 e5       	ldi	r24, 0x56	; 86
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x6D, 0x00);		// Tx power to max
     4f6:	8d e6       	ldi	r24, 0x6D	; 109
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x79, 0x00);		// no frequency hopping
     4fe:	89 e7       	ldi	r24, 0x79	; 121
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x7A, 0x00);		// no frequency hopping
     506:	8a e7       	ldi	r24, 0x7A	; 122
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x71, 0x12);		// GFSK, fd[8]=0, no invert for TX/RX data, FIFO mode, txclk-->gpio
     50e:	81 e7       	ldi	r24, 0x71	; 113
     510:	62 e1       	ldi	r22, 0x12	; 18
     512:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x72, 0x48);		// Frequency deviation setting to 45K=72*625
     516:	82 e7       	ldi	r24, 0x72	; 114
     518:	68 e4       	ldi	r22, 0x48	; 72
     51a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x73, 0x00);		// No frequency offset
     51e:	83 e7       	ldi	r24, 0x73	; 115
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x74, 0x00);		// No frequency offset
     526:	84 e7       	ldi	r24, 0x74	; 116
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x75, 0x53);		// frequency set to 434MHz
     52e:	85 e7       	ldi	r24, 0x75	; 117
     530:	63 e5       	ldi	r22, 0x53	; 83
     532:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x76, 0x64);		// frequency set to 434MHz
     536:	86 e7       	ldi	r24, 0x76	; 118
     538:	64 e6       	ldi	r22, 0x64	; 100
     53a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x77, 0x00);		// frequency set to 434Mhz
     53e:	87 e7       	ldi	r24, 0x77	; 119
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x5A, 0x7F);
     546:	8a e5       	ldi	r24, 0x5A	; 90
     548:	6f e7       	ldi	r22, 0x7F	; 127
     54a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x59, 0x40);
     54e:	89 e5       	ldi	r24, 0x59	; 89
     550:	60 e4       	ldi	r22, 0x40	; 64
     552:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x58, 0x80);
     556:	88 e5       	ldi	r24, 0x58	; 88
     558:	60 e8       	ldi	r22, 0x80	; 128
     55a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>

	radioWriteReg(0x6A, 0x0B);
     55e:	8a e6       	ldi	r24, 0x6A	; 106
     560:	6b e0       	ldi	r22, 0x0B	; 11
     562:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x68, 0x04);
     566:	88 e6       	ldi	r24, 0x68	; 104
     568:	64 e0       	ldi	r22, 0x04	; 4
     56a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	radioWriteReg(0x1F, 0x03);
     56e:	8f e1       	ldi	r24, 0x1F	; 31
     570:	63 e0       	ldi	r22, 0x03	; 3
     572:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
	
	
	#if defined(RFM22B)

	#endif
}
     576:	08 95       	ret

00000578 <putUARTchar>:
		"1 to 3\tToggle Config Flags\n"
		"`\tWrite Toggles to EEPROM and Review\n"
		"?\tConsole Useage\n\n");
}

static int putUARTchar(char c, FILE *stream){
     578:	1f 93       	push	r17
     57a:	18 2f       	mov	r17, r24
    if (c == '\n') putUARTchar('\r', stream);
     57c:	8a 30       	cpi	r24, 0x0A	; 10
     57e:	19 f4       	brne	.+6      	; 0x586 <putUARTchar+0xe>
     580:	8d e0       	ldi	r24, 0x0D	; 13
     582:	0e 94 bc 02 	call	0x578	; 0x578 <putUARTchar>
    loop_until_bit_is_set(UCSR0A, UDRE0);
     586:	80 91 c0 00 	lds	r24, 0x00C0
     58a:	85 ff       	sbrs	r24, 5
     58c:	fc cf       	rjmp	.-8      	; 0x586 <putUARTchar+0xe>
    UDR0 = c;
     58e:	10 93 c6 00 	sts	0x00C6, r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     592:	80 ed       	ldi	r24, 0xD0	; 208
     594:	97 e0       	ldi	r25, 0x07	; 7
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <putUARTchar+0x1e>
	_delay_us(500);
	//transferSPI(c);
    return 0;
}
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	1f 91       	pop	r17
     5a0:	08 95       	ret

000005a2 <getUARTchar>:

uint8_t getUARTchar(void){
    while( !(UCSR0A & (1<<RXC0)));
     5a2:	80 91 c0 00 	lds	r24, 0x00C0
     5a6:	87 ff       	sbrs	r24, 7
     5a8:	fc cf       	rjmp	.-8      	; 0x5a2 <getUARTchar>
    return(UDR0);
     5aa:	80 91 c6 00 	lds	r24, 0x00C6
}
     5ae:	08 95       	ret

000005b0 <readADC>:

uint16_t readADC(uint8_t adcChannel){
	ADMUX 	= adcChannel; //(1<<REFS0) |
     5b0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	|= (1<<ADSC);
     5b4:	80 91 7a 00 	lds	r24, 0x007A
     5b8:	80 64       	ori	r24, 0x40	; 64
     5ba:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC));
     5be:	80 91 7a 00 	lds	r24, 0x007A
     5c2:	86 fd       	sbrc	r24, 6
     5c4:	fc cf       	rjmp	.-8      	; 0x5be <readADC+0xe>
	return (ADCL + ((uint16_t) ADCH << 8));
     5c6:	90 91 78 00 	lds	r25, 0x0078
     5ca:	80 91 79 00 	lds	r24, 0x0079
     5ce:	38 2f       	mov	r19, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	29 0f       	add	r18, r25
     5d4:	31 1d       	adc	r19, r1
}
     5d6:	c9 01       	movw	r24, r18
     5d8:	08 95       	ret

000005da <readAdcNoiseReduced>:

uint16_t readAdcNoiseReduced(uint8_t adcChannel){
	ADMUX 	= adcChannel; //(1<<REFS0) |
     5da:	80 93 7c 00 	sts	0x007C, r24
	
	set_sleep_mode(SLEEP_MODE_ADC);
     5de:	83 b7       	in	r24, 0x33	; 51
     5e0:	81 7f       	andi	r24, 0xF1	; 241
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     5e6:	83 b7       	in	r24, 0x33	; 51
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     5ec:	85 b7       	in	r24, 0x35	; 53
     5ee:	80 66       	ori	r24, 0x60	; 96
     5f0:	85 bf       	out	0x35, r24	; 53
     5f2:	8f 7d       	andi	r24, 0xDF	; 223
     5f4:	85 bf       	out	0x35, r24	; 53
	sei();
     5f6:	78 94       	sei
	sleep_cpu();
     5f8:	88 95       	sleep
	
	sleep_disable();
     5fa:	83 b7       	in	r24, 0x33	; 51
     5fc:	8e 7f       	andi	r24, 0xFE	; 254
     5fe:	83 bf       	out	0x33, r24	; 51
	return (ADCL + ((uint16_t) ADCH << 8));
     600:	90 91 78 00 	lds	r25, 0x0078
     604:	80 91 79 00 	lds	r24, 0x0079
     608:	38 2f       	mov	r19, r24
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	29 0f       	add	r18, r25
     60e:	31 1d       	adc	r19, r1
}
     610:	c9 01       	movw	r24, r18
     612:	08 95       	ret

00000614 <updateVolts>:
		transferSPI((RFM_WRITE<<7) | regAddress);
		transferSPI(regValue);
	CS_RFM = HIGH;
}

void updateVolts(void){
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	aa 24       	eor	r10, r10
     62a:	bb 24       	eor	r11, r11
     62c:	cc 24       	eor	r12, r12
     62e:	dd 24       	eor	r13, r13
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	d0 e0       	ldi	r29, 0x00	; 0
     634:	00 e0       	ldi	r16, 0x00	; 0
	uint16_t sysVin = 0;
	uint16_t atMegaVolt = 0;
	
	
	for(uint8_t j=0; j<4; j++){
		lipoly += readADC(ADC_VBAT);
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <readADC>
     63c:	a8 0e       	add	r10, r24
     63e:	b9 1e       	adc	r11, r25
		sysVin += readADC(ADC_VIN);
     640:	87 e0       	ldi	r24, 0x07	; 7
     642:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <readADC>
     646:	c8 0e       	add	r12, r24
     648:	d9 1e       	adc	r13, r25
     64a:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0; i<4; i++) readADC(ADC_VSYS);
     64c:	8e e0       	ldi	r24, 0x0E	; 14
     64e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <readADC>
     652:	1f 5f       	subi	r17, 0xFF	; 255
     654:	14 30       	cpi	r17, 0x04	; 4
     656:	d1 f7       	brne	.-12     	; 0x64c <updateVolts+0x38>
		atMegaVolt += readAdcNoiseReduced(ADC_VSYS); // [4092:0]
     658:	8e e0       	ldi	r24, 0x0E	; 14
     65a:	0e 94 ed 02 	call	0x5da	; 0x5da <readAdcNoiseReduced>
     65e:	c8 0f       	add	r28, r24
     660:	d9 1f       	adc	r29, r25
	uint16_t lipoly = 0; // An array or struct would be more condusive?
	uint16_t sysVin = 0;
	uint16_t atMegaVolt = 0;
	
	
	for(uint8_t j=0; j<4; j++){
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	04 30       	cpi	r16, 0x04	; 4
     666:	39 f7       	brne	.-50     	; 0x636 <updateVolts+0x22>
		for(uint8_t i=0; i<4; i++) readADC(ADC_VSYS);
		atMegaVolt += readAdcNoiseReduced(ADC_VSYS); // [4092:0]
	}
	lipoly >>= 2; // [1023:0]
	sysVin >>= 2;
	atMegaVolt >>= 2;
     668:	9e 01       	movw	r18, r28
     66a:	36 95       	lsr	r19
     66c:	27 95       	ror	r18
     66e:	36 95       	lsr	r19
     670:	27 95       	ror	r18
	// Repeated for sysVin
	// Is this next version more lossy? :
	// BATTv = battADC[1023:0] * ATMEGAv[4999:0] * 2 /1023 (appprox as >> 9) , Max is 5.1 Mil, divide is an easy right shift to within .1% actual
	// Both version require 32-bit ints, so might as well do the one with only one divide and 3 multiplies. First was 3 mult + 3 div
	
	atMegaVolt = (atMegaVolt < 225)? 4999 : (uint16_t)( (1125300)/((uint32_t) atMegaVolt) );
     672:	21 3e       	cpi	r18, 0xE1	; 225
     674:	31 05       	cpc	r19, r1
     676:	18 f4       	brcc	.+6      	; 0x67e <updateVolts+0x6a>
     678:	c7 e8       	ldi	r28, 0x87	; 135
     67a:	d3 e1       	ldi	r29, 0x13	; 19
     67c:	09 c0       	rjmp	.+18     	; 0x690 <updateVolts+0x7c>
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	64 eb       	ldi	r22, 0xB4	; 180
     684:	7b e2       	ldi	r23, 0x2B	; 43
     686:	81 e1       	ldi	r24, 0x11	; 17
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 2d 09 	call	0x125a	; 0x125a <__udivmodsi4>
     68e:	e9 01       	movw	r28, r18
	sysVin = (uint16_t)( (uint32_t)( (uint32_t)sysVin * (uint32_t)atMegaVolt ) >> 9 );
     690:	7e 01       	movw	r14, r28
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	d6 94       	lsr	r13
     698:	c7 94       	ror	r12
     69a:	d6 94       	lsr	r13
     69c:	c7 94       	ror	r12
     69e:	96 01       	movw	r18, r12
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	c8 01       	movw	r24, r16
     6a6:	b7 01       	movw	r22, r14
     6a8:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsi3>
     6ac:	49 e0       	ldi	r20, 0x09	; 9
     6ae:	96 95       	lsr	r25
     6b0:	87 95       	ror	r24
     6b2:	77 95       	ror	r23
     6b4:	67 95       	ror	r22
     6b6:	4a 95       	dec	r20
     6b8:	d1 f7       	brne	.-12     	; 0x6ae <updateVolts+0x9a>
     6ba:	6b 01       	movw	r12, r22
	lipoly = (uint16_t)( (uint32_t)( (uint32_t)lipoly * (uint32_t)atMegaVolt ) >> 9 );
     6bc:	b6 94       	lsr	r11
     6be:	a7 94       	ror	r10
     6c0:	b6 94       	lsr	r11
     6c2:	a7 94       	ror	r10
     6c4:	95 01       	movw	r18, r10
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	c8 01       	movw	r24, r16
     6cc:	b7 01       	movw	r22, r14
     6ce:	0e 94 0e 09 	call	0x121c	; 0x121c <__mulsi3>
     6d2:	29 e0       	ldi	r18, 0x09	; 9
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	77 95       	ror	r23
     6da:	67 95       	ror	r22
     6dc:	2a 95       	dec	r18
     6de:	d1 f7       	brne	.-12     	; 0x6d4 <updateVolts+0xc0>
	
	stateFlags.powerState = (sysVin > 3800)? 1 : 0;
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	89 ed       	ldi	r24, 0xD9	; 217
     6e4:	c8 16       	cp	r12, r24
     6e6:	8e e0       	ldi	r24, 0x0E	; 14
     6e8:	d8 06       	cpc	r13, r24
     6ea:	08 f0       	brcs	.+2      	; 0x6ee <updateVolts+0xda>
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	22 95       	swap	r18
     6f0:	22 0f       	add	r18, r18
     6f2:	20 7e       	andi	r18, 0xE0	; 224
     6f4:	80 91 57 02 	lds	r24, 0x0257
     6f8:	8f 7d       	andi	r24, 0xDF	; 223
     6fa:	82 2b       	or	r24, r18
     6fc:	80 93 57 02 	sts	0x0257, r24
	stateFlags.batteryState = (lipoly > 3400)? 1 : 0;
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	8d e0       	ldi	r24, 0x0D	; 13
     704:	69 34       	cpi	r22, 0x49	; 73
     706:	78 07       	cpc	r23, r24
     708:	08 f0       	brcs	.+2      	; 0x70c <updateVolts+0xf8>
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	22 95       	swap	r18
     70e:	22 0f       	add	r18, r18
     710:	22 0f       	add	r18, r18
     712:	20 7c       	andi	r18, 0xC0	; 192
     714:	80 91 57 02 	lds	r24, 0x0257
     718:	8f 7b       	andi	r24, 0xBF	; 191
     71a:	82 2b       	or	r24, r18
     71c:	80 93 57 02 	sts	0x0257, r24
	
	// printf("Lipoly: %u\tVoltIn: %u\tATmega: %u\n",lipoly,sysVin,atMegaVolt);
	
	volt.lipoly = lipoly;
     720:	70 93 59 02 	sts	0x0259, r23
     724:	60 93 58 02 	sts	0x0258, r22
	volt.sysVin = sysVin;
     728:	d0 92 5b 02 	sts	0x025B, r13
     72c:	c0 92 5a 02 	sts	0x025A, r12
	volt.atMega = atMegaVolt;
     730:	d0 93 5d 02 	sts	0x025D, r29
     734:	c0 93 5c 02 	sts	0x025C, r28
	
	//return ((uint16_t) voltSample);
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	08 95       	ret

0000074e <flashOrangeLED>:
	
	sleep_disable();
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	4f 92       	push	r4
     754:	5f 92       	push	r5
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	0f 92       	push	r0
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	89 83       	std	Y+1, r24	; 0x01
	for(;count>0; count--){
		LED_OR = HIGH;
		_delay_ms(high);
     77a:	26 2e       	mov	r2, r22
     77c:	33 24       	eor	r3, r3
     77e:	44 24       	eor	r4, r4
     780:	55 24       	eor	r5, r5
		LED_OR = LOW;
		_delay_ms(low);
     782:	64 2e       	mov	r6, r20
     784:	77 24       	eor	r7, r7
     786:	88 24       	eor	r8, r8
     788:	99 24       	eor	r9, r9
     78a:	83 c0       	rjmp	.+262    	; 0x892 <flashOrangeLED+0x144>
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
		LED_OR = HIGH;
     78c:	28 9a       	sbi	0x05, 0	; 5
		_delay_ms(high);
     78e:	c2 01       	movw	r24, r4
     790:	b1 01       	movw	r22, r2
     792:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatunsisf>
     796:	5b 01       	movw	r10, r22
     798:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	4a e7       	ldi	r20, 0x7A	; 122
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     7a6:	7b 01       	movw	r14, r22
     7a8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e8       	ldi	r20, 0x80	; 128
     7b0:	5f e3       	ldi	r21, 0x3F	; 63
     7b2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__cmpsf2>
     7b6:	88 23       	and	r24, r24
     7b8:	1c f4       	brge	.+6      	; 0x7c0 <flashOrangeLED+0x72>
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	23 c0       	rjmp	.+70     	; 0x806 <flashOrangeLED+0xb8>
		__ticks = 1;
	else if (__tmp > 65535)
     7c0:	c8 01       	movw	r24, r16
     7c2:	b7 01       	movw	r22, r14
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	3f ef       	ldi	r19, 0xFF	; 255
     7c8:	4f e7       	ldi	r20, 0x7F	; 127
     7ca:	57 e4       	ldi	r21, 0x47	; 71
     7cc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     7d0:	18 16       	cp	r1, r24
     7d2:	ac f4       	brge	.+42     	; 0x7fe <flashOrangeLED+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d4:	c6 01       	movw	r24, r12
     7d6:	b5 01       	movw	r22, r10
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e2       	ldi	r20, 0x20	; 32
     7de:	51 e4       	ldi	r21, 0x41	; 65
     7e0:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     7e4:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <flashOrangeLED+0xa8>
     7ea:	80 e9       	ldi	r24, 0x90	; 144
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <flashOrangeLED+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f2:	61 50       	subi	r22, 0x01	; 1
     7f4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f6:	61 15       	cp	r22, r1
     7f8:	71 05       	cpc	r23, r1
     7fa:	b9 f7       	brne	.-18     	; 0x7ea <flashOrangeLED+0x9c>
     7fc:	07 c0       	rjmp	.+14     	; 0x80c <flashOrangeLED+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fe:	c8 01       	movw	r24, r16
     800:	b7 01       	movw	r22, r14
     802:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     806:	cb 01       	movw	r24, r22
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <flashOrangeLED+0xba>
		LED_OR = LOW;
     80c:	28 98       	cbi	0x05, 0	; 5
		_delay_ms(low);
     80e:	c4 01       	movw	r24, r8
     810:	b3 01       	movw	r22, r6
     812:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatunsisf>
     816:	5b 01       	movw	r10, r22
     818:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	4a e7       	ldi	r20, 0x7A	; 122
     820:	55 e4       	ldi	r21, 0x45	; 69
     822:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     826:	7b 01       	movw	r14, r22
     828:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e8       	ldi	r20, 0x80	; 128
     830:	5f e3       	ldi	r21, 0x3F	; 63
     832:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__cmpsf2>
     836:	88 23       	and	r24, r24
     838:	1c f4       	brge	.+6      	; 0x840 <flashOrangeLED+0xf2>
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	23 c0       	rjmp	.+70     	; 0x886 <flashOrangeLED+0x138>
		__ticks = 1;
	else if (__tmp > 65535)
     840:	c8 01       	movw	r24, r16
     842:	b7 01       	movw	r22, r14
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	3f ef       	ldi	r19, 0xFF	; 255
     848:	4f e7       	ldi	r20, 0x7F	; 127
     84a:	57 e4       	ldi	r21, 0x47	; 71
     84c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	ac f4       	brge	.+42     	; 0x87e <flashOrangeLED+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     854:	c6 01       	movw	r24, r12
     856:	b5 01       	movw	r22, r10
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e2       	ldi	r20, 0x20	; 32
     85e:	51 e4       	ldi	r21, 0x41	; 65
     860:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     864:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     868:	06 c0       	rjmp	.+12     	; 0x876 <flashOrangeLED+0x128>
     86a:	80 e9       	ldi	r24, 0x90	; 144
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <flashOrangeLED+0x120>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     872:	61 50       	subi	r22, 0x01	; 1
     874:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     876:	61 15       	cp	r22, r1
     878:	71 05       	cpc	r23, r1
     87a:	b9 f7       	brne	.-18     	; 0x86a <flashOrangeLED+0x11c>
     87c:	07 c0       	rjmp	.+14     	; 0x88c <flashOrangeLED+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     87e:	c8 01       	movw	r24, r16
     880:	b7 01       	movw	r22, r14
     882:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     886:	cb 01       	movw	r24, r22
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <flashOrangeLED+0x13a>
	sleep_disable();
	return (ADCL + ((uint16_t) ADCH << 8));
}

void flashOrangeLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	81 50       	subi	r24, 0x01	; 1
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	e9 81       	ldd	r30, Y+1	; 0x01
     894:	ee 23       	and	r30, r30
     896:	09 f0       	breq	.+2      	; 0x89a <flashOrangeLED+0x14c>
     898:	79 cf       	rjmp	.-270    	; 0x78c <flashOrangeLED+0x3e>
		LED_OR = HIGH;
		_delay_ms(high);
		LED_OR = LOW;
		_delay_ms(low);
	}
}
     89a:	0f 90       	pop	r0
     89c:	cf 91       	pop	r28
     89e:	df 91       	pop	r29
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	3f 90       	pop	r3
     8be:	2f 90       	pop	r2
     8c0:	08 95       	ret

000008c2 <flashBlueLED>:

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
     8c2:	2f 92       	push	r2
     8c4:	3f 92       	push	r3
     8c6:	4f 92       	push	r4
     8c8:	5f 92       	push	r5
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	0f 92       	push	r0
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	89 83       	std	Y+1, r24	; 0x01
	for(;count>0; count--){
		LED_BL = HIGH;
		_delay_ms(high);
     8ee:	26 2e       	mov	r2, r22
     8f0:	33 24       	eor	r3, r3
     8f2:	44 24       	eor	r4, r4
     8f4:	55 24       	eor	r5, r5
		LED_BL = LOW;
		_delay_ms(low);
     8f6:	64 2e       	mov	r6, r20
     8f8:	77 24       	eor	r7, r7
     8fa:	88 24       	eor	r8, r8
     8fc:	99 24       	eor	r9, r9
     8fe:	83 c0       	rjmp	.+262    	; 0xa06 <__stack+0x107>
	}
}

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
		LED_BL = HIGH;
     900:	29 9a       	sbi	0x05, 1	; 5
		_delay_ms(high);
     902:	c2 01       	movw	r24, r4
     904:	b1 01       	movw	r22, r2
     906:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatunsisf>
     90a:	5b 01       	movw	r10, r22
     90c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	4a e7       	ldi	r20, 0x7A	; 122
     914:	55 e4       	ldi	r21, 0x45	; 69
     916:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__cmpsf2>
     92a:	88 23       	and	r24, r24
     92c:	1c f4       	brge	.+6      	; 0x934 <__stack+0x35>
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	23 c0       	rjmp	.+70     	; 0x97a <__stack+0x7b>
		__ticks = 1;
	else if (__tmp > 65535)
     934:	c8 01       	movw	r24, r16
     936:	b7 01       	movw	r22, r14
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	4f e7       	ldi	r20, 0x7F	; 127
     93e:	57 e4       	ldi	r21, 0x47	; 71
     940:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     944:	18 16       	cp	r1, r24
     946:	ac f4       	brge	.+42     	; 0x972 <__stack+0x73>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     948:	c6 01       	movw	r24, r12
     94a:	b5 01       	movw	r22, r10
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e2       	ldi	r20, 0x20	; 32
     952:	51 e4       	ldi	r21, 0x41	; 65
     954:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     958:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x6b>
     95e:	80 e9       	ldi	r24, 0x90	; 144
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <__stack+0x63>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     966:	61 50       	subi	r22, 0x01	; 1
     968:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     96a:	61 15       	cp	r22, r1
     96c:	71 05       	cpc	r23, r1
     96e:	b9 f7       	brne	.-18     	; 0x95e <__stack+0x5f>
     970:	07 c0       	rjmp	.+14     	; 0x980 <__stack+0x81>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     972:	c8 01       	movw	r24, r16
     974:	b7 01       	movw	r22, r14
     976:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     97a:	cb 01       	movw	r24, r22
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <__stack+0x7d>
		LED_BL = LOW;
     980:	29 98       	cbi	0x05, 1	; 5
		_delay_ms(low);
     982:	c4 01       	movw	r24, r8
     984:	b3 01       	movw	r22, r6
     986:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatunsisf>
     98a:	5b 01       	movw	r10, r22
     98c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	4a e7       	ldi	r20, 0x7A	; 122
     994:	55 e4       	ldi	r21, 0x45	; 69
     996:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     99a:	7b 01       	movw	r14, r22
     99c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e8       	ldi	r20, 0x80	; 128
     9a4:	5f e3       	ldi	r21, 0x3F	; 63
     9a6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__cmpsf2>
     9aa:	88 23       	and	r24, r24
     9ac:	1c f4       	brge	.+6      	; 0x9b4 <__stack+0xb5>
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__stack+0xfb>
		__ticks = 1;
	else if (__tmp > 65535)
     9b4:	c8 01       	movw	r24, r16
     9b6:	b7 01       	movw	r22, r14
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	3f ef       	ldi	r19, 0xFF	; 255
     9bc:	4f e7       	ldi	r20, 0x7F	; 127
     9be:	57 e4       	ldi	r21, 0x47	; 71
     9c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__gesf2>
     9c4:	18 16       	cp	r1, r24
     9c6:	ac f4       	brge	.+42     	; 0x9f2 <__stack+0xf3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c8:	c6 01       	movw	r24, r12
     9ca:	b5 01       	movw	r22, r10
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e2       	ldi	r20, 0x20	; 32
     9d2:	51 e4       	ldi	r21, 0x41	; 65
     9d4:	0e 94 83 08 	call	0x1106	; 0x1106 <__mulsf3>
     9d8:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
     9de:	80 e9       	ldi	r24, 0x90	; 144
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <__stack+0xe3>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e6:	61 50       	subi	r22, 0x01	; 1
     9e8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ea:	61 15       	cp	r22, r1
     9ec:	71 05       	cpc	r23, r1
     9ee:	b9 f7       	brne	.-18     	; 0x9de <__stack+0xdf>
     9f0:	07 c0       	rjmp	.+14     	; 0xa00 <__stack+0x101>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9f2:	c8 01       	movw	r24, r16
     9f4:	b7 01       	movw	r22, r14
     9f6:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     9fa:	cb 01       	movw	r24, r22
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <__stack+0xfd>
		_delay_ms(low);
	}
}

void flashBlueLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	e9 81       	ldd	r30, Y+1	; 0x01
     a08:	ee 23       	and	r30, r30
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	79 cf       	rjmp	.-270    	; 0x900 <__stack+0x1>
		LED_BL = HIGH;
		_delay_ms(high);
		LED_BL = LOW;
		_delay_ms(low);
	}
}
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	9f 90       	pop	r9
     a26:	8f 90       	pop	r8
     a28:	7f 90       	pop	r7
     a2a:	6f 90       	pop	r6
     a2c:	5f 90       	pop	r5
     a2e:	4f 90       	pop	r4
     a30:	3f 90       	pop	r3
     a32:	2f 90       	pop	r2
     a34:	08 95       	ret

00000a36 <printHelpInfo>:
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <puts>
		"B\tBattery mV\n"
		"M\tMonitor\n"
		"1 to 3\tToggle Config Flags\n"
		"`\tWrite Toggles to EEPROM and Review\n"
		"?\tConsole Useage\n\n");
}
     a3e:	08 95       	ret

00000a40 <deviceIdCheck>:
	volt.atMega = atMegaVolt;
	
	//return ((uint16_t) voltSample);
}

char deviceIdCheck(void){
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
	// printRegisters();
	CS_RFM = LOW;
     a44:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     a46:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     a48:	0d b4       	in	r0, 0x2d	; 45
     a4a:	07 fe       	sbrs	r0, 7
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <deviceIdCheck+0x8>
	return SPDR;
     a4e:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     a50:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     a52:	0d b4       	in	r0, 0x2d	; 45
     a54:	07 fe       	sbrs	r0, 7
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <deviceIdCheck+0x12>
	return SPDR;
     a58:	0e b5       	in	r16, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     a5a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     a5c:	0d b4       	in	r0, 0x2d	; 45
     a5e:	07 fe       	sbrs	r0, 7
     a60:	fd cf       	rjmp	.-6      	; 0xa5c <deviceIdCheck+0x1c>
	return SPDR;
     a62:	1e b5       	in	r17, 0x2e	; 46
		transferSPI(0x00);
		uint8_t rfmDevType = transferSPI(0x00);
		uint8_t rfmVerCode = transferSPI(0x00);
	CS_RFM = HIGH;
     a64:	2a 9a       	sbi	0x05, 2	; 5
	
	printf("\n%X\t%X\n",rfmDevType,rfmVerCode);
     a66:	00 d0       	rcall	.+0      	; 0xa68 <deviceIdCheck+0x28>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <deviceIdCheck+0x2a>
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <deviceIdCheck+0x2c>
     a6c:	ed b7       	in	r30, 0x3d	; 61
     a6e:	fe b7       	in	r31, 0x3e	; 62
     a70:	31 96       	adiw	r30, 0x01	; 1
     a72:	8a e7       	ldi	r24, 0x7A	; 122
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	ad b7       	in	r26, 0x3d	; 61
     a78:	be b7       	in	r27, 0x3e	; 62
     a7a:	12 96       	adiw	r26, 0x02	; 2
     a7c:	9c 93       	st	X, r25
     a7e:	8e 93       	st	-X, r24
     a80:	11 97       	sbiw	r26, 0x01	; 1
     a82:	02 83       	std	Z+2, r16	; 0x02
     a84:	13 82       	std	Z+3, r1	; 0x03
     a86:	14 83       	std	Z+4, r17	; 0x04
     a88:	15 82       	std	Z+5, r1	; 0x05
     a8a:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
	
	
	rfmDevType ^= 0b00001000;
	rfmVerCode ^= 0b00000110;
	
	if(rfmDevType==0 && rfmVerCode==0) return (1);
     a8e:	8d b7       	in	r24, 0x3d	; 61
     a90:	9e b7       	in	r25, 0x3e	; 62
     a92:	06 96       	adiw	r24, 0x06	; 6
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	9e bf       	out	0x3e, r25	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	8d bf       	out	0x3d, r24	; 61
     a9e:	08 30       	cpi	r16, 0x08	; 8
     aa0:	11 f0       	breq	.+4      	; 0xaa6 <deviceIdCheck+0x66>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <deviceIdCheck+0x6e>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	16 30       	cpi	r17, 0x06	; 6
     aaa:	09 f4       	brne	.+2      	; 0xaae <deviceIdCheck+0x6e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	08 95       	ret

00000ab4 <loop>:
	
	// Console Usage Hints
	printHelpInfo();
}

void loop(void){
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
	if(stateFlags.intSource == INT_SRC_WDT){
     ab8:	80 91 57 02 	lds	r24, 0x0257
     abc:	8c 70       	andi	r24, 0x0C	; 12
     abe:	88 30       	cpi	r24, 0x08	; 8
     ac0:	09 f0       	breq	.+2      	; 0xac4 <loop+0x10>
     ac2:	d2 c0       	rjmp	.+420    	; 0xc68 <loop+0x1b4>
		stateFlags.intSource = INT_SRC_CLEAR;
     ac4:	80 91 57 02 	lds	r24, 0x0257
     ac8:	83 7f       	andi	r24, 0xF3	; 243
     aca:	80 93 57 02 	sts	0x0257, r24
		
		updateVolts();
     ace:	0e 94 0a 03 	call	0x614	; 0x614 <updateVolts>
		
		stateFlags.monitorMode = 1;
     ad2:	80 91 57 02 	lds	r24, 0x0257
     ad6:	80 61       	ori	r24, 0x10	; 16
     ad8:	80 93 57 02 	sts	0x0257, r24
		if(stateFlags.monitorMode==1 && stateFlags.batteryState==1){
     adc:	80 91 57 02 	lds	r24, 0x0257
     ae0:	84 ff       	sbrs	r24, 4
     ae2:	b4 c0       	rjmp	.+360    	; 0xc4c <loop+0x198>
     ae4:	80 91 57 02 	lds	r24, 0x0257
     ae8:	86 ff       	sbrs	r24, 6
     aea:	b0 c0       	rjmp	.+352    	; 0xc4c <loop+0x198>
			flashOrangeLED(2,5,5);
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	65 e0       	ldi	r22, 0x05	; 5
     af0:	45 e0       	ldi	r20, 0x05	; 5
     af2:	0e 94 a7 03 	call	0x74e	; 0x74e <flashOrangeLED>
			printf("Lipoly: %u\tVoltIn: %u\tATmega: %u\n",volt.lipoly,volt.sysVin,volt.atMega);
     af6:	8d b7       	in	r24, 0x3d	; 61
     af8:	9e b7       	in	r25, 0x3e	; 62
     afa:	08 97       	sbiw	r24, 0x08	; 8
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	9e bf       	out	0x3e, r25	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	8d bf       	out	0x3d, r24	; 61
     b06:	ed b7       	in	r30, 0x3d	; 61
     b08:	fe b7       	in	r31, 0x3e	; 62
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	82 e8       	ldi	r24, 0x82	; 130
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	ad b7       	in	r26, 0x3d	; 61
     b12:	be b7       	in	r27, 0x3e	; 62
     b14:	12 96       	adiw	r26, 0x02	; 2
     b16:	9c 93       	st	X, r25
     b18:	8e 93       	st	-X, r24
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	80 91 58 02 	lds	r24, 0x0258
     b20:	90 91 59 02 	lds	r25, 0x0259
     b24:	93 83       	std	Z+3, r25	; 0x03
     b26:	82 83       	std	Z+2, r24	; 0x02
     b28:	80 91 5a 02 	lds	r24, 0x025A
     b2c:	90 91 5b 02 	lds	r25, 0x025B
     b30:	95 83       	std	Z+5, r25	; 0x05
     b32:	84 83       	std	Z+4, r24	; 0x04
     b34:	80 91 5c 02 	lds	r24, 0x025C
     b38:	90 91 5d 02 	lds	r25, 0x025D
     b3c:	97 83       	std	Z+7, r25	; 0x07
     b3e:	86 83       	std	Z+6, r24	; 0x06
     b40:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
			
			uint8_t regValue = 0;
			
			regValue = (1<<RFM_xton); // (1<<RFM_rxon) | 
			CS_RFM = LOW;
     b44:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     b46:	87 e8       	ldi	r24, 0x87	; 135
     b48:	8e bd       	out	0x2e, r24	; 46
     b4a:	8d b7       	in	r24, 0x3d	; 61
     b4c:	9e b7       	in	r25, 0x3e	; 62
     b4e:	08 96       	adiw	r24, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	9e bf       	out	0x3e, r25	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	8d bf       	out	0x3d, r24	; 61
	while(!(SPSR & _BV(SPIF)));
     b5a:	0d b4       	in	r0, 0x2d	; 45
     b5c:	07 fe       	sbrs	r0, 7
     b5e:	fd cf       	rjmp	.-6      	; 0xb5a <loop+0xa6>
	return SPDR;
     b60:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     b66:	0d b4       	in	r0, 0x2d	; 45
     b68:	07 fe       	sbrs	r0, 7
     b6a:	fd cf       	rjmp	.-6      	; 0xb66 <loop+0xb2>
	return SPDR;
     b6c:	8e b5       	in	r24, 0x2e	; 46
				transferSPI((RFM_WRITE<<7) | OPCONTROL1_REG);
				transferSPI(regValue); // 0b00000100
			CS_RFM = HIGH;
     b6e:	2a 9a       	sbi	0x05, 2	; 5
     b70:	80 ea       	ldi	r24, 0xA0	; 160
     b72:	9f e0       	ldi	r25, 0x0F	; 15
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <loop+0xc0>
			// radioWriteReg(0x08, 0x03);	// FIFO reset
			// radioWriteReg(0x08, 0x00);	// Clear FIFO
			// radioWriteReg(0x34, 64);	// preamble = 64nibble
			// radioWriteReg(0x3E, 50);
			
			radioWriteReg(0x6D, 0x07);
     b78:	8d e6       	ldi	r24, 0x6D	; 109
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
			
			regValue = (1<<RFM_txon) | (1<<RFM_xton);
			CS_RFM = LOW;
     b80:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     b82:	87 e8       	ldi	r24, 0x87	; 135
     b84:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     b86:	0d b4       	in	r0, 0x2d	; 45
     b88:	07 fe       	sbrs	r0, 7
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <loop+0xd2>
	return SPDR;
     b8c:	8e b5       	in	r24, 0x2e	; 46


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     b8e:	89 e0       	ldi	r24, 0x09	; 9
     b90:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     b92:	0d b4       	in	r0, 0x2d	; 45
     b94:	07 fe       	sbrs	r0, 7
     b96:	fd cf       	rjmp	.-6      	; 0xb92 <loop+0xde>
	return SPDR;
     b98:	8e b5       	in	r24, 0x2e	; 46
				transferSPI((RFM_WRITE<<7) | OPCONTROL1_REG);
				transferSPI(regValue); // 0b00000100
			CS_RFM = HIGH;
     b9a:	2a 9a       	sbi	0x05, 2	; 5
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	9f e1       	ldi	r25, 0x1F	; 31
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <loop+0xec>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
			
			_delay_ms(2);
			for(uint16_t d=0; d<=470; d++){ // 600
				//uint8_t fillData = ((d&0x04)==0x04)? 0xFF : 0x00;
				transferSPI(d&0x01); // 0b00000100
     ba8:	48 ed       	ldi	r20, 0xD8	; 216
     baa:	5d e1       	ldi	r21, 0x1D	; 29
     bac:	82 2f       	mov	r24, r18
     bae:	81 70       	andi	r24, 0x01	; 1


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     bb0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     bb2:	0d b4       	in	r0, 0x2d	; 45
     bb4:	07 fe       	sbrs	r0, 7
     bb6:	fd cf       	rjmp	.-6      	; 0xbb2 <loop+0xfe>
	return SPDR;
     bb8:	8e b5       	in	r24, 0x2e	; 46
     bba:	ca 01       	movw	r24, r20
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <loop+0x108>
				transferSPI((RFM_WRITE<<7) | OPCONTROL1_REG);
				transferSPI(regValue); // 0b00000100
			CS_RFM = HIGH;
			
			_delay_ms(2);
			for(uint16_t d=0; d<=470; d++){ // 600
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	27 3d       	cpi	r18, 0xD7	; 215
     bc8:	39 07       	cpc	r19, r25
     bca:	81 f7       	brne	.-32     	; 0xbac <loop+0xf8>
     bcc:	00 e4       	ldi	r16, 0x40	; 64
     bce:	1f e1       	ldi	r17, 0x1F	; 31
     bd0:	c8 01       	movw	r24, r16
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <loop+0x11e>
				//uint8_t fillData = ((d&0x04)==0x04)? 0xFF : 0x00;
				transferSPI(d&0x01); // 0b00000100
				_delay_us(1910); // 1875
			}
			_delay_ms(2);
			radioWriteReg(0x6D, 0x04);
     bd6:	8d e6       	ldi	r24, 0x6D	; 109
     bd8:	64 e0       	ldi	r22, 0x04	; 4
     bda:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
     bde:	c8 01       	movw	r24, r16
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <loop+0x12c>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(2);
			for(uint16_t d=0; d<=360; d++){ // 800
				//uint8_t fillData = ((d&0x04)==0x04)? 0xFF : 0x00;
				transferSPI(d&0x01); // 0b00000100
     be8:	40 ec       	ldi	r20, 0xC0	; 192
     bea:	57 e1       	ldi	r21, 0x17	; 23
     bec:	82 2f       	mov	r24, r18
     bee:	81 70       	andi	r24, 0x01	; 1


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     bf0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     bf2:	0d b4       	in	r0, 0x2d	; 45
     bf4:	07 fe       	sbrs	r0, 7
     bf6:	fd cf       	rjmp	.-6      	; 0xbf2 <loop+0x13e>
	return SPDR;
     bf8:	8e b5       	in	r24, 0x2e	; 46
     bfa:	ca 01       	movw	r24, r20
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <loop+0x148>
				_delay_us(1910); // 1875
			}
			_delay_ms(2);
			radioWriteReg(0x6D, 0x04);
			_delay_ms(2);
			for(uint16_t d=0; d<=360; d++){ // 800
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	a1 e0       	ldi	r26, 0x01	; 1
     c06:	29 36       	cpi	r18, 0x69	; 105
     c08:	3a 07       	cpc	r19, r26
     c0a:	81 f7       	brne	.-32     	; 0xbec <loop+0x138>
     c0c:	00 e4       	ldi	r16, 0x40	; 64
     c0e:	1f e1       	ldi	r17, 0x1F	; 31
     c10:	c8 01       	movw	r24, r16
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <loop+0x15e>
				//uint8_t fillData = ((d&0x04)==0x04)? 0xFF : 0x00;
				transferSPI(d&0x01); // 0b00000100
				_delay_us(1520); // 1295
			}
			_delay_ms(2);
			radioWriteReg(0x6D, 0x00);
     c16:	8d e6       	ldi	r24, 0x6D	; 109
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
     c1e:	c8 01       	movw	r24, r16
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <loop+0x16c>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(2);
			for(uint16_t d=0; d<=620; d++){ // 1000
				//uint8_t fillData = ((d&0x04)==0x04)? 0xFF : 0x00;
				transferSPI(d&0x01); // 0b00000100
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	5a e0       	ldi	r21, 0x0A	; 10
     c2c:	82 2f       	mov	r24, r18
     c2e:	81 70       	andi	r24, 0x01	; 1


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     c30:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     c32:	0d b4       	in	r0, 0x2d	; 45
     c34:	07 fe       	sbrs	r0, 7
     c36:	fd cf       	rjmp	.-6      	; 0xc32 <loop+0x17e>
	return SPDR;
     c38:	8e b5       	in	r24, 0x2e	; 46
     c3a:	ca 01       	movw	r24, r20
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <loop+0x188>
				_delay_us(1520); // 1295
			}
			_delay_ms(2);
			radioWriteReg(0x6D, 0x00);
			_delay_ms(2);
			for(uint16_t d=0; d<=620; d++){ // 1000
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	b2 e0       	ldi	r27, 0x02	; 2
     c46:	2d 36       	cpi	r18, 0x6D	; 109
     c48:	3b 07       	cpc	r19, r27
     c4a:	81 f7       	brne	.-32     	; 0xc2c <loop+0x178>
				_delay_us(640);
			}
			
			radioWriteReg(OPCONTROL1_REG, 0x00);
		} else {
			radioWriteReg(OPCONTROL1_REG, 0x00);
     c4c:	87 e0       	ldi	r24, 0x07	; 7
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	0e 94 ad 01 	call	0x35a	; 0x35a <radioWriteReg>
		}
		
		uint8_t tempReg = WDTCSR;
     c54:	90 91 60 00 	lds	r25, 0x0060
		tempReg |= _BV(WDIE);
     c58:	90 64       	ori	r25, 0x40	; 64
		WDTCSR |= (1<<WDCE)|(1<<WDE);
     c5a:	80 91 60 00 	lds	r24, 0x0060
     c5e:	88 61       	ori	r24, 0x18	; 24
     c60:	80 93 60 00 	sts	0x0060, r24
		WDTCSR = tempReg;
     c64:	90 93 60 00 	sts	0x0060, r25
	}
	
	if(stateFlags.powerState){
     c68:	80 91 57 02 	lds	r24, 0x0257
     c6c:	85 ff       	sbrs	r24, 5
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <loop+0x1ce>
		OCR1A = volt.lipoly;
     c70:	80 91 58 02 	lds	r24, 0x0258
     c74:	90 91 59 02 	lds	r25, 0x0259
     c78:	90 93 89 00 	sts	0x0089, r25
     c7c:	80 93 88 00 	sts	0x0088, r24
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <loop+0x1dc>
	} else{
		OCR1A = 0;
     c82:	10 92 89 00 	sts	0x0089, r1
     c86:	10 92 88 00 	sts	0x0088, r1
		systemSleep(8);
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <systemSleep>
	}
}
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <printRegisters>:

void printRegisters(void){
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
	
	
	printf("\n\t");
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <printRegisters+0xe>
     ca4:	84 ea       	ldi	r24, 0xA4	; 164
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	ad b7       	in	r26, 0x3d	; 61
     caa:	be b7       	in	r27, 0x3e	; 62
     cac:	12 96       	adiw	r26, 0x02	; 2
     cae:	9c 93       	st	X, r25
     cb0:	8e 93       	st	-X, r24
     cb2:	11 97       	sbiw	r26, 0x01	; 1
     cb4:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
     cb8:	c0 e0       	ldi	r28, 0x00	; 0
     cba:	d0 e0       	ldi	r29, 0x00	; 0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
	for(uint8_t c=0; c<16; c++)	printf("%X\t",c);
     cc0:	77 ea       	ldi	r23, 0xA7	; 167
     cc2:	e7 2e       	mov	r14, r23
     cc4:	71 e0       	ldi	r23, 0x01	; 1
     cc6:	f7 2e       	mov	r15, r23
     cc8:	00 d0       	rcall	.+0      	; 0xcca <printRegisters+0x34>
     cca:	00 d0       	rcall	.+0      	; 0xccc <printRegisters+0x36>
     ccc:	ed b7       	in	r30, 0x3d	; 61
     cce:	fe b7       	in	r31, 0x3e	; 62
     cd0:	f2 82       	std	Z+2, r15	; 0x02
     cd2:	e1 82       	std	Z+1, r14	; 0x01
     cd4:	d4 83       	std	Z+4, r29	; 0x04
     cd6:	c3 83       	std	Z+3, r28	; 0x03
     cd8:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
     cdc:	21 96       	adiw	r28, 0x01	; 1
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	c0 31       	cpi	r28, 0x10	; 16
     ce8:	d1 05       	cpc	r29, r1
     cea:	71 f7       	brne	.-36     	; 0xcc8 <printRegisters+0x32>
	printf("\n");
     cec:	8a e0       	ldi	r24, 0x0A	; 10
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 64 09 	call	0x12c8	; 0x12c8 <putchar>
     cf4:	c0 e0       	ldi	r28, 0x00	; 0
     cf6:	d0 e0       	ldi	r29, 0x00	; 0
     cf8:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8_t j=0; j<8; j++){
		printf("%X\t",j);
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <printRegisters+0x66>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <printRegisters+0x68>
     cfe:	ad b7       	in	r26, 0x3d	; 61
     d00:	be b7       	in	r27, 0x3e	; 62
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	ec 92       	st	X, r14
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	12 96       	adiw	r26, 0x02	; 2
     d0a:	fc 92       	st	X, r15
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	dc 93       	st	X, r29
     d12:	ce 93       	st	-X, r28
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
		CS_RFM = LOW;
     d1a:	2a 98       	cbi	0x05, 2	; 5


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     d1c:	0e bd       	out	0x2e, r16	; 46
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
	while(!(SPSR & _BV(SPIF)));
     d26:	0d b4       	in	r0, 0x2d	; 45
     d28:	07 fe       	sbrs	r0, 7
     d2a:	fd cf       	rjmp	.-6      	; 0xd26 <printRegisters+0x90>
	return SPDR;
     d2c:	8e b5       	in	r24, 0x2e	; 46
     d2e:	10 e0       	ldi	r17, 0x00	; 0


uint8_t transferSPI(uint8_t);

uint8_t transferSPI(uint8_t data){
	SPDR = data;
     d30:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
     d32:	0d b4       	in	r0, 0x2d	; 45
     d34:	07 fe       	sbrs	r0, 7
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <printRegisters+0x9c>
	return SPDR;
     d38:	8e b5       	in	r24, 0x2e	; 46
			transferSPI(16*j);
			for(uint8_t k=0; k<16; k++){
				uint8_t response = transferSPI(0x00);
				printf("%X\t",response);
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <printRegisters+0xa6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <printRegisters+0xa8>
     d3e:	ed b7       	in	r30, 0x3d	; 61
     d40:	fe b7       	in	r31, 0x3e	; 62
     d42:	31 96       	adiw	r30, 0x01	; 1
     d44:	ad b7       	in	r26, 0x3d	; 61
     d46:	be b7       	in	r27, 0x3e	; 62
     d48:	11 96       	adiw	r26, 0x01	; 1
     d4a:	ec 92       	st	X, r14
     d4c:	11 97       	sbiw	r26, 0x01	; 1
     d4e:	12 96       	adiw	r26, 0x02	; 2
     d50:	fc 92       	st	X, r15
     d52:	82 83       	std	Z+2, r24	; 0x02
     d54:	13 82       	std	Z+3, r1	; 0x03
     d56:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
	printf("\n");
	for(uint8_t j=0; j<8; j++){
		printf("%X\t",j);
		CS_RFM = LOW;
			transferSPI(16*j);
			for(uint8_t k=0; k<16; k++){
     d5a:	1f 5f       	subi	r17, 0xFF	; 255
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	10 31       	cpi	r17, 0x10	; 16
     d66:	21 f7       	brne	.-56     	; 0xd30 <printRegisters+0x9a>
				uint8_t response = transferSPI(0x00);
				printf("%X\t",response);
			}
		CS_RFM = HIGH;
     d68:	2a 9a       	sbi	0x05, 2	; 5
		printf("\n");
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <putchar>
     d72:	21 96       	adiw	r28, 0x01	; 1
     d74:	00 5f       	subi	r16, 0xF0	; 240
	
	
	printf("\n\t");
	for(uint8_t c=0; c<16; c++)	printf("%X\t",c);
	printf("\n");
	for(uint8_t j=0; j<8; j++){
     d76:	00 38       	cpi	r16, 0x80	; 128
     d78:	09 f0       	breq	.+2      	; 0xd7c <printRegisters+0xe6>
     d7a:	bf cf       	rjmp	.-130    	; 0xcfa <printRegisters+0x64>
	//printf("\n");
	
	//printf("_T\t%u",TCNT1);


}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	08 95       	ret

00000d8a <setup>:
	while(1){		
		loop();
	}
}

void setup(void){
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
	uint8_t startStatus = atMegaInit();
     d90:	0e 94 26 01 	call	0x24c	; 0x24c <atMegaInit>
     d94:	18 2f       	mov	r17, r24
	stateFlags.systemState = ACTIVE;
     d96:	80 91 57 02 	lds	r24, 0x0257
     d9a:	83 60       	ori	r24, 0x03	; 3
     d9c:	80 93 57 02 	sts	0x0257, r24
	
	radioMode(ACTIVE);
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	0e 94 bb 01 	call	0x376	; 0x376 <radioMode>
	
	// Tasks and Routines
	printf("\n\nKatanaLRS v1\nBy Steve Carlson May 2013\n\n");
     da6:	8b ea       	ldi	r24, 0xAB	; 171
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <puts>
	printf("Reset Source: "); //%X\n",startStatus); //%X\n", startStatus);
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <setup+0x26>
     db0:	85 ed       	ldi	r24, 0xD5	; 213
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	ed b7       	in	r30, 0x3d	; 61
     db6:	fe b7       	in	r31, 0x3e	; 62
     db8:	92 83       	std	Z+2, r25	; 0x02
     dba:	81 83       	std	Z+1, r24	; 0x01
     dbc:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
	if(startStatus&WDRF) printf("WatchDog\t"); // From iom328p.h in AVR Include Folder
     dc0:	c1 2f       	mov	r28, r17
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	ce 01       	movw	r24, r28
     dc6:	83 70       	andi	r24, 0x03	; 3
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	89 2b       	or	r24, r25
     dd0:	59 f0       	breq	.+22     	; 0xde8 <setup+0x5e>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <setup+0x4a>
     dd4:	84 ee       	ldi	r24, 0xE4	; 228
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	ed b7       	in	r30, 0x3d	; 61
     dda:	fe b7       	in	r31, 0x3e	; 62
     ddc:	92 83       	std	Z+2, r25	; 0x02
     dde:	81 83       	std	Z+1, r24	; 0x01
     de0:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
	if(startStatus&BORF) printf("BrownOut\t");
     de8:	c1 ff       	sbrs	r28, 1
     dea:	0b c0       	rjmp	.+22     	; 0xe02 <setup+0x78>
     dec:	00 d0       	rcall	.+0      	; 0xdee <setup+0x64>
     dee:	8e ee       	ldi	r24, 0xEE	; 238
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	ed b7       	in	r30, 0x3d	; 61
     df4:	fe b7       	in	r31, 0x3e	; 62
     df6:	92 83       	std	Z+2, r25	; 0x02
     df8:	81 83       	std	Z+1, r24	; 0x01
     dfa:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
	if(startStatus&EXTRF) printf("External\t");
     e02:	c0 ff       	sbrs	r28, 0
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <setup+0x92>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <setup+0x7e>
     e08:	88 ef       	ldi	r24, 0xF8	; 248
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	ed b7       	in	r30, 0x3d	; 61
     e0e:	fe b7       	in	r31, 0x3e	; 62
     e10:	92 83       	std	Z+2, r25	; 0x02
     e12:	81 83       	std	Z+1, r24	; 0x01
     e14:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
	if(startStatus&PORF) printf("PowerOn\t");
	printf("\n\n");
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <puts>
	//	WDRF BORF EXTRF PORF
	
	flashOrangeLED(10,10,40);
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	6a e0       	ldi	r22, 0x0A	; 10
     e28:	48 e2       	ldi	r20, 0x28	; 40
     e2a:	0e 94 a7 03 	call	0x74e	; 0x74e <flashOrangeLED>
	
	printf("Device ID Check: ");
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <setup+0xa6>
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	ed b7       	in	r30, 0x3d	; 61
     e36:	fe b7       	in	r31, 0x3e	; 62
     e38:	92 83       	std	Z+2, r25	; 0x02
     e3a:	81 83       	std	Z+1, r24	; 0x01
     e3c:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
	if(deviceIdCheck()){
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0e 94 20 05 	call	0xa40	; 0xa40 <deviceIdCheck>
     e48:	88 23       	and	r24, r24
     e4a:	19 f0       	breq	.+6      	; 0xe52 <setup+0xc8>
		printf("OK\n");
     e4c:	86 e1       	ldi	r24, 0x16	; 22
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <setup+0xcc>
	} else{
		printf("FAILED!\n");
     e52:	89 e1       	ldi	r24, 0x19	; 25
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <puts>
	}	
	
	*((uint8_t*) &configFlags) = eeprom_read_byte((const uint8_t*) EEPROM_START);
     e5a:	8a e0       	ldi	r24, 0x0A	; 10
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__eerd_byte_m328p>
     e62:	80 93 56 02 	sts	0x0256, r24
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <puts>
	
	*((uint8_t*) &configFlags) = eeprom_read_byte((const uint8_t*) EEPROM_START);
	
	// Console Usage Hints
	printHelpInfo();
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	08 95       	ret

00000e76 <main>:
	}	
}

// Main Program
int main(void){
	setup();
     e76:	0e 94 c5 06 	call	0xd8a	; 0xd8a <setup>

	while(1){		
		loop();
     e7a:	0e 94 5a 05 	call	0xab4	; 0xab4 <loop>
     e7e:	fd cf       	rjmp	.-6      	; 0xe7a <main+0x4>

00000e80 <__vector_18>:
ISR(INT1_vect){
	stateFlags.intSource = INT_SRC_INTx;
	EIMSK = 0;
}

ISR(USART_RX_vect){
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
	stateFlags.intSource = INT_SRC_UART;
     ea2:	80 91 57 02 	lds	r24, 0x0257
     ea6:	8c 60       	ori	r24, 0x0C	; 12
     ea8:	80 93 57 02 	sts	0x0257, r24
	stateFlags.monitorMode = 0;
     eac:	80 91 57 02 	lds	r24, 0x0257
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 93 57 02 	sts	0x0257, r24
	
	uint8_t command = UDR0;
     eb6:	80 91 c6 00 	lds	r24, 0x00C6
	
	switch(command){
     eba:	82 34       	cpi	r24, 0x42	; 66
     ebc:	89 f0       	breq	.+34     	; 0xee0 <__vector_18+0x60>
     ebe:	83 34       	cpi	r24, 0x43	; 67
     ec0:	30 f4       	brcc	.+12     	; 0xece <__vector_18+0x4e>
     ec2:	81 33       	cpi	r24, 0x31	; 49
     ec4:	71 f1       	breq	.+92     	; 0xf22 <__vector_18+0xa2>
     ec6:	8f 33       	cpi	r24, 0x3F	; 63
     ec8:	09 f0       	breq	.+2      	; 0xecc <__vector_18+0x4c>
     eca:	4e c0       	rjmp	.+156    	; 0xf68 <__vector_18+0xe8>
     ecc:	24 c0       	rjmp	.+72     	; 0xf16 <__vector_18+0x96>
     ece:	8d 34       	cpi	r24, 0x4D	; 77
     ed0:	e1 f0       	breq	.+56     	; 0xf0a <__vector_18+0x8a>
     ed2:	80 36       	cpi	r24, 0x60	; 96
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_18+0x58>
     ed6:	42 c0       	rjmp	.+132    	; 0xf5c <__vector_18+0xdc>
     ed8:	8a 34       	cpi	r24, 0x4A	; 74
     eda:	09 f0       	breq	.+2      	; 0xede <__vector_18+0x5e>
     edc:	45 c0       	rjmp	.+138    	; 0xf68 <__vector_18+0xe8>
     ede:	1e c0       	rjmp	.+60     	; 0xf1c <__vector_18+0x9c>
		case 'B':
			printf("Battery: %u\n", volt.atMega);
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <__vector_18+0x62>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <__vector_18+0x64>
     ee4:	81 e2       	ldi	r24, 0x21	; 33
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	ed b7       	in	r30, 0x3d	; 61
     eea:	fe b7       	in	r31, 0x3e	; 62
     eec:	92 83       	std	Z+2, r25	; 0x02
     eee:	81 83       	std	Z+1, r24	; 0x01
     ef0:	80 91 5c 02 	lds	r24, 0x025C
     ef4:	90 91 5d 02 	lds	r25, 0x025D
     ef8:	94 83       	std	Z+4, r25	; 0x04
     efa:	83 83       	std	Z+3, r24	; 0x03
     efc:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	2f c0       	rjmp	.+94     	; 0xf68 <__vector_18+0xe8>
			break;
		case 'M':
			stateFlags.monitorMode = 1;
     f0a:	80 91 57 02 	lds	r24, 0x0257
     f0e:	80 61       	ori	r24, 0x10	; 16
     f10:	80 93 57 02 	sts	0x0257, r24
     f14:	29 c0       	rjmp	.+82     	; 0xf68 <__vector_18+0xe8>
	if(rfmDevType==0 && rfmVerCode==0) return (1);
	return 0;
}

void printHelpInfo(void){
	printf("\nConsole Useage:\n"
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	1d c0       	rjmp	.+58     	; 0xf56 <__vector_18+0xd6>
			break;
		case '?':
			printHelpInfo();
			break;
		case 'J':
			printRegisters();
     f1c:	0e 94 4b 06 	call	0xc96	; 0xc96 <printRegisters>
     f20:	23 c0       	rjmp	.+70     	; 0xf68 <__vector_18+0xe8>
			break;
		case '1':
			configFlags.wdtSlpEn ^= 1;
     f22:	80 91 56 02 	lds	r24, 0x0256
     f26:	98 e0       	ldi	r25, 0x08	; 8
     f28:	89 27       	eor	r24, r25
     f2a:	80 93 56 02 	sts	0x0256, r24
			printf("Sleep: ");
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <__vector_18+0xb0>
     f30:	8e e2       	ldi	r24, 0x2E	; 46
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	ed b7       	in	r30, 0x3d	; 61
     f36:	fe b7       	in	r31, 0x3e	; 62
     f38:	92 83       	std	Z+2, r25	; 0x02
     f3a:	81 83       	std	Z+1, r24	; 0x01
     f3c:	0e 94 4f 09 	call	0x129e	; 0x129e <printf>
			if(configFlags.wdtSlpEn) printf("Enabled\n");
     f40:	80 91 56 02 	lds	r24, 0x0256
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	83 ff       	sbrs	r24, 3
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <__vector_18+0xd2>
     f4c:	86 e3       	ldi	r24, 0x36	; 54
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <__vector_18+0xd6>
			else printf("Disabled\n");
     f52:	8e e3       	ldi	r24, 0x3E	; 62
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <puts>
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <__vector_18+0xe8>
			break;
		case '`':
			eeprom_update_byte((uint8_t*)EEPROM_START,(*(uint8_t*) &configFlags));
     f5c:	8a e0       	ldi	r24, 0x0A	; 10
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	60 91 56 02 	lds	r22, 0x0256
     f64:	0e 94 85 0b 	call	0x170a	; 0x170a <__eeupd_byte_m328p>
			break;
		default:
			break;
	}	
}
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__cmpsf2>:
     f8a:	6c d0       	rcall	.+216    	; 0x1064 <__fp_cmp>
     f8c:	08 f4       	brcc	.+2      	; 0xf90 <__cmpsf2+0x6>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	08 95       	ret

00000f92 <__fixunssfsi>:
     f92:	94 d0       	rcall	.+296    	; 0x10bc <__fp_splitA>
     f94:	88 f0       	brcs	.+34     	; 0xfb8 <__fixunssfsi+0x26>
     f96:	9f 57       	subi	r25, 0x7F	; 127
     f98:	90 f0       	brcs	.+36     	; 0xfbe <__fixunssfsi+0x2c>
     f9a:	b9 2f       	mov	r27, r25
     f9c:	99 27       	eor	r25, r25
     f9e:	b7 51       	subi	r27, 0x17	; 23
     fa0:	a0 f0       	brcs	.+40     	; 0xfca <__fixunssfsi+0x38>
     fa2:	d1 f0       	breq	.+52     	; 0xfd8 <__fixunssfsi+0x46>
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	1a f0       	brmi	.+6      	; 0xfb4 <__fixunssfsi+0x22>
     fae:	ba 95       	dec	r27
     fb0:	c9 f7       	brne	.-14     	; 0xfa4 <__fixunssfsi+0x12>
     fb2:	12 c0       	rjmp	.+36     	; 0xfd8 <__fixunssfsi+0x46>
     fb4:	b1 30       	cpi	r27, 0x01	; 1
     fb6:	81 f0       	breq	.+32     	; 0xfd8 <__fixunssfsi+0x46>
     fb8:	9b d0       	rcall	.+310    	; 0x10f0 <__fp_zero>
     fba:	b1 e0       	ldi	r27, 0x01	; 1
     fbc:	08 95       	ret
     fbe:	98 c0       	rjmp	.+304    	; 0x10f0 <__fp_zero>
     fc0:	67 2f       	mov	r22, r23
     fc2:	78 2f       	mov	r23, r24
     fc4:	88 27       	eor	r24, r24
     fc6:	b8 5f       	subi	r27, 0xF8	; 248
     fc8:	39 f0       	breq	.+14     	; 0xfd8 <__fixunssfsi+0x46>
     fca:	b9 3f       	cpi	r27, 0xF9	; 249
     fcc:	cc f3       	brlt	.-14     	; 0xfc0 <__fixunssfsi+0x2e>
     fce:	86 95       	lsr	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b3 95       	inc	r27
     fd6:	d9 f7       	brne	.-10     	; 0xfce <__fixunssfsi+0x3c>
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__fixunssfsi+0x56>
     fda:	90 95       	com	r25
     fdc:	80 95       	com	r24
     fde:	70 95       	com	r23
     fe0:	61 95       	neg	r22
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	08 95       	ret

00000fea <__floatunsisf>:
     fea:	e8 94       	clt
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <__floatsisf+0x12>

00000fee <__floatsisf>:
     fee:	97 fb       	bst	r25, 7
     ff0:	3e f4       	brtc	.+14     	; 0x1000 <__floatsisf+0x12>
     ff2:	90 95       	com	r25
     ff4:	80 95       	com	r24
     ff6:	70 95       	com	r23
     ff8:	61 95       	neg	r22
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8f 4f       	sbci	r24, 0xFF	; 255
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	99 23       	and	r25, r25
    1002:	a9 f0       	breq	.+42     	; 0x102e <__floatsisf+0x40>
    1004:	f9 2f       	mov	r31, r25
    1006:	96 e9       	ldi	r25, 0x96	; 150
    1008:	bb 27       	eor	r27, r27
    100a:	93 95       	inc	r25
    100c:	f6 95       	lsr	r31
    100e:	87 95       	ror	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f1 11       	cpse	r31, r1
    1018:	f8 cf       	rjmp	.-16     	; 0x100a <__floatsisf+0x1c>
    101a:	fa f4       	brpl	.+62     	; 0x105a <__floatsisf+0x6c>
    101c:	bb 0f       	add	r27, r27
    101e:	11 f4       	brne	.+4      	; 0x1024 <__floatsisf+0x36>
    1020:	60 ff       	sbrs	r22, 0
    1022:	1b c0       	rjmp	.+54     	; 0x105a <__floatsisf+0x6c>
    1024:	6f 5f       	subi	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	16 c0       	rjmp	.+44     	; 0x105a <__floatsisf+0x6c>
    102e:	88 23       	and	r24, r24
    1030:	11 f0       	breq	.+4      	; 0x1036 <__floatsisf+0x48>
    1032:	96 e9       	ldi	r25, 0x96	; 150
    1034:	11 c0       	rjmp	.+34     	; 0x1058 <__floatsisf+0x6a>
    1036:	77 23       	and	r23, r23
    1038:	21 f0       	breq	.+8      	; 0x1042 <__floatsisf+0x54>
    103a:	9e e8       	ldi	r25, 0x8E	; 142
    103c:	87 2f       	mov	r24, r23
    103e:	76 2f       	mov	r23, r22
    1040:	05 c0       	rjmp	.+10     	; 0x104c <__floatsisf+0x5e>
    1042:	66 23       	and	r22, r22
    1044:	71 f0       	breq	.+28     	; 0x1062 <__floatsisf+0x74>
    1046:	96 e8       	ldi	r25, 0x86	; 134
    1048:	86 2f       	mov	r24, r22
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	2a f0       	brmi	.+10     	; 0x105a <__floatsisf+0x6c>
    1050:	9a 95       	dec	r25
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	da f7       	brpl	.-10     	; 0x1050 <__floatsisf+0x62>
    105a:	88 0f       	add	r24, r24
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	97 f9       	bld	r25, 7
    1062:	08 95       	ret

00001064 <__fp_cmp>:
    1064:	99 0f       	add	r25, r25
    1066:	00 08       	sbc	r0, r0
    1068:	55 0f       	add	r21, r21
    106a:	aa 0b       	sbc	r26, r26
    106c:	e0 e8       	ldi	r30, 0x80	; 128
    106e:	fe ef       	ldi	r31, 0xFE	; 254
    1070:	16 16       	cp	r1, r22
    1072:	17 06       	cpc	r1, r23
    1074:	e8 07       	cpc	r30, r24
    1076:	f9 07       	cpc	r31, r25
    1078:	c0 f0       	brcs	.+48     	; 0x10aa <__fp_cmp+0x46>
    107a:	12 16       	cp	r1, r18
    107c:	13 06       	cpc	r1, r19
    107e:	e4 07       	cpc	r30, r20
    1080:	f5 07       	cpc	r31, r21
    1082:	98 f0       	brcs	.+38     	; 0x10aa <__fp_cmp+0x46>
    1084:	62 1b       	sub	r22, r18
    1086:	73 0b       	sbc	r23, r19
    1088:	84 0b       	sbc	r24, r20
    108a:	95 0b       	sbc	r25, r21
    108c:	39 f4       	brne	.+14     	; 0x109c <__fp_cmp+0x38>
    108e:	0a 26       	eor	r0, r26
    1090:	61 f0       	breq	.+24     	; 0x10aa <__fp_cmp+0x46>
    1092:	23 2b       	or	r18, r19
    1094:	24 2b       	or	r18, r20
    1096:	25 2b       	or	r18, r21
    1098:	21 f4       	brne	.+8      	; 0x10a2 <__fp_cmp+0x3e>
    109a:	08 95       	ret
    109c:	0a 26       	eor	r0, r26
    109e:	09 f4       	brne	.+2      	; 0x10a2 <__fp_cmp+0x3e>
    10a0:	a1 40       	sbci	r26, 0x01	; 1
    10a2:	a6 95       	lsr	r26
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	81 1d       	adc	r24, r1
    10a8:	81 1d       	adc	r24, r1
    10aa:	08 95       	ret

000010ac <__fp_split3>:
    10ac:	57 fd       	sbrc	r21, 7
    10ae:	90 58       	subi	r25, 0x80	; 128
    10b0:	44 0f       	add	r20, r20
    10b2:	55 1f       	adc	r21, r21
    10b4:	59 f0       	breq	.+22     	; 0x10cc <__fp_splitA+0x10>
    10b6:	5f 3f       	cpi	r21, 0xFF	; 255
    10b8:	71 f0       	breq	.+28     	; 0x10d6 <__fp_splitA+0x1a>
    10ba:	47 95       	ror	r20

000010bc <__fp_splitA>:
    10bc:	88 0f       	add	r24, r24
    10be:	97 fb       	bst	r25, 7
    10c0:	99 1f       	adc	r25, r25
    10c2:	61 f0       	breq	.+24     	; 0x10dc <__fp_splitA+0x20>
    10c4:	9f 3f       	cpi	r25, 0xFF	; 255
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <__fp_splitA+0x2a>
    10c8:	87 95       	ror	r24
    10ca:	08 95       	ret
    10cc:	12 16       	cp	r1, r18
    10ce:	13 06       	cpc	r1, r19
    10d0:	14 06       	cpc	r1, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	f2 cf       	rjmp	.-28     	; 0x10ba <__fp_split3+0xe>
    10d6:	46 95       	lsr	r20
    10d8:	f1 df       	rcall	.-30     	; 0x10bc <__fp_splitA>
    10da:	08 c0       	rjmp	.+16     	; 0x10ec <__fp_splitA+0x30>
    10dc:	16 16       	cp	r1, r22
    10de:	17 06       	cpc	r1, r23
    10e0:	18 06       	cpc	r1, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	f1 cf       	rjmp	.-30     	; 0x10c8 <__fp_splitA+0xc>
    10e6:	86 95       	lsr	r24
    10e8:	71 05       	cpc	r23, r1
    10ea:	61 05       	cpc	r22, r1
    10ec:	08 94       	sec
    10ee:	08 95       	ret

000010f0 <__fp_zero>:
    10f0:	e8 94       	clt

000010f2 <__fp_szero>:
    10f2:	bb 27       	eor	r27, r27
    10f4:	66 27       	eor	r22, r22
    10f6:	77 27       	eor	r23, r23
    10f8:	cb 01       	movw	r24, r22
    10fa:	97 f9       	bld	r25, 7
    10fc:	08 95       	ret

000010fe <__gesf2>:
    10fe:	b2 df       	rcall	.-156    	; 0x1064 <__fp_cmp>
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__gesf2+0x6>
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	08 95       	ret

00001106 <__mulsf3>:
    1106:	0b d0       	rcall	.+22     	; 0x111e <__mulsf3x>
    1108:	78 c0       	rjmp	.+240    	; 0x11fa <__fp_round>
    110a:	69 d0       	rcall	.+210    	; 0x11de <__fp_pscA>
    110c:	28 f0       	brcs	.+10     	; 0x1118 <__mulsf3+0x12>
    110e:	6e d0       	rcall	.+220    	; 0x11ec <__fp_pscB>
    1110:	18 f0       	brcs	.+6      	; 0x1118 <__mulsf3+0x12>
    1112:	95 23       	and	r25, r21
    1114:	09 f0       	breq	.+2      	; 0x1118 <__mulsf3+0x12>
    1116:	5a c0       	rjmp	.+180    	; 0x11cc <__fp_inf>
    1118:	5f c0       	rjmp	.+190    	; 0x11d8 <__fp_nan>
    111a:	11 24       	eor	r1, r1
    111c:	ea cf       	rjmp	.-44     	; 0x10f2 <__fp_szero>

0000111e <__mulsf3x>:
    111e:	c6 df       	rcall	.-116    	; 0x10ac <__fp_split3>
    1120:	a0 f3       	brcs	.-24     	; 0x110a <__mulsf3+0x4>

00001122 <__mulsf3_pse>:
    1122:	95 9f       	mul	r25, r21
    1124:	d1 f3       	breq	.-12     	; 0x111a <__mulsf3+0x14>
    1126:	95 0f       	add	r25, r21
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	55 1f       	adc	r21, r21
    112c:	62 9f       	mul	r22, r18
    112e:	f0 01       	movw	r30, r0
    1130:	72 9f       	mul	r23, r18
    1132:	bb 27       	eor	r27, r27
    1134:	f0 0d       	add	r31, r0
    1136:	b1 1d       	adc	r27, r1
    1138:	63 9f       	mul	r22, r19
    113a:	aa 27       	eor	r26, r26
    113c:	f0 0d       	add	r31, r0
    113e:	b1 1d       	adc	r27, r1
    1140:	aa 1f       	adc	r26, r26
    1142:	64 9f       	mul	r22, r20
    1144:	66 27       	eor	r22, r22
    1146:	b0 0d       	add	r27, r0
    1148:	a1 1d       	adc	r26, r1
    114a:	66 1f       	adc	r22, r22
    114c:	82 9f       	mul	r24, r18
    114e:	22 27       	eor	r18, r18
    1150:	b0 0d       	add	r27, r0
    1152:	a1 1d       	adc	r26, r1
    1154:	62 1f       	adc	r22, r18
    1156:	73 9f       	mul	r23, r19
    1158:	b0 0d       	add	r27, r0
    115a:	a1 1d       	adc	r26, r1
    115c:	62 1f       	adc	r22, r18
    115e:	83 9f       	mul	r24, r19
    1160:	a0 0d       	add	r26, r0
    1162:	61 1d       	adc	r22, r1
    1164:	22 1f       	adc	r18, r18
    1166:	74 9f       	mul	r23, r20
    1168:	33 27       	eor	r19, r19
    116a:	a0 0d       	add	r26, r0
    116c:	61 1d       	adc	r22, r1
    116e:	23 1f       	adc	r18, r19
    1170:	84 9f       	mul	r24, r20
    1172:	60 0d       	add	r22, r0
    1174:	21 1d       	adc	r18, r1
    1176:	82 2f       	mov	r24, r18
    1178:	76 2f       	mov	r23, r22
    117a:	6a 2f       	mov	r22, r26
    117c:	11 24       	eor	r1, r1
    117e:	9f 57       	subi	r25, 0x7F	; 127
    1180:	50 40       	sbci	r21, 0x00	; 0
    1182:	8a f0       	brmi	.+34     	; 0x11a6 <__mulsf3_pse+0x84>
    1184:	e1 f0       	breq	.+56     	; 0x11be <__mulsf3_pse+0x9c>
    1186:	88 23       	and	r24, r24
    1188:	4a f0       	brmi	.+18     	; 0x119c <__mulsf3_pse+0x7a>
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	bb 1f       	adc	r27, r27
    1190:	66 1f       	adc	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	91 50       	subi	r25, 0x01	; 1
    1198:	50 40       	sbci	r21, 0x00	; 0
    119a:	a9 f7       	brne	.-22     	; 0x1186 <__mulsf3_pse+0x64>
    119c:	9e 3f       	cpi	r25, 0xFE	; 254
    119e:	51 05       	cpc	r21, r1
    11a0:	70 f0       	brcs	.+28     	; 0x11be <__mulsf3_pse+0x9c>
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <__fp_inf>
    11a4:	a6 cf       	rjmp	.-180    	; 0x10f2 <__fp_szero>
    11a6:	5f 3f       	cpi	r21, 0xFF	; 255
    11a8:	ec f3       	brlt	.-6      	; 0x11a4 <__mulsf3_pse+0x82>
    11aa:	98 3e       	cpi	r25, 0xE8	; 232
    11ac:	dc f3       	brlt	.-10     	; 0x11a4 <__mulsf3_pse+0x82>
    11ae:	86 95       	lsr	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	b7 95       	ror	r27
    11b6:	f7 95       	ror	r31
    11b8:	e7 95       	ror	r30
    11ba:	9f 5f       	subi	r25, 0xFF	; 255
    11bc:	c1 f7       	brne	.-16     	; 0x11ae <__mulsf3_pse+0x8c>
    11be:	fe 2b       	or	r31, r30
    11c0:	88 0f       	add	r24, r24
    11c2:	91 1d       	adc	r25, r1
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
    11c8:	97 f9       	bld	r25, 7
    11ca:	08 95       	ret

000011cc <__fp_inf>:
    11cc:	97 f9       	bld	r25, 7
    11ce:	9f 67       	ori	r25, 0x7F	; 127
    11d0:	80 e8       	ldi	r24, 0x80	; 128
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	08 95       	ret

000011d8 <__fp_nan>:
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
    11da:	80 ec       	ldi	r24, 0xC0	; 192
    11dc:	08 95       	ret

000011de <__fp_pscA>:
    11de:	00 24       	eor	r0, r0
    11e0:	0a 94       	dec	r0
    11e2:	16 16       	cp	r1, r22
    11e4:	17 06       	cpc	r1, r23
    11e6:	18 06       	cpc	r1, r24
    11e8:	09 06       	cpc	r0, r25
    11ea:	08 95       	ret

000011ec <__fp_pscB>:
    11ec:	00 24       	eor	r0, r0
    11ee:	0a 94       	dec	r0
    11f0:	12 16       	cp	r1, r18
    11f2:	13 06       	cpc	r1, r19
    11f4:	14 06       	cpc	r1, r20
    11f6:	05 06       	cpc	r0, r21
    11f8:	08 95       	ret

000011fa <__fp_round>:
    11fa:	09 2e       	mov	r0, r25
    11fc:	03 94       	inc	r0
    11fe:	00 0c       	add	r0, r0
    1200:	11 f4       	brne	.+4      	; 0x1206 <__fp_round+0xc>
    1202:	88 23       	and	r24, r24
    1204:	52 f0       	brmi	.+20     	; 0x121a <__fp_round+0x20>
    1206:	bb 0f       	add	r27, r27
    1208:	40 f4       	brcc	.+16     	; 0x121a <__fp_round+0x20>
    120a:	bf 2b       	or	r27, r31
    120c:	11 f4       	brne	.+4      	; 0x1212 <__fp_round+0x18>
    120e:	60 ff       	sbrs	r22, 0
    1210:	04 c0       	rjmp	.+8      	; 0x121a <__fp_round+0x20>
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	08 95       	ret

0000121c <__mulsi3>:
    121c:	62 9f       	mul	r22, r18
    121e:	d0 01       	movw	r26, r0
    1220:	73 9f       	mul	r23, r19
    1222:	f0 01       	movw	r30, r0
    1224:	82 9f       	mul	r24, r18
    1226:	e0 0d       	add	r30, r0
    1228:	f1 1d       	adc	r31, r1
    122a:	64 9f       	mul	r22, r20
    122c:	e0 0d       	add	r30, r0
    122e:	f1 1d       	adc	r31, r1
    1230:	92 9f       	mul	r25, r18
    1232:	f0 0d       	add	r31, r0
    1234:	83 9f       	mul	r24, r19
    1236:	f0 0d       	add	r31, r0
    1238:	74 9f       	mul	r23, r20
    123a:	f0 0d       	add	r31, r0
    123c:	65 9f       	mul	r22, r21
    123e:	f0 0d       	add	r31, r0
    1240:	99 27       	eor	r25, r25
    1242:	72 9f       	mul	r23, r18
    1244:	b0 0d       	add	r27, r0
    1246:	e1 1d       	adc	r30, r1
    1248:	f9 1f       	adc	r31, r25
    124a:	63 9f       	mul	r22, r19
    124c:	b0 0d       	add	r27, r0
    124e:	e1 1d       	adc	r30, r1
    1250:	f9 1f       	adc	r31, r25
    1252:	bd 01       	movw	r22, r26
    1254:	cf 01       	movw	r24, r30
    1256:	11 24       	eor	r1, r1
    1258:	08 95       	ret

0000125a <__udivmodsi4>:
    125a:	a1 e2       	ldi	r26, 0x21	; 33
    125c:	1a 2e       	mov	r1, r26
    125e:	aa 1b       	sub	r26, r26
    1260:	bb 1b       	sub	r27, r27
    1262:	fd 01       	movw	r30, r26
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <__udivmodsi4_ep>

00001266 <__udivmodsi4_loop>:
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	ee 1f       	adc	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	a2 17       	cp	r26, r18
    1270:	b3 07       	cpc	r27, r19
    1272:	e4 07       	cpc	r30, r20
    1274:	f5 07       	cpc	r31, r21
    1276:	20 f0       	brcs	.+8      	; 0x1280 <__udivmodsi4_ep>
    1278:	a2 1b       	sub	r26, r18
    127a:	b3 0b       	sbc	r27, r19
    127c:	e4 0b       	sbc	r30, r20
    127e:	f5 0b       	sbc	r31, r21

00001280 <__udivmodsi4_ep>:
    1280:	66 1f       	adc	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	1a 94       	dec	r1
    128a:	69 f7       	brne	.-38     	; 0x1266 <__udivmodsi4_loop>
    128c:	60 95       	com	r22
    128e:	70 95       	com	r23
    1290:	80 95       	com	r24
    1292:	90 95       	com	r25
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	bd 01       	movw	r22, r26
    129a:	cf 01       	movw	r24, r30
    129c:	08 95       	ret

0000129e <printf>:
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e5       	ldi	r30, 0x55	; 85
    12a4:	f9 e0       	ldi	r31, 0x09	; 9
    12a6:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__prologue_saves__+0x20>
    12aa:	fe 01       	movw	r30, r28
    12ac:	35 96       	adiw	r30, 0x05	; 5
    12ae:	61 91       	ld	r22, Z+
    12b0:	71 91       	ld	r23, Z+
    12b2:	80 91 60 02 	lds	r24, 0x0260
    12b6:	90 91 61 02 	lds	r25, 0x0261
    12ba:	af 01       	movw	r20, r30
    12bc:	0e 94 a0 09 	call	0x1340	; 0x1340 <vfprintf>
    12c0:	20 96       	adiw	r28, 0x00	; 0
    12c2:	e2 e0       	ldi	r30, 0x02	; 2
    12c4:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__epilogue_restores__+0x20>

000012c8 <putchar>:
    12c8:	60 91 60 02 	lds	r22, 0x0260
    12cc:	70 91 61 02 	lds	r23, 0x0261
    12d0:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    12d4:	08 95       	ret

000012d6 <puts>:
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	8c 01       	movw	r16, r24
    12e0:	e0 91 60 02 	lds	r30, 0x0260
    12e4:	f0 91 61 02 	lds	r31, 0x0261
    12e8:	83 81       	ldd	r24, Z+3	; 0x03
    12ea:	81 ff       	sbrs	r24, 1
    12ec:	21 c0       	rjmp	.+66     	; 0x1330 <puts+0x5a>
    12ee:	c0 e0       	ldi	r28, 0x00	; 0
    12f0:	d0 e0       	ldi	r29, 0x00	; 0
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <puts+0x38>
    12f4:	e0 91 60 02 	lds	r30, 0x0260
    12f8:	f0 91 61 02 	lds	r31, 0x0261
    12fc:	20 85       	ldd	r18, Z+8	; 0x08
    12fe:	31 85       	ldd	r19, Z+9	; 0x09
    1300:	bf 01       	movw	r22, r30
    1302:	f9 01       	movw	r30, r18
    1304:	09 95       	icall
    1306:	89 2b       	or	r24, r25
    1308:	11 f0       	breq	.+4      	; 0x130e <puts+0x38>
    130a:	cf ef       	ldi	r28, 0xFF	; 255
    130c:	df ef       	ldi	r29, 0xFF	; 255
    130e:	f8 01       	movw	r30, r16
    1310:	81 91       	ld	r24, Z+
    1312:	8f 01       	movw	r16, r30
    1314:	88 23       	and	r24, r24
    1316:	71 f7       	brne	.-36     	; 0x12f4 <puts+0x1e>
    1318:	e0 91 60 02 	lds	r30, 0x0260
    131c:	f0 91 61 02 	lds	r31, 0x0261
    1320:	20 85       	ldd	r18, Z+8	; 0x08
    1322:	31 85       	ldd	r19, Z+9	; 0x09
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	bf 01       	movw	r22, r30
    1328:	f9 01       	movw	r30, r18
    132a:	09 95       	icall
    132c:	89 2b       	or	r24, r25
    132e:	11 f0       	breq	.+4      	; 0x1334 <puts+0x5e>
    1330:	cf ef       	ldi	r28, 0xFF	; 255
    1332:	df ef       	ldi	r29, 0xFF	; 255
    1334:	ce 01       	movw	r24, r28
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <vfprintf>:
    1340:	ab e0       	ldi	r26, 0x0B	; 11
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e6 ea       	ldi	r30, 0xA6	; 166
    1346:	f9 e0       	ldi	r31, 0x09	; 9
    1348:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__prologue_saves__>
    134c:	3c 01       	movw	r6, r24
    134e:	2b 01       	movw	r4, r22
    1350:	5a 01       	movw	r10, r20
    1352:	fc 01       	movw	r30, r24
    1354:	17 82       	std	Z+7, r1	; 0x07
    1356:	16 82       	std	Z+6, r1	; 0x06
    1358:	83 81       	ldd	r24, Z+3	; 0x03
    135a:	81 fd       	sbrc	r24, 1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x24>
    135e:	6f ef       	ldi	r22, 0xFF	; 255
    1360:	7f ef       	ldi	r23, 0xFF	; 255
    1362:	c6 c1       	rjmp	.+908    	; 0x16f0 <vfprintf+0x3b0>
    1364:	9a e0       	ldi	r25, 0x0A	; 10
    1366:	89 2e       	mov	r8, r25
    1368:	1e 01       	movw	r2, r28
    136a:	08 94       	sec
    136c:	21 1c       	adc	r2, r1
    136e:	31 1c       	adc	r3, r1
    1370:	f3 01       	movw	r30, r6
    1372:	23 81       	ldd	r18, Z+3	; 0x03
    1374:	f2 01       	movw	r30, r4
    1376:	23 fd       	sbrc	r18, 3
    1378:	85 91       	lpm	r24, Z+
    137a:	23 ff       	sbrs	r18, 3
    137c:	81 91       	ld	r24, Z+
    137e:	2f 01       	movw	r4, r30
    1380:	88 23       	and	r24, r24
    1382:	09 f4       	brne	.+2      	; 0x1386 <vfprintf+0x46>
    1384:	b2 c1       	rjmp	.+868    	; 0x16ea <vfprintf+0x3aa>
    1386:	85 32       	cpi	r24, 0x25	; 37
    1388:	39 f4       	brne	.+14     	; 0x1398 <vfprintf+0x58>
    138a:	23 fd       	sbrc	r18, 3
    138c:	85 91       	lpm	r24, Z+
    138e:	23 ff       	sbrs	r18, 3
    1390:	81 91       	ld	r24, Z+
    1392:	2f 01       	movw	r4, r30
    1394:	85 32       	cpi	r24, 0x25	; 37
    1396:	29 f4       	brne	.+10     	; 0x13a2 <vfprintf+0x62>
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	b3 01       	movw	r22, r6
    139c:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    13a0:	e7 cf       	rjmp	.-50     	; 0x1370 <vfprintf+0x30>
    13a2:	98 2f       	mov	r25, r24
    13a4:	ff 24       	eor	r15, r15
    13a6:	ee 24       	eor	r14, r14
    13a8:	99 24       	eor	r9, r9
    13aa:	ff e1       	ldi	r31, 0x1F	; 31
    13ac:	ff 15       	cp	r31, r15
    13ae:	d0 f0       	brcs	.+52     	; 0x13e4 <vfprintf+0xa4>
    13b0:	9b 32       	cpi	r25, 0x2B	; 43
    13b2:	69 f0       	breq	.+26     	; 0x13ce <vfprintf+0x8e>
    13b4:	9c 32       	cpi	r25, 0x2C	; 44
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <vfprintf+0x82>
    13b8:	90 32       	cpi	r25, 0x20	; 32
    13ba:	59 f0       	breq	.+22     	; 0x13d2 <vfprintf+0x92>
    13bc:	93 32       	cpi	r25, 0x23	; 35
    13be:	91 f4       	brne	.+36     	; 0x13e4 <vfprintf+0xa4>
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <vfprintf+0x9e>
    13c2:	9d 32       	cpi	r25, 0x2D	; 45
    13c4:	49 f0       	breq	.+18     	; 0x13d8 <vfprintf+0x98>
    13c6:	90 33       	cpi	r25, 0x30	; 48
    13c8:	69 f4       	brne	.+26     	; 0x13e4 <vfprintf+0xa4>
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <vfprintf+0xd6>
    13ce:	52 e0       	ldi	r21, 0x02	; 2
    13d0:	f5 2a       	or	r15, r21
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	f8 2a       	or	r15, r24
    13d6:	28 c0       	rjmp	.+80     	; 0x1428 <vfprintf+0xe8>
    13d8:	98 e0       	ldi	r25, 0x08	; 8
    13da:	f9 2a       	or	r15, r25
    13dc:	25 c0       	rjmp	.+74     	; 0x1428 <vfprintf+0xe8>
    13de:	e0 e1       	ldi	r30, 0x10	; 16
    13e0:	fe 2a       	or	r15, r30
    13e2:	22 c0       	rjmp	.+68     	; 0x1428 <vfprintf+0xe8>
    13e4:	f7 fc       	sbrc	r15, 7
    13e6:	29 c0       	rjmp	.+82     	; 0x143a <vfprintf+0xfa>
    13e8:	89 2f       	mov	r24, r25
    13ea:	80 53       	subi	r24, 0x30	; 48
    13ec:	8a 30       	cpi	r24, 0x0A	; 10
    13ee:	70 f4       	brcc	.+28     	; 0x140c <vfprintf+0xcc>
    13f0:	f6 fe       	sbrs	r15, 6
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0xbe>
    13f4:	98 9c       	mul	r9, r8
    13f6:	90 2c       	mov	r9, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	98 0e       	add	r9, r24
    13fc:	15 c0       	rjmp	.+42     	; 0x1428 <vfprintf+0xe8>
    13fe:	e8 9c       	mul	r14, r8
    1400:	e0 2c       	mov	r14, r0
    1402:	11 24       	eor	r1, r1
    1404:	e8 0e       	add	r14, r24
    1406:	f0 e2       	ldi	r31, 0x20	; 32
    1408:	ff 2a       	or	r15, r31
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <vfprintf+0xe8>
    140c:	9e 32       	cpi	r25, 0x2E	; 46
    140e:	29 f4       	brne	.+10     	; 0x141a <vfprintf+0xda>
    1410:	f6 fc       	sbrc	r15, 6
    1412:	6b c1       	rjmp	.+726    	; 0x16ea <vfprintf+0x3aa>
    1414:	40 e4       	ldi	r20, 0x40	; 64
    1416:	f4 2a       	or	r15, r20
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <vfprintf+0xe8>
    141a:	9c 36       	cpi	r25, 0x6C	; 108
    141c:	19 f4       	brne	.+6      	; 0x1424 <vfprintf+0xe4>
    141e:	50 e8       	ldi	r21, 0x80	; 128
    1420:	f5 2a       	or	r15, r21
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <vfprintf+0xe8>
    1424:	98 36       	cpi	r25, 0x68	; 104
    1426:	49 f4       	brne	.+18     	; 0x143a <vfprintf+0xfa>
    1428:	f2 01       	movw	r30, r4
    142a:	23 fd       	sbrc	r18, 3
    142c:	95 91       	lpm	r25, Z+
    142e:	23 ff       	sbrs	r18, 3
    1430:	91 91       	ld	r25, Z+
    1432:	2f 01       	movw	r4, r30
    1434:	99 23       	and	r25, r25
    1436:	09 f0       	breq	.+2      	; 0x143a <vfprintf+0xfa>
    1438:	b8 cf       	rjmp	.-144    	; 0x13aa <vfprintf+0x6a>
    143a:	89 2f       	mov	r24, r25
    143c:	85 54       	subi	r24, 0x45	; 69
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	18 f0       	brcs	.+6      	; 0x1448 <vfprintf+0x108>
    1442:	80 52       	subi	r24, 0x20	; 32
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	38 f4       	brcc	.+14     	; 0x1456 <vfprintf+0x116>
    1448:	44 e0       	ldi	r20, 0x04	; 4
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	a4 0e       	add	r10, r20
    144e:	b5 1e       	adc	r11, r21
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	59 83       	std	Y+1, r21	; 0x01
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <vfprintf+0x134>
    1456:	93 36       	cpi	r25, 0x63	; 99
    1458:	31 f0       	breq	.+12     	; 0x1466 <vfprintf+0x126>
    145a:	93 37       	cpi	r25, 0x73	; 115
    145c:	79 f0       	breq	.+30     	; 0x147c <vfprintf+0x13c>
    145e:	93 35       	cpi	r25, 0x53	; 83
    1460:	09 f0       	breq	.+2      	; 0x1464 <vfprintf+0x124>
    1462:	56 c0       	rjmp	.+172    	; 0x1510 <vfprintf+0x1d0>
    1464:	20 c0       	rjmp	.+64     	; 0x14a6 <vfprintf+0x166>
    1466:	f5 01       	movw	r30, r10
    1468:	80 81       	ld	r24, Z
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	42 e0       	ldi	r20, 0x02	; 2
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	a4 0e       	add	r10, r20
    1472:	b5 1e       	adc	r11, r21
    1474:	61 01       	movw	r12, r2
    1476:	01 e0       	ldi	r16, 0x01	; 1
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	12 c0       	rjmp	.+36     	; 0x14a0 <vfprintf+0x160>
    147c:	f5 01       	movw	r30, r10
    147e:	c0 80       	ld	r12, Z
    1480:	d1 80       	ldd	r13, Z+1	; 0x01
    1482:	f6 fc       	sbrc	r15, 6
    1484:	03 c0       	rjmp	.+6      	; 0x148c <vfprintf+0x14c>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x150>
    148c:	69 2d       	mov	r22, r9
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	42 e0       	ldi	r20, 0x02	; 2
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	a4 0e       	add	r10, r20
    1496:	b5 1e       	adc	r11, r21
    1498:	c6 01       	movw	r24, r12
    149a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <strnlen>
    149e:	8c 01       	movw	r16, r24
    14a0:	5f e7       	ldi	r21, 0x7F	; 127
    14a2:	f5 22       	and	r15, r21
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <vfprintf+0x18e>
    14a6:	f5 01       	movw	r30, r10
    14a8:	c0 80       	ld	r12, Z
    14aa:	d1 80       	ldd	r13, Z+1	; 0x01
    14ac:	f6 fc       	sbrc	r15, 6
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <vfprintf+0x176>
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	7f ef       	ldi	r23, 0xFF	; 255
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x17a>
    14b6:	69 2d       	mov	r22, r9
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	42 e0       	ldi	r20, 0x02	; 2
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	a4 0e       	add	r10, r20
    14c0:	b5 1e       	adc	r11, r21
    14c2:	c6 01       	movw	r24, r12
    14c4:	0e 94 97 0b 	call	0x172e	; 0x172e <strnlen_P>
    14c8:	8c 01       	movw	r16, r24
    14ca:	50 e8       	ldi	r21, 0x80	; 128
    14cc:	f5 2a       	or	r15, r21
    14ce:	f3 fe       	sbrs	r15, 3
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <vfprintf+0x1a0>
    14d2:	1a c0       	rjmp	.+52     	; 0x1508 <vfprintf+0x1c8>
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b3 01       	movw	r22, r6
    14da:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    14de:	ea 94       	dec	r14
    14e0:	8e 2d       	mov	r24, r14
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	08 17       	cp	r16, r24
    14e6:	19 07       	cpc	r17, r25
    14e8:	a8 f3       	brcs	.-22     	; 0x14d4 <vfprintf+0x194>
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <vfprintf+0x1c8>
    14ec:	f6 01       	movw	r30, r12
    14ee:	f7 fc       	sbrc	r15, 7
    14f0:	85 91       	lpm	r24, Z+
    14f2:	f7 fe       	sbrs	r15, 7
    14f4:	81 91       	ld	r24, Z+
    14f6:	6f 01       	movw	r12, r30
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	b3 01       	movw	r22, r6
    14fc:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    1500:	e1 10       	cpse	r14, r1
    1502:	ea 94       	dec	r14
    1504:	01 50       	subi	r16, 0x01	; 1
    1506:	10 40       	sbci	r17, 0x00	; 0
    1508:	01 15       	cp	r16, r1
    150a:	11 05       	cpc	r17, r1
    150c:	79 f7       	brne	.-34     	; 0x14ec <vfprintf+0x1ac>
    150e:	ea c0       	rjmp	.+468    	; 0x16e4 <vfprintf+0x3a4>
    1510:	94 36       	cpi	r25, 0x64	; 100
    1512:	11 f0       	breq	.+4      	; 0x1518 <vfprintf+0x1d8>
    1514:	99 36       	cpi	r25, 0x69	; 105
    1516:	69 f5       	brne	.+90     	; 0x1572 <vfprintf+0x232>
    1518:	f7 fe       	sbrs	r15, 7
    151a:	08 c0       	rjmp	.+16     	; 0x152c <vfprintf+0x1ec>
    151c:	f5 01       	movw	r30, r10
    151e:	20 81       	ld	r18, Z
    1520:	31 81       	ldd	r19, Z+1	; 0x01
    1522:	42 81       	ldd	r20, Z+2	; 0x02
    1524:	53 81       	ldd	r21, Z+3	; 0x03
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <vfprintf+0x200>
    152c:	f5 01       	movw	r30, r10
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	9c 01       	movw	r18, r24
    1534:	44 27       	eor	r20, r20
    1536:	37 fd       	sbrc	r19, 7
    1538:	40 95       	com	r20
    153a:	54 2f       	mov	r21, r20
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a8 0e       	add	r10, r24
    1542:	b9 1e       	adc	r11, r25
    1544:	9f e6       	ldi	r25, 0x6F	; 111
    1546:	f9 22       	and	r15, r25
    1548:	57 ff       	sbrs	r21, 7
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x21e>
    154c:	50 95       	com	r21
    154e:	40 95       	com	r20
    1550:	30 95       	com	r19
    1552:	21 95       	neg	r18
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	4f 4f       	sbci	r20, 0xFF	; 255
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	e0 e8       	ldi	r30, 0x80	; 128
    155c:	fe 2a       	or	r15, r30
    155e:	ca 01       	movw	r24, r20
    1560:	b9 01       	movw	r22, r18
    1562:	a1 01       	movw	r20, r2
    1564:	2a e0       	ldi	r18, 0x0A	; 10
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__ultoa_invert>
    156c:	d8 2e       	mov	r13, r24
    156e:	d2 18       	sub	r13, r2
    1570:	40 c0       	rjmp	.+128    	; 0x15f2 <vfprintf+0x2b2>
    1572:	95 37       	cpi	r25, 0x75	; 117
    1574:	29 f4       	brne	.+10     	; 0x1580 <vfprintf+0x240>
    1576:	1f 2d       	mov	r17, r15
    1578:	1f 7e       	andi	r17, 0xEF	; 239
    157a:	2a e0       	ldi	r18, 0x0A	; 10
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	1d c0       	rjmp	.+58     	; 0x15ba <vfprintf+0x27a>
    1580:	1f 2d       	mov	r17, r15
    1582:	19 7f       	andi	r17, 0xF9	; 249
    1584:	9f 36       	cpi	r25, 0x6F	; 111
    1586:	61 f0       	breq	.+24     	; 0x15a0 <vfprintf+0x260>
    1588:	90 37       	cpi	r25, 0x70	; 112
    158a:	20 f4       	brcc	.+8      	; 0x1594 <vfprintf+0x254>
    158c:	98 35       	cpi	r25, 0x58	; 88
    158e:	09 f0       	breq	.+2      	; 0x1592 <vfprintf+0x252>
    1590:	ac c0       	rjmp	.+344    	; 0x16ea <vfprintf+0x3aa>
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <vfprintf+0x272>
    1594:	90 37       	cpi	r25, 0x70	; 112
    1596:	39 f0       	breq	.+14     	; 0x15a6 <vfprintf+0x266>
    1598:	98 37       	cpi	r25, 0x78	; 120
    159a:	09 f0       	breq	.+2      	; 0x159e <vfprintf+0x25e>
    159c:	a6 c0       	rjmp	.+332    	; 0x16ea <vfprintf+0x3aa>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <vfprintf+0x268>
    15a0:	28 e0       	ldi	r18, 0x08	; 8
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	0a c0       	rjmp	.+20     	; 0x15ba <vfprintf+0x27a>
    15a6:	10 61       	ori	r17, 0x10	; 16
    15a8:	14 fd       	sbrc	r17, 4
    15aa:	14 60       	ori	r17, 0x04	; 4
    15ac:	20 e1       	ldi	r18, 0x10	; 16
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <vfprintf+0x27a>
    15b2:	14 fd       	sbrc	r17, 4
    15b4:	16 60       	ori	r17, 0x06	; 6
    15b6:	20 e1       	ldi	r18, 0x10	; 16
    15b8:	32 e0       	ldi	r19, 0x02	; 2
    15ba:	17 ff       	sbrs	r17, 7
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <vfprintf+0x28e>
    15be:	f5 01       	movw	r30, r10
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	44 e0       	ldi	r20, 0x04	; 4
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <vfprintf+0x29e>
    15ce:	f5 01       	movw	r30, r10
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	bc 01       	movw	r22, r24
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	42 e0       	ldi	r20, 0x02	; 2
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	a4 0e       	add	r10, r20
    15e0:	b5 1e       	adc	r11, r21
    15e2:	a1 01       	movw	r20, r2
    15e4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__ultoa_invert>
    15e8:	d8 2e       	mov	r13, r24
    15ea:	d2 18       	sub	r13, r2
    15ec:	8f e7       	ldi	r24, 0x7F	; 127
    15ee:	f8 2e       	mov	r15, r24
    15f0:	f1 22       	and	r15, r17
    15f2:	f6 fe       	sbrs	r15, 6
    15f4:	0b c0       	rjmp	.+22     	; 0x160c <vfprintf+0x2cc>
    15f6:	5e ef       	ldi	r21, 0xFE	; 254
    15f8:	f5 22       	and	r15, r21
    15fa:	d9 14       	cp	r13, r9
    15fc:	38 f4       	brcc	.+14     	; 0x160c <vfprintf+0x2cc>
    15fe:	f4 fe       	sbrs	r15, 4
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <vfprintf+0x2d0>
    1602:	f2 fc       	sbrc	r15, 2
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <vfprintf+0x2d0>
    1606:	8f ee       	ldi	r24, 0xEF	; 239
    1608:	f8 22       	and	r15, r24
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0x2d0>
    160c:	1d 2d       	mov	r17, r13
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <vfprintf+0x2d2>
    1610:	19 2d       	mov	r17, r9
    1612:	f4 fe       	sbrs	r15, 4
    1614:	0d c0       	rjmp	.+26     	; 0x1630 <vfprintf+0x2f0>
    1616:	fe 01       	movw	r30, r28
    1618:	ed 0d       	add	r30, r13
    161a:	f1 1d       	adc	r31, r1
    161c:	80 81       	ld	r24, Z
    161e:	80 33       	cpi	r24, 0x30	; 48
    1620:	19 f4       	brne	.+6      	; 0x1628 <vfprintf+0x2e8>
    1622:	99 ee       	ldi	r25, 0xE9	; 233
    1624:	f9 22       	and	r15, r25
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <vfprintf+0x2f8>
    1628:	1f 5f       	subi	r17, 0xFF	; 255
    162a:	f2 fe       	sbrs	r15, 2
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <vfprintf+0x2f8>
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <vfprintf+0x2f6>
    1630:	8f 2d       	mov	r24, r15
    1632:	86 78       	andi	r24, 0x86	; 134
    1634:	09 f0       	breq	.+2      	; 0x1638 <vfprintf+0x2f8>
    1636:	1f 5f       	subi	r17, 0xFF	; 255
    1638:	0f 2d       	mov	r16, r15
    163a:	f3 fc       	sbrc	r15, 3
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <vfprintf+0x326>
    163e:	f0 fe       	sbrs	r15, 0
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <vfprintf+0x320>
    1642:	1e 15       	cp	r17, r14
    1644:	10 f0       	brcs	.+4      	; 0x164a <vfprintf+0x30a>
    1646:	9d 2c       	mov	r9, r13
    1648:	0b c0       	rjmp	.+22     	; 0x1660 <vfprintf+0x320>
    164a:	9d 2c       	mov	r9, r13
    164c:	9e 0c       	add	r9, r14
    164e:	91 1a       	sub	r9, r17
    1650:	1e 2d       	mov	r17, r14
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0x320>
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	b3 01       	movw	r22, r6
    165a:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    165e:	1f 5f       	subi	r17, 0xFF	; 255
    1660:	1e 15       	cp	r17, r14
    1662:	c0 f3       	brcs	.-16     	; 0x1654 <vfprintf+0x314>
    1664:	04 c0       	rjmp	.+8      	; 0x166e <vfprintf+0x32e>
    1666:	1e 15       	cp	r17, r14
    1668:	10 f4       	brcc	.+4      	; 0x166e <vfprintf+0x32e>
    166a:	e1 1a       	sub	r14, r17
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <vfprintf+0x330>
    166e:	ee 24       	eor	r14, r14
    1670:	04 ff       	sbrs	r16, 4
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <vfprintf+0x352>
    1674:	80 e3       	ldi	r24, 0x30	; 48
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	b3 01       	movw	r22, r6
    167a:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    167e:	02 ff       	sbrs	r16, 2
    1680:	1d c0       	rjmp	.+58     	; 0x16bc <vfprintf+0x37c>
    1682:	01 fd       	sbrc	r16, 1
    1684:	03 c0       	rjmp	.+6      	; 0x168c <vfprintf+0x34c>
    1686:	88 e7       	ldi	r24, 0x78	; 120
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <vfprintf+0x368>
    168c:	88 e5       	ldi	r24, 0x58	; 88
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0b c0       	rjmp	.+22     	; 0x16a8 <vfprintf+0x368>
    1692:	80 2f       	mov	r24, r16
    1694:	86 78       	andi	r24, 0x86	; 134
    1696:	91 f0       	breq	.+36     	; 0x16bc <vfprintf+0x37c>
    1698:	01 ff       	sbrs	r16, 1
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x360>
    169c:	8b e2       	ldi	r24, 0x2B	; 43
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <vfprintf+0x362>
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	f7 fc       	sbrc	r15, 7
    16a4:	8d e2       	ldi	r24, 0x2D	; 45
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b3 01       	movw	r22, r6
    16aa:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x37c>
    16b0:	80 e3       	ldi	r24, 0x30	; 48
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b3 01       	movw	r22, r6
    16b6:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    16ba:	9a 94       	dec	r9
    16bc:	d9 14       	cp	r13, r9
    16be:	c0 f3       	brcs	.-16     	; 0x16b0 <vfprintf+0x370>
    16c0:	da 94       	dec	r13
    16c2:	f1 01       	movw	r30, r2
    16c4:	ed 0d       	add	r30, r13
    16c6:	f1 1d       	adc	r31, r1
    16c8:	80 81       	ld	r24, Z
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    16d2:	dd 20       	and	r13, r13
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <vfprintf+0x380>
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x3a4>
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b3 01       	movw	r22, r6
    16de:	0e 94 ad 0b 	call	0x175a	; 0x175a <fputc>
    16e2:	ea 94       	dec	r14
    16e4:	ee 20       	and	r14, r14
    16e6:	c1 f7       	brne	.-16     	; 0x16d8 <vfprintf+0x398>
    16e8:	43 ce       	rjmp	.-890    	; 0x1370 <vfprintf+0x30>
    16ea:	f3 01       	movw	r30, r6
    16ec:	66 81       	ldd	r22, Z+6	; 0x06
    16ee:	77 81       	ldd	r23, Z+7	; 0x07
    16f0:	cb 01       	movw	r24, r22
    16f2:	2b 96       	adiw	r28, 0x0b	; 11
    16f4:	e2 e1       	ldi	r30, 0x12	; 18
    16f6:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__epilogue_restores__>

000016fa <__eerd_byte_m328p>:
    16fa:	f9 99       	sbic	0x1f, 1	; 31
    16fc:	fe cf       	rjmp	.-4      	; 0x16fa <__eerd_byte_m328p>
    16fe:	92 bd       	out	0x22, r25	; 34
    1700:	81 bd       	out	0x21, r24	; 33
    1702:	f8 9a       	sbi	0x1f, 0	; 31
    1704:	99 27       	eor	r25, r25
    1706:	80 b5       	in	r24, 0x20	; 32
    1708:	08 95       	ret

0000170a <__eeupd_byte_m328p>:
    170a:	26 2f       	mov	r18, r22

0000170c <__eeupd_r18_m328p>:
    170c:	f9 99       	sbic	0x1f, 1	; 31
    170e:	fe cf       	rjmp	.-4      	; 0x170c <__eeupd_r18_m328p>
    1710:	92 bd       	out	0x22, r25	; 34
    1712:	81 bd       	out	0x21, r24	; 33
    1714:	f8 9a       	sbi	0x1f, 0	; 31
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	00 b4       	in	r0, 0x20	; 32
    171a:	02 16       	cp	r0, r18
    171c:	39 f0       	breq	.+14     	; 0x172c <__eeupd_r18_m328p+0x20>
    171e:	1f ba       	out	0x1f, r1	; 31
    1720:	20 bd       	out	0x20, r18	; 32
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	fa 9a       	sbi	0x1f, 2	; 31
    1728:	f9 9a       	sbi	0x1f, 1	; 31
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	08 95       	ret

0000172e <strnlen_P>:
    172e:	fc 01       	movw	r30, r24
    1730:	05 90       	lpm	r0, Z+
    1732:	61 50       	subi	r22, 0x01	; 1
    1734:	70 40       	sbci	r23, 0x00	; 0
    1736:	01 10       	cpse	r0, r1
    1738:	d8 f7       	brcc	.-10     	; 0x1730 <strnlen_P+0x2>
    173a:	80 95       	com	r24
    173c:	90 95       	com	r25
    173e:	8e 0f       	add	r24, r30
    1740:	9f 1f       	adc	r25, r31
    1742:	08 95       	ret

00001744 <strnlen>:
    1744:	fc 01       	movw	r30, r24
    1746:	61 50       	subi	r22, 0x01	; 1
    1748:	70 40       	sbci	r23, 0x00	; 0
    174a:	01 90       	ld	r0, Z+
    174c:	01 10       	cpse	r0, r1
    174e:	d8 f7       	brcc	.-10     	; 0x1746 <strnlen+0x2>
    1750:	80 95       	com	r24
    1752:	90 95       	com	r25
    1754:	8e 0f       	add	r24, r30
    1756:	9f 1f       	adc	r25, r31
    1758:	08 95       	ret

0000175a <fputc>:
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	8c 01       	movw	r16, r24
    1764:	eb 01       	movw	r28, r22
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	81 ff       	sbrs	r24, 1
    176a:	1b c0       	rjmp	.+54     	; 0x17a2 <fputc+0x48>
    176c:	82 ff       	sbrs	r24, 2
    176e:	0d c0       	rjmp	.+26     	; 0x178a <fputc+0x30>
    1770:	2e 81       	ldd	r18, Y+6	; 0x06
    1772:	3f 81       	ldd	r19, Y+7	; 0x07
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	28 17       	cp	r18, r24
    177a:	39 07       	cpc	r19, r25
    177c:	64 f4       	brge	.+24     	; 0x1796 <fputc+0x3c>
    177e:	e8 81       	ld	r30, Y
    1780:	f9 81       	ldd	r31, Y+1	; 0x01
    1782:	01 93       	st	Z+, r16
    1784:	f9 83       	std	Y+1, r31	; 0x01
    1786:	e8 83       	st	Y, r30
    1788:	06 c0       	rjmp	.+12     	; 0x1796 <fputc+0x3c>
    178a:	e8 85       	ldd	r30, Y+8	; 0x08
    178c:	f9 85       	ldd	r31, Y+9	; 0x09
    178e:	80 2f       	mov	r24, r16
    1790:	09 95       	icall
    1792:	89 2b       	or	r24, r25
    1794:	31 f4       	brne	.+12     	; 0x17a2 <fputc+0x48>
    1796:	8e 81       	ldd	r24, Y+6	; 0x06
    1798:	9f 81       	ldd	r25, Y+7	; 0x07
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	9f 83       	std	Y+7, r25	; 0x07
    179e:	8e 83       	std	Y+6, r24	; 0x06
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <fputc+0x4c>
    17a2:	0f ef       	ldi	r16, 0xFF	; 255
    17a4:	1f ef       	ldi	r17, 0xFF	; 255
    17a6:	c8 01       	movw	r24, r16
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <__ultoa_invert>:
    17b2:	fa 01       	movw	r30, r20
    17b4:	aa 27       	eor	r26, r26
    17b6:	28 30       	cpi	r18, 0x08	; 8
    17b8:	51 f1       	breq	.+84     	; 0x180e <__ultoa_invert+0x5c>
    17ba:	20 31       	cpi	r18, 0x10	; 16
    17bc:	81 f1       	breq	.+96     	; 0x181e <__ultoa_invert+0x6c>
    17be:	e8 94       	clt
    17c0:	6f 93       	push	r22
    17c2:	6e 7f       	andi	r22, 0xFE	; 254
    17c4:	6e 5f       	subi	r22, 0xFE	; 254
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	af 4f       	sbci	r26, 0xFF	; 255
    17ce:	b1 e0       	ldi	r27, 0x01	; 1
    17d0:	3e d0       	rcall	.+124    	; 0x184e <__ultoa_invert+0x9c>
    17d2:	b4 e0       	ldi	r27, 0x04	; 4
    17d4:	3c d0       	rcall	.+120    	; 0x184e <__ultoa_invert+0x9c>
    17d6:	67 0f       	add	r22, r23
    17d8:	78 1f       	adc	r23, r24
    17da:	89 1f       	adc	r24, r25
    17dc:	9a 1f       	adc	r25, r26
    17de:	a1 1d       	adc	r26, r1
    17e0:	68 0f       	add	r22, r24
    17e2:	79 1f       	adc	r23, r25
    17e4:	8a 1f       	adc	r24, r26
    17e6:	91 1d       	adc	r25, r1
    17e8:	a1 1d       	adc	r26, r1
    17ea:	6a 0f       	add	r22, r26
    17ec:	71 1d       	adc	r23, r1
    17ee:	81 1d       	adc	r24, r1
    17f0:	91 1d       	adc	r25, r1
    17f2:	a1 1d       	adc	r26, r1
    17f4:	20 d0       	rcall	.+64     	; 0x1836 <__ultoa_invert+0x84>
    17f6:	09 f4       	brne	.+2      	; 0x17fa <__ultoa_invert+0x48>
    17f8:	68 94       	set
    17fa:	3f 91       	pop	r19
    17fc:	2a e0       	ldi	r18, 0x0A	; 10
    17fe:	26 9f       	mul	r18, r22
    1800:	11 24       	eor	r1, r1
    1802:	30 19       	sub	r19, r0
    1804:	30 5d       	subi	r19, 0xD0	; 208
    1806:	31 93       	st	Z+, r19
    1808:	de f6       	brtc	.-74     	; 0x17c0 <__ultoa_invert+0xe>
    180a:	cf 01       	movw	r24, r30
    180c:	08 95       	ret
    180e:	46 2f       	mov	r20, r22
    1810:	47 70       	andi	r20, 0x07	; 7
    1812:	40 5d       	subi	r20, 0xD0	; 208
    1814:	41 93       	st	Z+, r20
    1816:	b3 e0       	ldi	r27, 0x03	; 3
    1818:	0f d0       	rcall	.+30     	; 0x1838 <__ultoa_invert+0x86>
    181a:	c9 f7       	brne	.-14     	; 0x180e <__ultoa_invert+0x5c>
    181c:	f6 cf       	rjmp	.-20     	; 0x180a <__ultoa_invert+0x58>
    181e:	46 2f       	mov	r20, r22
    1820:	4f 70       	andi	r20, 0x0F	; 15
    1822:	40 5d       	subi	r20, 0xD0	; 208
    1824:	4a 33       	cpi	r20, 0x3A	; 58
    1826:	18 f0       	brcs	.+6      	; 0x182e <__ultoa_invert+0x7c>
    1828:	49 5d       	subi	r20, 0xD9	; 217
    182a:	31 fd       	sbrc	r19, 1
    182c:	40 52       	subi	r20, 0x20	; 32
    182e:	41 93       	st	Z+, r20
    1830:	02 d0       	rcall	.+4      	; 0x1836 <__ultoa_invert+0x84>
    1832:	a9 f7       	brne	.-22     	; 0x181e <__ultoa_invert+0x6c>
    1834:	ea cf       	rjmp	.-44     	; 0x180a <__ultoa_invert+0x58>
    1836:	b4 e0       	ldi	r27, 0x04	; 4
    1838:	a6 95       	lsr	r26
    183a:	97 95       	ror	r25
    183c:	87 95       	ror	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	ba 95       	dec	r27
    1844:	c9 f7       	brne	.-14     	; 0x1838 <__ultoa_invert+0x86>
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	61 05       	cpc	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	08 95       	ret
    184e:	9b 01       	movw	r18, r22
    1850:	ac 01       	movw	r20, r24
    1852:	0a 2e       	mov	r0, r26
    1854:	06 94       	lsr	r0
    1856:	57 95       	ror	r21
    1858:	47 95       	ror	r20
    185a:	37 95       	ror	r19
    185c:	27 95       	ror	r18
    185e:	ba 95       	dec	r27
    1860:	c9 f7       	brne	.-14     	; 0x1854 <__ultoa_invert+0xa2>
    1862:	62 0f       	add	r22, r18
    1864:	73 1f       	adc	r23, r19
    1866:	84 1f       	adc	r24, r20
    1868:	95 1f       	adc	r25, r21
    186a:	a0 1d       	adc	r26, r0
    186c:	08 95       	ret

0000186e <__prologue_saves__>:
    186e:	2f 92       	push	r2
    1870:	3f 92       	push	r3
    1872:	4f 92       	push	r4
    1874:	5f 92       	push	r5
    1876:	6f 92       	push	r6
    1878:	7f 92       	push	r7
    187a:	8f 92       	push	r8
    187c:	9f 92       	push	r9
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	ca 1b       	sub	r28, r26
    1898:	db 0b       	sbc	r29, r27
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	09 94       	ijmp

000018a6 <__epilogue_restores__>:
    18a6:	2a 88       	ldd	r2, Y+18	; 0x12
    18a8:	39 88       	ldd	r3, Y+17	; 0x11
    18aa:	48 88       	ldd	r4, Y+16	; 0x10
    18ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    18b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    18b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    18b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    18b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    18b8:	b9 84       	ldd	r11, Y+9	; 0x09
    18ba:	c8 84       	ldd	r12, Y+8	; 0x08
    18bc:	df 80       	ldd	r13, Y+7	; 0x07
    18be:	ee 80       	ldd	r14, Y+6	; 0x06
    18c0:	fd 80       	ldd	r15, Y+5	; 0x05
    18c2:	0c 81       	ldd	r16, Y+4	; 0x04
    18c4:	1b 81       	ldd	r17, Y+3	; 0x03
    18c6:	aa 81       	ldd	r26, Y+2	; 0x02
    18c8:	b9 81       	ldd	r27, Y+1	; 0x01
    18ca:	ce 0f       	add	r28, r30
    18cc:	d1 1d       	adc	r29, r1
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	ed 01       	movw	r28, r26
    18da:	08 95       	ret

000018dc <_exit>:
    18dc:	f8 94       	cli

000018de <__stop_program>:
    18de:	ff cf       	rjmp	.-2      	; 0x18de <__stop_program>
